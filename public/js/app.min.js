angular.module('templates', []).run(['$templateCache', function($templateCache) {$templateCache.put('layouts/layout-blank.html','<div ui-view="content"></div>');
$templateCache.put('layouts/layout-default.html','<slap-header></slap-header><div class="container-fluid"><div class="row row-flex"><div class="col-md-2 col-sm-12 col-xs-12 left-panel-parent"><slap-left-panel></slap-left-panel></div><div class="col-md-10 col-sm-12 col-xs-12 slap-container"><div ui-view="content"></div></div></div></div>');
$templateCache.put('admin/layouts/layout-blank.html','<div ui-view="content"></div>');
$templateCache.put('admin/layouts/layout-default.html','<admin-slap-navbar></admin-slap-navbar><div class="slap-container"><slap-breadcrumb></slap-breadcrumb><article ui-view="content" class="admin-content-root-container"></article><admin-slap-footer></admin-slap-footer></div>');
$templateCache.put('components/button-switch/button-switch.html','<label class="switch pull-right"><input type="checkbox" ng-model="$ctrl.visible"><div class="slider round"><span class="pull-right" ng-show="!$ctrl.visible">HIDE</span> <span class="pull-left" ng-show="$ctrl.visible">SHOW</span></div></label>');
$templateCache.put('components/slap-color-switch/slap-color-switch.html','<div class="slap-color-switch" layout="row" layout-align="center center" ng-class="{\'inactive\' : $ctrl.value , \'no-border\': $ctrl.static}" ng-click="$ctrl.toggleValue()"><div class="color-dot" ng-style="{\'background-color\': $ctrl.bgcolor}"></div><span>{{$ctrl.name}}</span></div>');
$templateCache.put('components/slap-footer/slap-footer.html','<div class="slap-footer col-md-12 col-xs-12"><div class="row"><div class="col-xs-6 footer-column footer-column-left"><div ng-show="$ctrl.state.prevStep.sref"><button class="button-oval button-back pull-left outline-0" ng-click="$ctrl.prev()"></button> <span class="pull-left hidden-xs">{{ $ctrl.state.prevStep.name }}</span></div></div><div class="col-xs-6 footer-column footer-column-right"><div ng-show="$ctrl.state.nextStep.sref"><button class="button-oval button-forward pull-right outline-0" ng-click="$ctrl.next()"></button> <span class="pull-right hidden-xs">{{ $ctrl.state.nextStep.name }}</span></div></div></div></div>');
$templateCache.put('components/slap-header/slap-header.html','<header class="slap-header"><nav class="navbar navbar-default"><div class="container-fluid"><div class="navbar-header"><button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#slap-sidebar" aria-expanded="false"><span class="sr-only">Toggle navigation</span> <span class="icon-bar"></span> <span class="icon-bar"></span> <span class="icon-bar"></span></button> <a ui-sref="mindset.ourCommitment"><img src="./images/logo.png" alt="" class="logo-img"></a></div><div class="dropdown pull-right profile-dropdown visible-xs"><a class="dropdown-toggle text-white" data-toggle="dropdown" role="button" aria-haspopup="true" aria-expanded="false"><img src="images/carr-avatar.png" class="profile-image img-circle"> {{ $ctrl.user.name }} <i class="fa fa-chevron-down" aria-hidden="true"></i></a><ul class="dropdown-menu"><li><a ui-sref="payments">Payments</a></li><li role="separator" class="divider"></li><li><a ng-click="$ctrl.logout()">Logout</a></li></ul></div><ul class="nav navbar-nav navbar-right hidden-xs"><li><a ui-sref="mindset.ourCommitment">get help</a></li><li><a ui-sref="mindset.ourCommitment">slapschool</a></li><li><a ui-sref="mindset.ourCommitment">slapworld</a></li><li class="dropdown"><a class="dropdown-toggle text-white" data-toggle="dropdown" role="button" aria-haspopup="true" aria-expanded="false">SLAP YEARS</a><ul class="dropdown-menu"><li ng-repeat="user in $ctrl.user.accounts"><a ng-click="$ctrl.selectSLAPyear(user)"><span style="font-size: 16px; color:blue">{{\'YEAR \' + ($index+1) + \' \'}}</span> {{ user.createdAt | date: \'yyyy-MM-dd\'}} <span class="label label-primary" ng-if="user._id == $ctrl.user._id">current</span></a></li></ul></li><li class="dropdown pull-right profile-dropdown"><a class="dropdown-toggle text-white" data-toggle="dropdown" role="button" aria-haspopup="true" aria-expanded="false"><img src="images/carr-avatar.png" class="profile-image img-circle"> {{ $ctrl.user.name }} <i class="fa fa-chevron-down" aria-hidden="true"></i></a><ul class="dropdown-menu"><li><a ui-sref="payments">Payments</a></li><li><a ui-sref="myaccounts">My Accounts</a></li><li role="separator" class="divider"></li><li><a ng-click="$ctrl.logout()">Logout</a></li></ul></li></ul></div></nav></header>');
$templateCache.put('components/slap-left-panel/leftPanel.html','<div class="left-panel collapse navbar-collapse" id="slap-sidebar"><ul class="list-group left-panel"><div><li class="list-group-item left-panel-item" aside-collapse="" ui-sref-active="{\'left-panel-item-active\' : \'mindset.*\' }" data-toggle="collapse" data-target="#asideMindset" check-aside-section="subList.slapMindset" check-section="checkMindset"><div class="item-circle-stub" ng-hide="checkMindset"></div><div class="item-circle item-circle-check" ng-show="checkMindset" ui-sref-active="{\'item-circle-active\' : \'mindset.*\' }"><i class="fa fa-check fa-lg" aria-hidden="true"></i></div><span>SLAPmindset</span></li><div class="enclosed-list collapse" id="asideMindset" ui-sref-active="{\'in\' : \'mindset.*\' }"><ul class="list-group"><li class="list-group-item enclosed-list-item" ui-sref-active-eq="enclosed-list-item-active" ng-repeat="mindset in subList.slapMindset"><a ui-sref="{{ mindset.sref }}">{{ mindset.name }}</a></li></ul></div></div><div><li class="list-group-item left-panel-item" aside-collapse="" ui-sref-active="{\'left-panel-item-active\' : \'statement.*\' }" data-toggle="collapse" data-target="#asideStatement" check-aside-section="subList.slapStatement" check-section="checkStatement"><div class="item-circle" ui-sref-active="{\'item-circle-active\' : \'statement.*\' }" ng-hide="checkStatement"><span>1</span></div><div class="item-circle item-circle-check" ng-show="checkStatement" ui-sref-active="{\'item-circle-active\' : \'statement.*\' }"><i class="fa fa-check fa-lg" aria-hidden="true"></i></div><span>SLAPStatement</span></li><div class="enclosed-list collapse" id="asideStatement" ui-sref-active="{\'in\' : \'statement.*\' }"><ul class="list-group"><li class="list-group-item enclosed-list-item" ui-sref-active-eq="enclosed-list-item-active" ng-repeat="statement in subList.slapStatement"><a ui-sref="{{ statement.sref }}">{{ statement.name }}</a></li></ul></div></div><div><li class="list-group-item left-panel-item" ui-sref-active="{\'left-panel-item-active\' : \'idealClient.*\' }" aside-collapse="" data-toggle="collapse" data-target="#asideIdealClient" check-aside-section="subList.idealClients" check-section="checkIdealClient"><div class="item-circle" ui-sref-active="{\'item-circle-active\' : \'idealClient.*\' }" ng-hide="checkIdealClient"><span>2</span></div><div class="item-circle item-circle-check" ng-show="checkIdealClient" ui-sref-active="{\'item-circle-active\' : \'idealClient.*\' }"><i class="fa fa-check fa-lg" aria-hidden="true"></i></div><span>ideal client</span></li><div class="enclosed-list collapse" id="asideIdealClient" ui-sref-active="{\'in\' : \'idealClient.*\' }"><ul class="list-group"><li class="list-group-item enclosed-list-item" ui-sref-active-eq="enclosed-list-item-active" ng-repeat="idealClient in subList.idealClients"><a ui-sref="{{ idealClient.sref }}">{{ idealClient.name }}</a></li></ul></div></div><div><li class="list-group-item left-panel-item" ui-sref-active="{\'left-panel-item-active\' : \'yearGoal.*\' }" aside-collapse="" data-toggle="collapse" data-target="#asideYearGoal" check-aside-section="subList.yearGoals" check-section="checkYearGoal"><div class="item-circle" ui-sref-active="{\'item-circle-active\' : \'yearGoal.*\' }" ng-hide="checkYearGoal"><span>3</span></div><div class="item-circle item-circle-check" ng-show="checkYearGoal" ui-sref-active="{\'item-circle-active\' : \'yearGoal.*\' }"><i class="fa fa-check fa-lg" aria-hidden="true"></i></div><span>Year goal</span></li><div class="enclosed-list collapse" id="asideYearGoal" ui-sref-active="{\'in\' : \'yearGoal.*\' }"><ul class="list-group"><li class="list-group-item enclosed-list-item" ui-sref-active-eq="enclosed-list-item-active" ng-repeat="yearGoal in subList.yearGoals"><a ui-sref="{{ yearGoal.sref }}">{{ yearGoal.name }}</a></li></ul></div></div><div><li class="list-group-item left-panel-item" ui-sref-active="{\'left-panel-item-active\' : \'actionPlan.*\' }" aside-collapse="" data-toggle="collapse" data-target="#asideActionPlan" check-aside-section="subList.actionPlans" check-section="checkActionPlan"><div class="item-circle" ui-sref-active="{\'item-circle-active\' : \'actionPlan.*\' }" ng-hide="checkActionPlan"><span>4</span></div><div class="item-circle item-circle-check" ng-show="checkActionPlan" ui-sref-active="{\'item-circle-active\' : \'actionPlan.*\' }"><i class="fa fa-check fa-lg" aria-hidden="true"></i></div><span>action plan</span></li><div class="enclosed-list collapse" id="asideActionPlan" ui-sref-active="{\'in\' : \'actionPlan.*\' }"><ul class="list-group"><li class="list-group-item enclosed-list-item" ui-sref-active-eq="enclosed-list-item-active" ng-repeat="actionPlan in subList.actionPlans"><a ui-sref="{{ actionPlan.sref }}">{{ actionPlan.name }}</a></li></ul></div></div><div><li class="list-group-item left-panel-item" ui-sref-active="{\'left-panel-item-active\' : \'execute.*\' }" aside-collapse="" data-toggle="collapse" data-target="#asideExecute" check-aside-section="subList.execute" check-section="checkExecute"><div class="item-circle" ui-sref-active="{\'item-circle-active\' : \'execute.*\' }" ng-hide="checkExecute"><span>5</span></div><div class="item-circle item-circle-check" ng-show="checkExecute" ui-sref-active="{\'item-circle-active\' : \'execute.*\' }"><i class="fa fa-check fa-lg" aria-hidden="true"></i></div><span>execute</span></li><div class="enclosed-list collapse" id="asideExecute" ui-sref-active="{\'in\' : \'execute.*\' }"><ul class="list-group"><li class="list-group-item enclosed-list-item" ui-sref-active-eq="enclosed-list-item-active" ng-repeat="exec in subList.execute"><a ui-sref="{{ exec.sref }}">{{ exec.name }}</a></li></ul></div></div></ul></div>');
$templateCache.put('components/slap-list-item/slap-list-item.html','<div class="md-list-item-text" layout="row" flex="" layout-align="space-between center"><span flex="" style="overflow: hidden; text-overflow: ellipsis;">{{$ctrl.title}}</span> <span flex="10" ng-if="$ctrl.item.type == \'sales\'" class="text-center"><small>SALE UNITS<br>{{$ctrl.item.saleUnit}} Units</small></span> <span flex="10" class="text-center"><small>DUE DATE<br>{{$ctrl.item.dueDate | date:\'yyyy-MM-dd\'}}</small></span> <span flex="10" class="m-w-es-5" layout="column" layout-align="center space-around"><uib-progressbar class="one-line-bar" max="100" value="$ctrl.item.progress" style="height: 12px"><span style="color:white; white-space:nowrap;"></span></uib-progressbar><small class="text-center" style="font-size: 12px">{{$ctrl.item.progress}}%</small></span></div><div flex="5"><a class="icon-btn" ng-click="$ctrl.openItemDialog()($event, \'edit\', $ctrl.item.type, $ctrl.item)"><i class="material-icons">mode_edit</i></a> <a class="icon-btn" ng-click="$ctrl.openDeleteItemDialog()($event, $ctrl.item)"><i class="material-icons">delete_forever</i></a></div>');
$templateCache.put('components/slap-notifications/slap-notifications.html','<div ng-repeat="notification in $ctrl.notifications"><div class="row sample-show-hide" ng-show="notification.show"><div class="col-xs-12"><div class="notice-box col-md-12 sample-show-hide notice-error"><span>{{notification.message}}</span> <span class="close-btn" ng-click="closeNotice(notification)"></span></div></div></div></div>');
$templateCache.put('components/slap-rating/slap-rating.html','<div class="slap-rating"><div ng-repeat="r in [1,2,3,4,5].slice(0, $ctrl.rate)" class="rate-item active" ng-click="$event.preventDefault(); $ctrl.rate=r"><span>{{r}}</span></div><div ng-repeat="r in [1,2,3,4,5].slice($ctrl.rate)" class="rate-item" ng-click="$event.preventDefault(); $ctrl.rate=r"><span>{{r}}</span></div></div>');
$templateCache.put('components/slap-static-text/slap-static-text.html','<div class="static-text-container"><p class="m-b-es-50 panel-title">Helpful Tips</p><div class="col-md-12 sample-show-hide" ng-hide="$ctrl.visible"><div class="row"><div class="item-box col-md-6 m-b-es-20"><p class="p-l-es-30">Think about rent/mortgage, groceries, eating out, daycare, tuition, healthcare, pets, personal grooming, vacations, entertainment\u2026the list goes on and on (we know!).</p></div><div class="item-box col-md-6 m-b-es-20"><p class="p-l-es-30">You also want to consider taxes - so if you know roughly how much you pay each year in taxes - enter that in as an expense as well.</p></div><div class="clearfix"></div><div class="item-box col-md-6 m-b-es-20"><p class="p-l-es-30">If you share expenses with another person, then just include that portion of expenses you are responsible for. For example, if you split $2000 rent with another person, enter $1000 as a personal expense below.</p></div><div class="item-box col-md-6 m-b-es-20"><p class="p-l-es-30">Make sure you list everything. Tell the truth, the whole truth and nothing but the truth! We know it is not fun to see how much we spend. But it will help us build the right plan.</p></div></div></div></div>');
$templateCache.put('components/slap-work-moment-icon/slap-work-moment-icon.html','<div class="blue-circle" ng-class="!$ctrl.visible ? \'show-title\' : \'\'"><span ng-click="$ctrl.visible=!$ctrl.visible"><i class="fa fa-arrow-down" aria-hidden="true" ng-show="$ctrl.visible && $ctrl.type==\'work\'"></i> <i class="fa fa-exclamation" aria-hidden="true" ng-show="$ctrl.visible && $ctrl.type==\'moment\'"></i> <span ng-show="!$ctrl.visible" class="title">{{$ctrl.title}}</span> <i class="fa fa-plus" aria-hidden="true" ng-show="!$ctrl.visible"></i></span></div>');
$templateCache.put('components/strategy-video-box/strategy-video-box.html','<div class="modal-header"><button type="button" class="close" ng-click="$ctrl.cancel()">&times;</button><h3 class="modal-title" id="modal-title">{{$ctrl.strategy.name}}</h3></div><div class="modal-body" id="modal-body"><div class="prev-strategy" ng-click="$ctrl.goPrevStrategy()"><i class="fa fa-arrow-left" aria-hidden="true"></i></div><div class="row"><div class="col-xs-12 col-sm-12 col-md-12 col-lg-8"><video controls="" preload="none" class="col-sm-12" poster="../images/carr.png"><source ng-src="{{$ctrl.strategy.video}}" type="video/mp4"></video></div><div class="col-xs-12 col-sm-12 col-md-12 col-lg-4"><p>How it work for you and your ideal client?</p><br><slap-rating rate="$ctrl.strategy.rating"></slap-rating><div class="textarea-box m-t-es-20"><textarea ng-model="$ctrl.strategy.reason" type="text" class="monthly-cost outline-0" ng-class="{\'active\': data[nthQut-1].impactClient}" placeholder="Why that rating?" style="width: 100%" rows="3" required=""></textarea></div><button class="btn btn-custom m-t-es-10 pull-right" type="button" ng-click="$ctrl.ok()">SAVE RATING</button></div></div><div class="next-strategy" ng-click="$ctrl.goNextStrategy()"><i class="fa fa-arrow-right" aria-hidden="true"></i></div></div><div class="modal-footer"></div>');
$templateCache.put('components/video-block/video-block.html','<div class="video-container"><div class="video-panel" style="width: calc(100% - 80px)"><p data-ng-bind="::title" class="panel-title"></p></div><div class="video-content sample-show-hide row sample-show-hide" ng-hide="$ctrl.visible"><video controls="" preload="none" class="col-sm-12 hidden-xs" poster="../images/carr.png"><source ng-src="{{$ctrl.videoSrc ? $ctrl.videoSrc: \'http://media.w3.org/2016/01/Emmy-Award.mp4\'}}" type="video/mp4"></video><video controls="" preload="none" class="col-xs-12 visible-xs video-panel-small" poster="../images/carr.png"><source ng-src="{{$ctrl.videoSrc ? $ctrl.videoSrc: \'http://media.w3.org/2016/01/Emmy-Award.mp4\'}}" type="video/mp4"></video></div></div>');
$templateCache.put('admin/components/breadcrumb/slap-breadcrumb.html','<div class="col-md-12" ng-show="$ctrl.breadcrumbs.showBC"><ol class="breadcrumb" ng-show="$ctrl.breadcrumbs.crumbs.length > 0"><li><a ui-sref="admin.home"><i class="fa fa-home"></i></a></li><li ng-repeat="crumb in $ctrl.breadcrumbs.crumbs" ng-class="{\'active\':$ctrl.breadcrumbs.crumbs.length-1 == $index}"><a ng-hide="$ctrl.breadcrumbs.crumbs.length-1 == $index" ui-sref="{{crumb.path}}(crumb.opts)">{{crumb.name}}</a> <span ng-show="$ctrl.breadcrumbs.crumbs.length-1 == $index">{{crumb.name}}</span></li></ol><h1>{{$ctrl.breadcrumbs.h1}}</h1></div>');
$templateCache.put('admin/components/navbar/slap-navbar.html','<header class="slap-header"><nav class="navbar navbar-default"><div class="container-fluid"><div class="navbar-header"><button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#bs-example-navbar-collapse-1" aria-expanded="false"><span class="sr-only">Toggle navigation</span> <span class="icon-bar"></span> <span class="icon-bar"></span> <span class="icon-bar"></span></button> <a ui-sref="admin.home"><img src="./images/logo.png" alt="" class="logo-img"></a></div><div class="dropdown pull-right profile-dropdown visible-xs"><a class="dropdown-toggle text-white" data-toggle="dropdown" role="button" aria-haspopup="true" aria-expanded="false"><img src="images/carr-avatar.png" class="profile-image img-circle"> {{ $ctrl.user.name }} <i class="fa fa-chevron-down" aria-hidden="true"></i></a><ul class="dropdown-menu"><li><a ui-sref="payments">Payments</a></li><li role="separator" class="divider"></li><li><a ng-click="$ctrl.logout()">Logout</a></li></ul></div><ul class="nav navbar-nav navbar-right hidden-xs"><li><a ui-sref="admin.home">Home</a></li><li class="dropdown"><a ui-sref="slapsters.list">SLAPsters</a></li><li class="dropdown"><a href="" class="dropdown-toggle" data-toggle="dropdown" role="button" aria-haspopup="true" aria-expanded="false">Reports<span class="caret"></span></a><ul class="dropdown-menu"><li><a ui-sref="report-builder.index">Report Builder</a></li></ul></li><li class="dropdown"><a href="" class="dropdown-toggle" data-toggle="dropdown" role="button" aria-haspopup="true" aria-expanded="false">Admin<span class="caret"></span></a><ul class="dropdown-menu"><li><a ui-sref="plans.list">Plans</a></li><li><a ui-sref="coupon.list">Promocode</a></li><li role="separator" class="divider"></li><li><a ui-sref="emailtemplates.list">Email Templates</a></li><li role="separator" class="divider"></li><li><a ui-sref="users.list">Users</a></li></ul></li><li class="dropdown pull-right profile-dropdown"><a class="dropdown-toggle text-white" data-toggle="dropdown" role="button" aria-haspopup="true" aria-expanded="false"><img src="images/carr-avatar.png" class="profile-image img-circle"> {{ $ctrl.user.name }} <i class="fa fa-chevron-down" aria-hidden="true"></i></a><ul class="dropdown-menu"><li><a ui-sref="admin.myaccounts">Settings</a></li><li role="separator" class="divider"></li><li><a ng-click="$ctrl.logout()">Logout</a></li></ul></li></ul></div></nav></header>');
$templateCache.put('admin/components/footer/slap-footer.html','<footer class="footer"><div class="container text-center"><hr><div class="col-lg-12"><div class="col-xs-12"><p class="footertext">SLAP ADMIN PORTAL<br><small>@2017. Sliver Lining Limited.</small></p></div></div></div></footer>');
$templateCache.put('admin/components/popupDate/popup-date.html','<div class="form-group"><label for="dt">{{ $ctrl.label}}</label><p class="input-group"><input id="dt" type="text" class="form-control" uib-datepicker-popup="" popup-placement="bottom-left" ng-model="$ctrl.dt" is-open="$ctrl.popup.opened" datepicker-options="$ctrl.options" close-text="Close" alt-input-formats="altInputFormats"> <span class="input-group-btn"><button type="button" class="btn btn-default" ng-click="$ctrl.open()"><i class="glyphicon glyphicon-calendar"></i></button></span></p></div>');
$templateCache.put('components/dialogs/item-dialog/item-dialog.html','<md-dialog aria-label="List dialog" class="excute-dialog" ng-class="{\'excute-dialog-actions\': formData.type == \'action\',\'excute-dialog-sales\': formData.type == \'sales\',\'excute-dialog-reflextion\': formData.type == \'reflextion\'}"><section><section class="slap-excute-dialog-header m-b-es-20" layout="row" layout-align="space-between center"><slap-color-switch color="{{colorAction}}" name="Actions" value="filter.showActions" static="true" ng-if="formData.type==\'action\'"></slap-color-switch><slap-color-switch color="{{colorSales}}" name="Sales" value="filter.showActions" static="true" ng-if="formData.type==\'sales\'"></slap-color-switch><slap-color-switch color="{{colorReflextion}}" name="Pause & Reflect" value="filter.showActions" static="true" ng-if="formData.type==\'reflextion\'"></slap-color-switch><a ng-click="closeDialog()"><i class="material-icons">highlight_off</i></a></section><section layout="column" ng-if="formData.type == \'action\'"><form layout="row" layout-wrap="" layout-align="center center" name="form"><md-input-container flex="100"><label>Action Title</label> <input ng-model="formData.title" required="" name="title"><div ng-messages="form.title.$error"><ng-message when="required">Action Title is required.</ng-message></div></md-input-container><md-input-container flex="50" ng-if="curMode == \'add\'"><md-select ng-model="formData.recurrency"><md-option ng-value="\'No Recurrency\'">No Recurrency</md-option><md-option ng-value="\'Daily\'">Daily</md-option><md-option ng-value="\'Weekly\'">Weekly</md-option><md-option ng-value="\'Monthly\'">Monthly</md-option><md-option ng-value="\'Quaterly\'">Quaterly</md-option></md-select><div class="md-errors-spacer"></div></md-input-container><md-input-container flex="50" ng-if="formData.recurrency == \'No Recurrency\' || curMode == \'edit\'"><label>Due Date</label><md-datepicker ng-model="formData.dueDate" md-min-date="today" md-max-date="endDate" name="dueDate"></md-datepicker><div ng-messages="form.dueDate.$error"><div ng-message="valid">The entered value is not a date!</div><div ng-message="required">This date is required!</div><div ng-message="mindate">Date is too early!</div><div ng-message="maxdate">Date is too late!</div></div></md-input-container><md-checkbox ng-model="formData.setRecurDeadline" aria-label="Set DeadLine?" flex="20" ng-if="formData.recurrency != \'No Recurrency\' && curMode == \'add\'">Set Deadline?</md-checkbox><md-input-container flex="30" ng-if="formData.recurrency != \'No Recurrency\' && curMode == \'add\'"><label>Recurrency Deadline</label><md-datepicker ng-model="formData.recurDeadline" md-min-date="today" md-max-date="endDate" ng-disabled="formData.setRecurDeadline == false" name="recurDeadline"></md-datepicker><div ng-messages="form.recurDeadline.$error"><div ng-message="valid">The entered value is not a date!</div><div ng-message="required">This date is required!</div><div ng-message="mindate">Date is too early!</div><div ng-message="maxdate">Date is too late!</div></div></md-input-container><section flex=""></section><md-input-container flex="100"><label>Notes</label> <input ng-model="formData.notes"></md-input-container><md-slider-container layout="" flex="100"><div flex="20"><span>Set Your progress</span></div><md-slider flex="" class="md-primary" md-discrete="" ng-model="formData.progress" step="1" min="1" max="100" aria-label="progress"></md-slider></md-slider-container></form></section><section layout="column" ng-if="formData.type == \'sales\'"><form layout="row" layout-wrap="" layout-align="center center" name="form"><md-input-container flex="100"><md-select ng-model="formData.title"><md-option ng-value="revenue.id" ng-repeat="revenue in revenues | filter : {deleted:false}">{{revenue.name}}</md-option></md-select><div class="md-errors-spacer"></div></md-input-container><md-input-container flex="50"><label>Sales Unit</label> <input ng-model="formData.saleUnit" type="number" required="" name="saleUnit" step="any" min="1"><div ng-messages="form.saleUnit.$error"><ng-message when="required">Sales Unit is required.</ng-message></div></md-input-container><md-input-container flex="50"><label>Due Date</label><md-datepicker ng-model="formData.dueDate" md-min-date="today" md-max-date="endDate" name="dueDate"></md-datepicker><div ng-messages="form.dueDate.$error"><div ng-message="valid">The entered value is not a date!</div><div ng-message="required">This date is required!</div><div ng-message="mindate">Date is too early!</div><div ng-message="maxdate">Date is too late!</div></div></md-input-container><section flex=""></section><md-input-container flex="100"><label>Notes</label> <input ng-model="formData.notes"></md-input-container><md-slider-container layout="" flex="100"><div flex="20"><span>Set Your progress</span></div><md-slider flex="" class="md-primary" md-discrete="" ng-model="formData.progress" step="1" min="1" max="100" aria-label="progress"></md-slider></md-slider-container></form></section><section layout="column" ng-if="formData.type == \'reflextion\'"><section ng-if="formData.reflextWhat == \'\'" layout="row" layout-wrap="" layout-align="center center" style="width:350px;"><h4 flex="100">Reflext</h4><md-input-container flex="100" class="md-block"><md-select ng-model="tempReflextWhat"><md-option ng-value="\'week\'">Week</md-option><md-option ng-value="\'month\'">Month</md-option><md-option ng-value="\'quater\'">Quater</md-option></md-select></md-input-container>{{tempReflextWhat}}<md-button ng-click="selectReflextWhat(tempReflextWhat)" class="md-primary">Next</md-button></section><section ng-if="formData.reflextWhat != \'\' && formData.title == \'\'" layout="row" layout-wrap="" layout-align="center center"><section flex="100"><h3>{{capitalize(formData.reflextWhat) + \'ly Reflection\'}}</h3></section><section flex="{{emotion.id <= 4 ? 25 : 33}}" ng-repeat="emotion in reflextionData"><md-card layout="column" layout-align="center center" class="emotion-card" ng-click="selectEmotion(emotion)"><section style="font-size: 40px">{{emotion.icon}}</section><section>{{emotion.emotion}}</section></md-card></section><md-button ng-click="formData.reflextWhat = \'\'" class="md-primary">Back</md-button></section><section ng-if="formData.reflextWhat != \'\' && formData.title != \'\'" layout="row" layout-wrap="" layout-align="center center"><section class="text-color-strong"><section layout="column"><section layout="row" layout-align="space-between center"><h3 flex="">How do you feel today? {{formData.feeling.icon}} {{formData.feeling.emotion}}</h3><md-button flex="15" class="md-primary" ng-click="formData.title = \'\'">Edit Feeling</md-button></section><p style="font-size: 1.1em">{{formData.feeling.description1}}</p></section><section class="m-w-es-30"><section ng-repeat="qa in formData.feeling.qas"><p>{{qa.question}}</p><md-input-container class="md-block"><label></label> <textarea ng-model="qa.answer" rows="2" md-select-on-focus=""></textarea></md-input-container></section><p style="font-size: 1.1em">{{formData.feeling.description2}}</p></section><section class="m-w-es-30"><h3>Recommended Actions</h3><p style="font-size: 1.1em">{{formData.feeling.description3}}</p><section ng-repeat="action in formData.feeling.actions"><section layout="row" layout-align="space-between center"><h4>Action{{$index+1}}</h4><md-button flex="15" class="md-primary" ng-if="action.added==false" ng-click="action.added=true">ADD ACTION</md-button><md-button flex="15" class="md-primary" ng-if="action.added==true" disabled="">ACTION ADDED</md-button></section><span>{{action.title}}</span></section></section></section></section></section></section><md-dialog-actions ng-if="(!(formData.type==\'reflextion\' && (formData.title == \'\' || formData.reflextWhat == \'\')))"><md-button ng-click="updateItem($event)" class="md-primary" ng-if="(curMode == \'edit\')" ng-disabled="form.$invalid">Edit</md-button><md-button ng-click="updateItem($event)" class="md-primary" ng-if="curMode == \'add\'" ng-disabled="form.$invalid">Add</md-button><md-button ng-click="closeDialog()" class="md-primary">Close Dialog</md-button></md-dialog-actions></md-dialog>');
$templateCache.put('pages/actionPlan/action-items/action-items.html','<div class="slap-page world-around-you" scroll-top=""><div class="panel panel-default"><div class="panel-body"><button-switch visible="showVideoBlock"></button-switch><video-block visible="showVideoBlock"></video-block></div></div><div class="panel panel-default"><div class="panel-body static-text-panel"><button-switch visible="showStaticTextBlock"></button-switch><slap-static-text visible="showStaticTextBlock"></slap-static-text></div></div><div class="panel panel-default"><div class="panel-body slap-work-panel"><div class="row"><div class="col-md-12"><button-switch visible="showFormBlock"></button-switch><p class="logo panel-title">SLAP<span class="aqua-green">work</span></p></div></div><div class="row sample-show-hide" ng-hide="showFormBlock"><div class="col-xs-12 padding-l-r-30 margin-b-24"><p class="heading2">Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nam eu pharetra elit, a dapibus ex. In venenatis tempor odio, non ultrices lectus</p></div><ul class="nav nav-tabs quater-letter-container p-w-es-10 m-w-es-20"><li class="active quater-letter"><a data-toggle="tab" data-target="#quater1">Q1</a></li><li class="quater-letter"><a data-toggle="tab" data-target="#quater2">Q2</a></li><li class="quater-letter"><a data-toggle="tab" data-target="#quater3">Q3</a></li><li class="quater-letter"><a data-toggle="tab" data-target="#quater4">Q4</a></li></ul><div class="tab-content quater-tab-container"><div ng-repeat="nthQut in [1, 2, 3, 4]" id="{{\'quater\'+nthQut}}" class="tab-pane fade in quater-container row" ng-class="currentQut == nthQut ? \'active\' : \'\'"><div class="slap-work-box col-md-12 m-t-es-40" ng-init="showEventsBox=true"><slap-work-moment-icon visible="showEventsBox" type="\'moment\'" title="\'Events\'"></slap-work-moment-icon><div ng-show="showEventsBox" class="sample-show-hide"><div ng-repeat="monthID in QMonths[nthQut - 1]" class="col-xs-4 col-md-4 col-sm-4 text-center"><p>{{monthNames[monthID]}}</p><div ng-repeat="event in eventsByMonth[monthID].events">{{event.name}}</div></div></div></div><div class="clearfix"></div><div class="slap-work-box col-xs-12 m-t-es-40" ng-init="showStrategyBox=true"><slap-work-moment-icon visible="showStrategyBox" type="\'moment\'" title="\'Strategy\'"></slap-work-moment-icon><div ng-show="showStrategyBox" class="sample-show-hide"><div>I will use<select ng-model="data[nthQut-1].strategy.id" class="dropdown-box outline-0 active m-w-es-30" style="width: 200px" disabled=""><option ng-value="strategy.id" ng-repeat="strategy in topRatingStrategies">{{strategy.name}}</option></select>to find my Ideal Client by</div><div class="textarea-box"><textarea ng-model="data[nthQut-1].strategy.description" type="text" class="monthly-cost outline-0 strategy-description" placeholder="" style="width: 100%" ng-keyup="autoExpand($event)" required="" disabled=""></textarea></div></div></div><div class="slap-work-box m-t-es-40 col-xs-12" ng-init="showActionItemsBox=true"><slap-work-moment-icon visible="showActionItemsBox" type="\'work\'" title="\'ActionItems\'"></slap-work-moment-icon><div ng-show="showActionItemsBox" class="sample-show-hide"><div ng-repeat="monthID in QMonths[nthQut - 1]" class="col-xs-12 col-sm-12"><p class="m-t-es-40">{{monthNames[monthID]}}</p><div ng-repeat="action in filterActionItemsByMonth(monthID)"><div class="textarea-box" style="width: calc(100% - 20px); display: inline-block"><textarea ng-model="action.title" type="text" class="monthly-cost outline-0 strategy-description" ng-blur="checkActionCompleted(action, monthID, $event)" placeholder="Add ActionItem" style="width: 100%" ng-keyup="autoExpand($event)" required=""></textarea></div><span class="delete-btn outline-0 pull-right" ng-click="deleteAction(action, monthID)" style="padding-top: 10px"><i class="fa fa-trash" aria-hidden="true"></i></span></div></div></div></div></div></div></div></div></div></div><slap-footer send="sendData" "="" forward="forward"></slap-footer>');
$templateCache.put('pages/actionPlan/action-plan-overview/action-plan-overview.html','<div class="slap-page" scroll-top=""><div class="panel panel-default"><div class="panel-body"><button-switch visible="showVideoBlock"></button-switch><video-block class="video-block-600" visible="showVideoBlock"></video-block></div></div></div><slap-footer send="sendData" "="" forward="forward"></slap-footer>');
$templateCache.put('pages/actionPlan/action-plan-qa/action-plan-qa.html','<div class="slap-page" scroll-top=""><div class="panel panel-default"><div class="panel-body"><button-switch visible="showVideoBlock"></button-switch><video-block class="video-block-600" visible="showVideoBlock"></video-block></div></div></div><slap-footer send="sendData" "="" forward="forward"></slap-footer>');
$templateCache.put('pages/actionPlan/commit-your-action-plan/commit-your-action-plan.html','<div class="slap-page world-around-you" scroll-top=""><div class="panel panel-default"><div class="panel-body"><button-switch visible="showVideoBlock"></button-switch><video-block visible="showVideoBlock"></video-block></div></div><div class="panel panel-default"><div class="panel-body static-text-panel"><button-switch visible="showStaticTextBlock"></button-switch><slap-static-text visible="showStaticTextBlock"></slap-static-text></div></div><div class="panel panel-default"><div class="panel-body slap-work-panel"><div class="row"><div class="col-md-12"><button-switch visible="showFormBlock"></button-switch><p class="logo panel-title">SLAP<span class="aqua-green">work</span></p></div></div><div class="row sample-show-hide" ng-hide="showFormBlock"><div class="col-xs-12 padding-l-r-30 margin-b-24"><p class="heading2">Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nam eu pharetra elit, a dapibus ex. In venenatis tempor odio, non ultrices lectus</p></div><ul class="nav nav-tabs quater-letter-container p-w-es-10 m-w-es-20"><li class="active quater-letter"><a data-toggle="tab" data-target="#quater1">Q1</a></li><li class="quater-letter"><a data-toggle="tab" data-target="#quater2">Q2</a></li><li class="quater-letter"><a data-toggle="tab" data-target="#quater3">Q3</a></li><li class="quater-letter"><a data-toggle="tab" data-target="#quater4">Q4</a></li></ul><div class="tab-content quater-tab-container"><div ng-repeat="nthQut in [1, 2, 3, 4]" id="{{\'quater\'+nthQut}}" class="tab-pane fade in quater-container row" ng-class="currentQut == nthQut ? \'active\' : \'\'"><div class="slap-work-box col-md-12 m-t-es-40" ng-init="showEventsBox=true"><slap-work-moment-icon visible="showEventsBox" type="\'moment\'" title="\'Events\'"></slap-work-moment-icon><div ng-show="showEventsBox" class="sample-show-hide"><div ng-repeat="monthID in QMonths[nthQut - 1]" class="col-xs-4 col-md-4 col-sm-4 text-center"><p>{{monthNames[monthID]}}</p><div ng-repeat="event in eventsByMonth[monthID].events">{{event.name}}</div></div></div></div><div class="clearfix"></div><div class="slap-work-box col-xs-12 m-t-es-40" ng-init="showStrategyBox=true"><slap-work-moment-icon visible="showStrategyBox" type="\'work\'" title="\'Strategy\'"></slap-work-moment-icon><div ng-show="showStrategyBox" class="sample-show-hide"><div>I will use<select ng-model="data[nthQut-1].strategy.id" class="dropdown-box outline-0 active m-w-es-30" style="width: 200px"><option ng-value="strategy.id" ng-repeat="strategy in topRatingStrategies">{{strategy.name}}</option></select>to find my Ideal Client by</div><div class="textarea-box"><textarea ng-model="data[nthQut-1].strategy.description" type="text" class="monthly-cost outline-0 strategy-description" placeholder="" style="width: 100%" ng-keyup="autoExpand($event)" required=""></textarea></div></div></div><div class="slap-work-box m-t-es-40 col-xs-12" ng-init="showActionItemsBox=true"><slap-work-moment-icon visible="showActionItemsBox" type="\'work\'" title="\'ActionItems\'"></slap-work-moment-icon><div ng-show="showActionItemsBox" class="sample-show-hide"><div ng-repeat="monthID in QMonths[nthQut - 1]" class="col-xs-12 col-sm-12"><p class="m-t-es-40">{{monthNames[monthID]}}</p><div ng-repeat="action in filterActionItemsByMonth(monthID)"><div class="textarea-box" style="width: calc(100% - 20px); display: inline-block"><textarea ng-model="action.title" type="text" class="monthly-cost outline-0 strategy-description" ng-blur="checkActionCompleted(action, monthID, $event)" placeholder="Add ActionItem" style="width: 100%" ng-keyup="autoExpand($event)" required=""></textarea></div><span class="delete-btn outline-0 pull-right" ng-click="deleteAction(action, monthID)" style="padding-top: 10px"><i class="fa fa-trash" aria-hidden="true"></i></span></div></div></div></div></div><hr><div class="m-b-es-40"></div><slap-notifications notifications="notifications"></slap-notifications><div class="slap-work-box m-t-es-40 m-w-es-30 m-b-es-150" ng-init="showQuaterGoal=true"><slap-work-moment-icon visible="showQuaterGoal" type="\'work\'" title="\'Quateraly Goals\'"></slap-work-moment-icon><table class="table table-responsive sample-show-hide" id="quaterly-goal-table" ng-show="showQuaterGoal"><thead><tr><td>Revenue Stream</td><td>Q1 Units</td><td>Q2 Units</td><td>Q3 Units</td><td>Q4 Units</td><td>Yearly Total</td><td>Yearly Target</td></tr></thead><tbody><tr ng-repeat="revenue in revenues | filter: {deleted: false}"><td>{{revenue.name}}</td><td ng-repeat="nthQut in [1,2,3,4]"><div class="input-box"><input ng-model="data[nthQut-1].units[revenue.name]" type="text" class="outline-0" ng-keydown="checkValidity(data[nthQut-1].units[revenue.name], $event)" ng-class="{\'active\': revenue.name}" required=""></div></td><td>{{+data[0].units[revenue.name] + +data[1].units[revenue.name] + +data[2].units[revenue.name] + +data[3].units[revenue.name]}}</td><td>{{revenue.unit}}</td></tr></tbody></table></div></div></div></div></div><slap-footer send="sendData" "="" forward="forward"></slap-footer></div>');
$templateCache.put('pages/actionPlan/connecting-strategy-strategizing/connecting-strategy-strategizing.html','<div class="slap-page world-around-you" scroll-top=""><div class="panel panel-default"><div class="panel-body"><button-switch visible="showVideoBlock"></button-switch><video-block visible="showVideoBlock"></video-block></div></div><div class="panel panel-default"><div class="panel-body static-text-panel"><button-switch visible="showStaticTextBlock"></button-switch><slap-static-text visible="showStaticTextBlock"></slap-static-text></div></div><slap-notifications notifications="notifications"></slap-notifications><div class="panel panel-default"><div class="panel-body slap-work-panel"><div class="row"><div class="col-md-12"><button-switch visible="showFormBlock"></button-switch><p class="logo panel-title">SLAP<span class="aqua-green">work</span></p></div></div><div class="row sample-show-hide" ng-hide="showFormBlock"><div class="col-xs-12 padding-l-r-30 margin-b-24"><p class="heading2">Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nam eu pharetra elit, a dapibus ex. In venenatis tempor odio, non ultrices lectus</p></div><ul class="nav nav-tabs quater-letter-container p-w-es-10 m-w-es-20"><li class="active quater-letter"><a data-toggle="tab" data-target="#quater1">Q1</a></li><li class="quater-letter"><a data-toggle="tab" data-target="#quater2">Q2</a></li><li class="quater-letter"><a data-toggle="tab" data-target="#quater3">Q3</a></li><li class="quater-letter"><a data-toggle="tab" data-target="#quater4">Q4</a></li></ul><div class="tab-content quater-tab-container"><div ng-repeat="nthQut in [1, 2, 3, 4]" id="{{\'quater\'+nthQut}}" class="tab-pane fade in quater-container row" ng-class="currentQut == nthQut ? \'active\' : \'\'"><div class="slap-work-box col-md-12 m-t-es-40" ng-init="showEventsBox=true"><slap-work-moment-icon visible="showEventsBox" type="\'moment\'" title="\'Events\'"></slap-work-moment-icon><div ng-show="showEventsBox" class="sample-show-hide"><div ng-repeat="monthID in QMonths[nthQut - 1]" class="col-xs-4 col-md-4 col-sm-4 text-center"><p>{{monthNames[monthID]}}</p><div ng-repeat="event in eventsByMonth[monthID].events">{{event.name}}</div></div></div></div><div class="clearfix"></div><div class="slap-work-box col-xs-12 m-t-es-40" ng-init="showStrategyBox=true"><slap-work-moment-icon visible="showStrategyBox" type="\'work\'" title="\'Strategy\'"></slap-work-moment-icon><div ng-show="showStrategyBox" class="sample-show-hide"><div>I will use<select ng-model="data[nthQut-1].strategy.id" class="dropdown-box outline-0 active m-w-es-30" style="width: 200px" ng-change="qStgChanged[nthQut-1] = true"><option ng-value="strategy.id" ng-repeat="strategy in topRatingStrategies">{{strategy.name}}</option></select>to find my Ideal Client by</div><div class="textarea-box"><textarea ng-model="data[nthQut-1].strategy.description" type="text" class="monthly-cost outline-0 strategy-description" placeholder="" style="width: 100%" ng-keyup="autoExpand($event)" required=""></textarea></div></div></div></div></div></div></div></div></div><slap-footer send="sendData" "="" forward="forward"></slap-footer>');
$templateCache.put('pages/actionPlan/double-check-start-date/double-check-start-date.html','<div class="slap-page slap-start-date" scroll-top=""><div class="panel panel-default"><div class="panel-body"><button-switch visible="showVideoBlock"></button-switch><video-block visible="showVideoBlock"></video-block></div></div><div class="panel panel-default"><div class="panel-body static-text-panel"><button-switch visible="showStaticTextBlock"></button-switch><slap-static-text visible="showStaticTextBlock"></slap-static-text></div></div><div class="panel panel-default"><div class="panel-body slap-work-panel"><button-switch visible="showStartDate"></button-switch><p class="logo panel-title">SLAP<span class="aqua-green">work</span></p><div class="col-md-12 sample-show-hide" ng-hide="showStartDate"><p class="heading2">Choose Your Start Date</p><p class="heading3">I will start to put my SLAP into Action no later than the first day of<br><select ng-model="data.month" class="outline-0 dropdown-box active"><option value="1">January</option><option value="2">February</option><option value="3">March</option><option value="4">April</option><option value="5">May</option><option value="6">June</option><option value="7">July</option><option value="8">August</option><option value="9">September</option><option value="10">October</option><option value="11">November</option><option value="12">December</option></select><span class="year">{{data.year}}</span></p></div></div></div></div><slap-footer send="sendData" "="" forward="forward"></slap-footer>');
$templateCache.put('pages/actionPlan/double-check-year-goal/double-check-year-goal.html','<div class="define-client slap-page"><div class="panel panel-default"><div class="panel-body"><button-switch visible="showVideoBlock"></button-switch><video-block visible="showVideoBlock"></video-block></div></div><div class="panel panel-default"><div class="panel-body static-text-panel"><button-switch visible="showStaticTextBlock"></button-switch><slap-static-text visible="showStaticTextBlock"></slap-static-text></div></div><div class="panel panel-default"><div class="panel-body slap-work-panel"><button-switch visible="showContent"></button-switch><p class="logo panel-title">SLAP<span class="aqua-green">moment</span></p><div class="col-md-12"><div class="row sample-show-hide" ng-hide="showIdealClientTextBlock"><div class="row"><div class="col-xs-12"><p class="description">Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nam eu pharetra elit, a dapibus ex. In venenatis tempor odio, non ultrices lectus</p></div></div></div></div><div class="col-md-12 row-flex sample-show-hide padding-t-45" ng-hide="showContent"><div class="col-xs-12 col-lg-8 col-lg-offset-2"><div class="row m-t-es-15 m-b-es-50"><div class="ideal-clients-list col-md-12"><div class="blue-circle"><span>!</span></div><p ng-repeat="revenue in revenues | filter:{deleted: false}" class="text-center">Selling <span>{{revenue.unit}} Units</span> of <span>{{revenue.name}}</span> for <span>${{revenue.sellingPrice}}</span>.</p></div></div></div></div></div></div></div><slap-footer send="sendData" "="" forward="forward"></slap-footer>');
$templateCache.put('pages/actionPlan/quarterly-goals/quarterly-goals.html','<div class="slap-page world-around-you" scroll-top=""><div class="panel panel-default"><div class="panel-body"><button-switch visible="showVideoBlock"></button-switch><video-block visible="showVideoBlock"></video-block></div></div><div class="panel panel-default"><div class="panel-body static-text-panel"><button-switch visible="showStaticTextBlock"></button-switch><slap-static-text visible="showStaticTextBlock"></slap-static-text></div></div><div class="panel panel-default"><div class="panel-body slap-work-panel"><div class="row"><div class="col-md-12"><button-switch visible="showFormBlock"></button-switch><p class="logo panel-title">SLAP<span class="aqua-green">work</span></p></div></div><div class="row sample-show-hide" ng-hide="showFormBlock"><div class="col-xs-12 padding-l-r-30 margin-b-24"><p class="heading2">Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nam eu pharetra elit, a dapibus ex. In venenatis tempor odio, non ultrices lectus</p></div><ul class="nav nav-tabs quater-letter-container p-w-es-10 m-w-es-20"><li class="active quater-letter"><a data-toggle="tab" data-target="#quater1">Q1</a></li><li class="quater-letter"><a data-toggle="tab" data-target="#quater2">Q2</a></li><li class="quater-letter"><a data-toggle="tab" data-target="#quater3">Q3</a></li><li class="quater-letter"><a data-toggle="tab" data-target="#quater4">Q4</a></li></ul><div class="tab-content quater-tab-container"><div ng-repeat="nthQut in [1, 2, 3, 4]" id="{{\'quater\'+nthQut}}" class="tab-pane fade in quater-container row" ng-class="currentQut == nthQut ? \'active\' : \'\'"><div class="slap-work-box col-md-12 m-t-es-40" ng-init="showEventsBox=true"><slap-work-moment-icon visible="showEventsBox" type="\'moment\'" title="\'Events\'"></slap-work-moment-icon><div ng-show="showEventsBox" class="sample-show-hide"><div ng-repeat="monthID in QMonths[nthQut - 1]" class="col-xs-4 col-md-4 col-sm-4 text-center"><p>{{monthNames[monthID]}}</p><div ng-repeat="event in eventsByMonth[monthID].events">{{event.name}}</div></div></div></div><div class="clearfix"></div><div class="slap-work-box col-xs-12 m-t-es-40" ng-init="showStrategyBox=true"><slap-work-moment-icon visible="showStrategyBox" type="\'moment\'" title="\'Strategy\'"></slap-work-moment-icon><div ng-show="showStrategyBox" class="sample-show-hide"><div>I will use<select ng-model="data[nthQut-1].strategy.id" class="dropdown-box outline-0 active m-w-es-30" style="width: 200px"><option ng-value="strategy.id" ng-repeat="strategy in topRatingStrategies">{{strategy.name}}</option></select>to find my Ideal Client by</div><div class="textarea-box"><textarea ng-model="data[nthQut-1].strategy.description" type="text" class="monthly-cost outline-0 strategy-description" placeholder="" style="width: 100%" ng-keyup="autoExpand($event)" required="" disabled=""></textarea></div></div></div><div class="slap-work-box m-t-es-40 col-xs-12" ng-init="showActionItemsBox=true"><slap-work-moment-icon visible="showActionItemsBox" type="\'moment\'" title="\'ActionItems\'"></slap-work-moment-icon><div ng-show="showActionItemsBox" class="sample-show-hide"><div ng-repeat="monthID in QMonths[nthQut - 1]" class="col-xs-12 col-sm-12"><p class="m-t-es-40">{{monthNames[monthID]}}</p><div ng-repeat="action in filterActionItemsByMonth(monthID)"><div class="textarea-box" ng-if="action.title!=\'\'"><textarea ng-model="action.title" type="text" class="monthly-cost outline-0 strategy-description" placeholder="Add ActionItem" style="width: 100%" ng-keyup="autoExpand($event)" required="" disabled=""></textarea></div></div></div></div></div></div></div><hr><div class="m-b-es-40"></div><slap-notifications notifications="notifications"></slap-notifications><div class="slap-work-box m-t-es-40 m-w-es-30" ng-init="showQuaterGoal=true"><slap-work-moment-icon visible="showQuaterGoal" type="\'work\'" title="\'Quateraly Goals\'"></slap-work-moment-icon><table class="table table-responsive sample-show-hide" id="quaterly-goal-table" ng-show="showQuaterGoal"><thead><tr><td>Revenue Stream</td><td>Q1 Units</td><td>Q2 Units</td><td>Q3 Units</td><td>Q4 Units</td><td>Yearly Total</td><td>Yearly Target</td></tr></thead><tbody><tr ng-repeat="revenue in revenues"><td>{{revenue.name}}</td><td ng-repeat="nthQut in [1,2,3,4]"><div class="input-box"><input ng-model="data[nthQut-1].units[revenue.name]" type="text" class="outline-0" ng-keydown="checkValidity(data[nthQut-1].units[revenue.name], $event)" ng-class="{\'active\': revenue.name}" required=""></div></td><td>{{+data[0].units[revenue.name] + +data[1].units[revenue.name] + +data[2].units[revenue.name] + +data[3].units[revenue.name]}}</td><td>{{revenue.unit}}</td></tr></tbody></table></div></div></div></div></div><slap-footer send="sendData" "="" forward="forward"></slap-footer>');
$templateCache.put('pages/actionPlan/rate-connecting-strategies/rate-connecting-strategies.html','<div class="slap-page rate-connect-strategy" scroll-top=""><div class="panel panel-default"><div class="panel-body"><button-switch visible="showVideoBlock"></button-switch><video-block visible="showVideoBlock"></video-block></div></div><div class="panel panel-default"><div class="panel-body static-text-panel"><button-switch visible="showStaticTextBlock"></button-switch><slap-static-text visible="showStaticTextBlock"></slap-static-text></div></div><slap-notifications notifications="notifications"></slap-notifications><div class="panel panel-default"><div class="panel-body slap-work-panel"><div class="row"><div class="col-md-12"><button-switch visible="showFormBlock"></button-switch><p class="logo panel-title">SLAP<span class="aqua-green">work</span></p></div></div><div class="row sample-show-hide" ng-hide="showFormBlock"><div class="col-xs-12 padding-l-r-30 margin-b-24"><p class="heading2">Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nam eu pharetra elit, a dapibus ex. In venenatis tempor odio, non ultrices lectus</p></div><div class="col-xs-12" id="strategy-container"><svg ng-if="!showResponsiveView"><line ng-attr-x1="{{center.x}}" ng-attr-y1="{{center.y}}" ng-attr-x2="{{pos.x}}" ng-attr-y2="{{pos.y}}" ng-repeat="pos in positions" style="stroke:#50cfe3;stroke-width:2" ng-if="data[$index].rating != 0"></line></svg><div id="empty-client" ng-if="!showResponsiveView"><img src="/images/empty-avatar.png"><p>What is the best connecting strategy to your ideal client?</p></div><div ng-if="!showResponsiveView"><div class="strategy-box" ng-repeat="strategy in data"><img src="/images/carr.png"><div class="overlap"></div><div class="content"><i class="fa fa-play-circle-o" aria-hidden="true" ng-click="openVideoBox(strategy)"></i><br><span class="title" ng-click="openVideoBox(strategy)">{{strategy.name}}</span><br><span class="desc">How Relevant?</span><slap-rating rate="strategy.rating"></slap-rating></div></div></div><div ng-if="showResponsiveView" class="row"><div class="strategy-box resp-strategy-box col-xs-6" ng-repeat="strategy in data"><img src="/images/carr.png"><div class="overlap"></div><div class="content"><i class="fa fa-play-circle-o" aria-hidden="true" ng-click="openVideoBox(strategy)"></i><br><span class="title" ng-click="openVideoBox(strategy)">{{strategy.name}}</span><br><span class="desc">How Relevant?</span><slap-rating rate="strategy.rating"></slap-rating></div></div></div></div></div></div></div></div><slap-footer send="sendData" "="" forward="forward"></slap-footer>');
$templateCache.put('pages/actionPlan/second-expert-review/second-expert-review.html','<div class="step3-summary slap-page" scroll-top=""><div class="panel panel-default"><div class="panel-body content-box slap-work-panel"><button-switch visible="showContent"></button-switch><p class="logo panel-title">SLAP<span class="aqua-green">summary</span></p><div class="col-xs-12 col-lg-12 sample-show-hide" ng-hide="showContent"><div class="row summary-step"><div class="line-to"></div><div class="col-xs-12 col-xs-12 m-b-sm-50"><div class="grey-circle-box"><div class="grey-circle">1</div></div><p style="min-height: 122px;"><span class="aqua-green">{{data.businessName}}</span> does <span class="aqua-green">{{data.second}}</span> for <span class="aqua-green">{{data.fourth}}</span> on a <span class="aqua-green">{{fifth[+data.fifth]}}</span> scale because <span class="aqua-green">I will grow my business this year I will be able to {{data.privilegeInfo.result}}</span> and I am committed to <span class="aqua-green">{{privilegesData.second[+data.privilegeInfo.text]}} {{data.privilegeInfo.additionalText}}</span>.</p></div></div><div class="row summary-step"><div class="line-to"></div><div class="col-xs-12 m-b-sm-50"><div class="grey-circle-box"><div class="grey-circle">2</div></div><p style="min-height: 122px;">My Ideal Client is a <span class="aqua-green">{{age[+client.age]}}</span> years old <span class="aqua-green">{{gender[+client.gender]}}</span>, <span class="aqua-green">{{maritalStatus[+client.maritalStatus]}}</span>, father of <span class="aqua-green">{{kids[+client.kids]}}</span>, work as an <span class="aqua-green">{{employment[+client.employment]}}</span>, lives in <span class="aqua-green">{{location[+client.location]}}</span>, generally on transit by <span class="aqua-green">{{transit[+client.transit]}}</span>, likes to <span class="aqua-green">{{hobbies[client.hobbies]}}</span> and read <span class="aqua-green">{{reads[client.reads]}}</span>.</p></div></div><div class="row summary-step"><div class="line-to"></div><div class="col-md-12 margin-b-50 padding-l-100 padding-r-30"><div class="grey-circle-box"><div class="grey-circle">3</div></div><p>By <span class="aqua-green">{{months[+slapStartDate.month]}} 31, {{slapStartDate.year}}</span>, I will sell</p><ul class="revenue-summary row"><li class="col-xs-4 col-sm-3 col-md-2" ng-repeat="revenue in model.revenues"><p><span class="aqua-green">{{revenue.unit}} Units</span> of <span class="aqua-green">{{revenue.name}}</span> for avg. price <span class="aqua-green">${{revenue.sellingPrice}}</span>.</p></li></ul><p>To generate a total of <span class="aqua-green">${{totalTarget | number:2}}</span> revenue and <span class="aqua-green">${{profit | number:2}}</span> profit this SLAPyear!</p></div></div><div class="row summary4 summary-step"><div class="col-md-12 margin-b-50 padding-l-100 padding-r-30"><div class="grey-circle-box"><div class="grey-circle">4</div></div><p class="m-l-es-70">In order to do this, I will take action and find new leads by:</p><div class="row p-w-xs-70"><div class="col-md-4"><div class="quater-box row show-border-bottom"><div class="col-xs-4 quater-letter">Q1<p>{{monthsShort[QMonths[0][0]]}}-{{monthsShort[QMonths[0][2]]}}</p></div><div class="col-xs-8"><p style="font-size: 14px;">Using <span class="text-aqua">{{getStrategyName(quaters[0].strategy.id)}}</span> to connect with my ideal client.</p></div></div><div class="quater-box row"><div class="col-xs-4 quater-letter">Q2<p>{{monthsShort[QMonths[1][0]]}}-{{monthsShort[QMonths[1][2]]}}</p></div><div class="col-xs-8"><p style="font-size: 14px;">Using <span class="text-aqua">{{getStrategyName(quaters[1].strategy.id)}}</span> to connect with my ideal client.</p></div></div><div class="quater-box row"></div></div><div class="col-md-4 empty-avatar-div visible-md visible-lg text-center"><a><img src="/images/empty-avatar.png" class="img img-circle"></a></div><div class="col-md-4"><div class="quater-box row show-border-bottom"><div class="col-xs-4 quater-letter">Q3<p>{{monthsShort[QMonths[2][0]]}}-{{monthsShort[QMonths[2][2]]}}</p></div><div class="col-xs-8"><p style="font-size: 14px;">Using <span class="text-aqua">{{getStrategyName(quaters[2].strategy.id)}}</span> to connect with my ideal client.</p></div></div><div class="quater-box row"><div class="col-xs-4 quater-letter">Q4<p>{{monthsShort[QMonths[3][0]]}}-{{monthsShort[QMonths[3][2]]}}</p></div><div class="col-xs-8"><p style="font-size: 14px;">Using <span class="text-aqua">{{getStrategyName(quaters[3].strategy.id)}}</span> to connect with my ideal client.</p></div></div></div></div><div class="clearfix"></div><div ng-init="showSummary4Detail = false" style="position: relative"><hr><button class="btn btn-custom" ng-click="showSummary4Detail = !showSummary4Detail">{{showSummary4Detail ? \'Close\' : \'Show\'}} Detailed View</button></div><div class="sample-show-hide p-w-xs-70" ng-show="showSummary4Detail"><div ng-repeat="QID in [0, 1, 2, 3]" class="m-b-es-20"><p style="font-size: 1.3em">Q{{QID+1}} - {{getStrategyName(quaters[QID].strategy.id)}}</p><p style="word-wrap: break-word">{{quaters[QID].strategy.description}}</p></div></div></div></div></div></div></div></div><slap-footer send="sendData" "="" forward="forward"></slap-footer>');
$templateCache.put('pages/actionPlan/step4-summary/step4-summary.html','<div class="step3-summary slap-page" scroll-top=""><div class="panel panel-default"><div class="panel-body content-box slap-work-panel"><button-switch visible="showContent"></button-switch><p class="logo panel-title">SLAP<span class="aqua-green">summary</span></p><div class="col-xs-12 col-lg-12 sample-show-hide" ng-hide="showContent"><div class="row summary-step"><div class="line-to"></div><div class="col-xs-12 col-xs-12 m-b-sm-50"><div class="grey-circle-box"><div class="grey-circle">1</div></div><p style="min-height: 122px;"><span class="aqua-green">{{data.businessName}}</span> does <span class="aqua-green">{{data.second}}</span> for <span class="aqua-green">{{data.fourth}}</span> on a <span class="aqua-green">{{fifth[+data.fifth]}}</span> scale because <span class="aqua-green">I will grow my business this year I will be able to {{data.privilegeInfo.result}}</span> and I am committed to <span class="aqua-green">{{privilegesData.second[+data.privilegeInfo.text]}} {{data.privilegeInfo.additionalText}}</span>.</p></div></div><div class="row summary-step"><div class="line-to"></div><div class="col-xs-12 m-b-sm-50"><div class="grey-circle-box"><div class="grey-circle">2</div></div><p style="min-height: 122px;">My Ideal Client is a <span class="aqua-green">{{age[+client.age]}}</span> years old <span class="aqua-green">{{gender[+client.gender]}}</span>, <span class="aqua-green">{{maritalStatus[+client.maritalStatus]}}</span>, father of <span class="aqua-green">{{kids[+client.kids]}}</span>, work as an <span class="aqua-green">{{employment[+client.employment]}}</span>, lives in <span class="aqua-green">{{location[+client.location]}}</span>, generally on transit by <span class="aqua-green">{{transit[+client.transit]}}</span>, likes to <span class="aqua-green">{{hobbies[client.hobbies]}}</span> and read <span class="aqua-green">{{reads[client.reads]}}</span>.</p></div></div><div class="row summary-step"><div class="line-to"></div><div class="col-md-12 margin-b-50 padding-l-100 padding-r-30"><div class="grey-circle-box"><div class="grey-circle">3</div></div><p>By <span class="aqua-green">{{months[+slapStartDate.month]}} 31, {{slapStartDate.year}}</span>, I will sell</p><ul class="revenue-summary row"><li class="col-xs-4 col-sm-3 col-md-2" ng-repeat="revenue in model.revenues | filter: {deleted: false}"><p><span class="aqua-green">{{revenue.unit}} Units</span> of <span class="aqua-green">{{revenue.name}}</span> for avg. price <span class="aqua-green">${{revenue.sellingPrice}}</span>.</p></li></ul><p>To generate a total of <span class="aqua-green">${{totalTarget | number:2}}</span> revenue and <span class="aqua-green">${{profit | number:2}}</span> profit this SLAPyear!</p></div></div><div class="row summary4 summary-step"><div class="col-md-12 margin-b-50 padding-l-100 padding-r-30"><div class="grey-circle-box"><div class="grey-circle">4</div></div><p class="m-l-es-70">In order to do this, I will take action and find new leads by:</p><div class="row p-w-xs-70"><div class="col-md-4"><div class="quater-box row show-border-bottom"><div class="col-xs-4 quater-letter">Q1<p>{{monthsShort[QMonths[0][0]]}}-{{monthsShort[QMonths[0][2]]}}</p></div><div class="col-xs-8"><p style="font-size: 14px;">Using <span class="text-aqua">{{getStrategyName(quaters[0].strategy.id)}}</span> to connect with my ideal client.</p></div></div><div class="quater-box row"><div class="col-xs-4 quater-letter">Q2<p>{{monthsShort[QMonths[1][0]]}}-{{monthsShort[QMonths[1][2]]}}</p></div><div class="col-xs-8"><p style="font-size: 14px;">Using <span class="text-aqua">{{getStrategyName(quaters[1].strategy.id)}}</span> to connect with my ideal client.</p></div></div><div class="quater-box row"></div></div><div class="col-md-4 empty-avatar-div visible-md visible-lg text-center"><a><img src="/images/empty-avatar.png" class="img img-circle"></a></div><div class="col-md-4"><div class="quater-box row show-border-bottom"><div class="col-xs-4 quater-letter">Q3<p>{{monthsShort[QMonths[2][0]]}}-{{monthsShort[QMonths[2][2]]}}</p></div><div class="col-xs-8"><p style="font-size: 14px;">Using <span class="text-aqua">{{getStrategyName(quaters[2].strategy.id)}}</span> to connect with my ideal client.</p></div></div><div class="quater-box row"><div class="col-xs-4 quater-letter">Q4<p>{{monthsShort[QMonths[3][0]]}}-{{monthsShort[QMonths[3][2]]}}</p></div><div class="col-xs-8"><p style="font-size: 14px;">Using <span class="text-aqua">{{getStrategyName(quaters[3].strategy.id)}}</span> to connect with my ideal client.</p></div></div></div></div><div class="clearfix"></div><div ng-init="showSummary4Detail = false" style="position: relative"><hr><button class="btn btn-custom" ng-click="showSummary4Detail = !showSummary4Detail">{{showSummary4Detail ? \'Close\' : \'Show\'}} Detailed View</button></div><div class="sample-show-hide p-w-xs-70" ng-show="showSummary4Detail"><div ng-repeat="QID in [0, 1, 2, 3]" class="m-b-es-20"><p style="font-size: 1.3em">Q{{QID+1}} - {{getStrategyName(quaters[QID].strategy.id)}}</p><p style="word-wrap: break-word">{{quaters[QID].strategy.description}}</p></div></div></div></div></div></div></div></div><slap-footer send="sendData" "="" forward="forward"></slap-footer>');
$templateCache.put('pages/actionPlan/whats-happening/whats-happening.html','<div class="slap-page world-around-you" scroll-top=""><div class="panel panel-default"><div class="panel-body"><button-switch visible="showVideoBlock"></button-switch><video-block visible="showVideoBlock"></video-block></div></div><div class="panel panel-default"><div class="panel-body static-text-panel"><button-switch visible="showStaticTextBlock"></button-switch><slap-static-text visible="showStaticTextBlock"></slap-static-text></div></div><div class="panel panel-default"><div class="panel-body slap-work-panel"><div class="row"><div class="col-md-12"><button-switch visible="showFormBlock"></button-switch><p class="logo panel-title">SLAP<span class="aqua-green">work</span></p></div></div><div class="row sample-show-hide" ng-hide="showFormBlock"><div class="col-xs-12 padding-l-r-30 margin-b-24"><p class="heading2">Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nam eu pharetra elit, a dapibus ex. In venenatis tempor odio, non ultrices lectus</p></div><ul class="nav nav-tabs quater-letter-container p-w-es-10 m-w-es-20"><li class="active quater-letter"><a data-toggle="tab" data-target="#quater1">Q1</a></li><li class="quater-letter"><a data-toggle="tab" data-target="#quater2">Q2</a></li><li class="quater-letter"><a data-toggle="tab" data-target="#quater3">Q3</a></li><li class="quater-letter"><a data-toggle="tab" data-target="#quater4">Q4</a></li></ul><div class="tab-content quater-tab-container"><div ng-repeat="nthQut in [1, 2, 3, 4]" id="{{\'quater\'+nthQut}}" class="tab-pane fade in quater-container row" ng-class="currentQut == nthQut ? \'active\' : \'\'"><div class="slap-work-box col-md-12 m-t-es-40"><slap-work-moment-icon visible="showEventsBox" type="\'work\'" title="\'Events\'"></slap-work-moment-icon><div ng-show="showEventsBox" class="sample-show-hide"><div ng-repeat="monthID in QMonths[nthQut - 1]" class="col-xs-12 col-sm-4 text-center"><p>{{monthNames[monthID]}}</p><div ng-repeat="event in eventsByMonth[monthID].events">{{event.name}}</div></div></div></div><div class="slap-work-box col-md-12 m-t-es-40" ng-init="showImpactClient=true"><slap-work-moment-icon visible="showImpactClient" type="\'work\'" title="\'How do Impact Client?\'"></slap-work-moment-icon><div class="textarea-box" ng-show="showImpactClient"><textarea ng-model="data[nthQut-1].impactClient" type="text" class="monthly-cost outline-0" ng-blur="checkEventCompleted(event, data.eventsByMonth[monthID], $event)" ng-class="{\'active\': data[nthQut-1].impactClient}" placeholder="How do these world events in this quarter impact our Client?" style="width: 100%" rows="5" required=""></textarea></div></div><div class="slap-work-box col-xs-12 m-t-es-40" ng-init="showImpactBusiness=true"><slap-work-moment-icon visible="showImpactBusiness" type="\'work\'" title="\'How do Impact Business?\'"></slap-work-moment-icon><div class="textarea-box" ng-show="showImpactBusiness"><textarea ng-model="data[nthQut-1].impactBusiness" type="text" class="monthly-cost outline-0" ng-blur="checkEventCompleted(event, data.eventsByMonth[monthID], $event)" ng-class="{\'active\': data[nthQut-1].impactClient}" placeholder="How do these world events in this quarter impact our Business?" style="width: 100%" rows="5" required=""></textarea></div></div></div></div></div></div></div></div><slap-footer send="sendData" "="" forward="forward"></slap-footer>');
$templateCache.put('pages/actionPlan/world-around-your/world-around-your.html','<div class="slap-page world-around-you" scroll-top=""><div class="panel panel-default"><div class="panel-body"><button-switch visible="showVideoBlock"></button-switch><video-block visible="showVideoBlock"></video-block></div></div><div class="panel panel-default"><div class="panel-body static-text-panel"><button-switch visible="showStaticTextBlock"></button-switch><slap-static-text visible="showStaticTextBlock"></slap-static-text></div></div><div class="panel panel-default"><div class="panel-body slap-work-panel"><div class="row"><div class="col-md-12"><button-switch visible="showFormBlock"></button-switch><p class="logo panel-title">SLAP<span class="aqua-green">work</span></p></div></div><div class="row sample-show-hide" ng-hide="showFormBlock"><div class="col-xs-12 padding-l-r-30 margin-b-24"><p class="heading2">Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nam eu pharetra elit, a dapibus ex. In venenatis tempor odio, non ultrices lectus</p></div><ul class="nav nav-tabs quater-letter-container p-w-es-10 m-w-es-20"><li class="active quater-letter"><a data-toggle="tab" data-target="#quater1">Q1</a></li><li class="quater-letter"><a data-toggle="tab" data-target="#quater2">Q2</a></li><li class="quater-letter"><a data-toggle="tab" data-target="#quater3">Q3</a></li><li class="quater-letter"><a data-toggle="tab" data-target="#quater4">Q4</a></li></ul><div class="tab-content quater-tab-container">What is going on in the world around your business?<div ng-repeat="nthQut in [1, 2, 3, 4]" id="{{\'quater\'+nthQut}}" class="tab-pane fade in quater-container row" ng-class="currentQut == nthQut ? \'active\' : \'\'"><div ng-repeat="monthID in QMonths[nthQut - 1]" class="col-xs-12 col-sm-4"><p>{{monthNames[monthID]}}</p><div ng-repeat="event in data.eventsByMonth[monthID].events"><div class="input-box" style="width: calc(100% - 20px); display: inline-block"><input ng-model="event.name" type="text" class="monthly-cost outline-0" ng-blur="checkEventCompleted(event, data.eventsByMonth[monthID], $event)" ng-class="{\'active\': event.name != \'\'}" placeholder="Add Event" style="width: 100%" required=""></div><span class="delete-btn outline-0 pull-right" ng-click="deleteEvent(event, data.eventsByMonth[monthID])" style="padding-top: 10px"><i class="fa fa-trash" aria-hidden="true"></i></span></div></div></div></div></div></div></div></div><slap-footer send="sendData" "="" forward="forward"></slap-footer>');
$templateCache.put('pages/execute/commit-yourself/commit-yourself.html','<div class="slap-page" scroll-top=""><div class="panel panel-default"><div class="panel-body"><button-switch visible="showVideoBlock"></button-switch><video-block class="video-block-600" visible="showVideoBlock"></video-block></div></div></div><slap-footer send="sendData" "="" forward="forward"></slap-footer>');
$templateCache.put('pages/execute/living-day-toDay/living-day-toDay.html','<div class="slap-page" scroll-top=""><div class="panel panel-default"><div class="panel-body"><button-switch visible="showVideoBlock"></button-switch><video-block class="video-block-600" visible="showVideoBlock"></video-block></div></div></div><slap-footer send="sendData" "="" forward="forward"></slap-footer>');
$templateCache.put('pages/execute/set-yourself-up-for-success/set-yourself-up-for-success.html','<div class="slap-page" scroll-top=""><div class="panel panel-default"><div class="panel-body"><button-switch visible="showVideoBlock"></button-switch><video-block class="video-block-600" visible="showVideoBlock"></video-block></div></div></div><slap-footer send="sendData" "="" forward="forward"></slap-footer>');
$templateCache.put('pages/execute/tour-execute/tour-execute.html','<div class="slap-page" scroll-top=""><div class="panel panel-default"><div class="panel-body"><button-switch visible="showVideoBlock"></button-switch><video-block class="video-block-600" visible="showVideoBlock"></video-block><br><a class="btn btn-primary pull-right btn-custom go-excute-btn" ui-sref="slapExcute.main">I Am Ready! Let\u2019s bring this Plan into ACTION!</a></div></div></div><slap-footer send="sendData" "="" forward="forward"></slap-footer>');
$templateCache.put('pages/idealClient/commit-your-ideal-client/commit-your-ideal-client.html','<div class="slap-page" scroll-top=""><div class="panel panel-default"><div class="panel-body"><button-switch visible="showVideoBlock"></button-switch><video-block visible="showVideoBlock"></video-block></div></div><div class="panel panel-default"><div class="panel-body static-text-panel"><button-switch visible="showStaticTextBlock"></button-switch><slap-static-text visible="showStaticTextBlock"></slap-static-text></div></div><div class="panel panel-default"><div class="panel-body slap-work-panel"><button-switch visible="showContent"></button-switch><p class="logo panel-title">SLAP<span class="aqua-green">moment</span></p><div class="col-xs-12 sample-show-hide" ng-hide="showContent"><p class="line-text"><span class="aqua-green">{{businessName}}</span> <span editable-select="" model-value="data.first" values-list="first"></span> <span editable-text="" model-value="data.second"></span> <span editable-select="" model-value="data.third" values-list="third"></span> <span editable-text="" model-value="data.fourth"></span> on a <span class="aqua-green" editable-select="" model-value="data.fifth" values-list="fifth"></span> scale because I will grow my business this year I will be able to <span class="aqua-green" editable-select="" model-value="privilegeInfo.resultId" values-list="privilegesData.resultList"></span> and I am committed to <span class="aqua-green" editable-select="" model-value="privilegeInfo.text" values-list="privilegesData.second"></span> <span class="aqua-green" editable-text="" model-value="privilegeInfo.additionalText"></span>.</p></div></div></div></div><slap-footer send="sendData" "="" forward="forward"></slap-footer>');
$templateCache.put('pages/idealClient/define-your-ideal-client/define-your-ideal-client.html','<div class="define-client slap-page"><div class="panel panel-default"><div class="panel-body"><button-switch visible="showVideoBlock"></button-switch><video-block visible="showVideoBlock"></video-block></div></div><div class="panel panel-default"><div class="panel-body static-text-panel"><button-switch visible="showStaticTextBlock"></button-switch><slap-static-text visible="showStaticTextBlock"></slap-static-text></div></div><div class="panel panel-default"><div class="panel-body slap-work-panel"><button-switch visible="showContent"></button-switch><p class="logo panel-title">SLAP<span class="aqua-green">moment</span></p><div class="col-md-12"><div class="row sample-show-hide" ng-hide="showIdealClientTextBlock"><div class="row"><div class="col-xs-12"><p class="description">Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nam eu pharetra elit, a dapibus ex. In venenatis tempor odio, non ultrices lectus</p></div></div></div></div><div class="col-md-12 row-flex sample-show-hide padding-t-45" ng-hide="showContent"><div class="col-xs-12 col-lg-8 col-lg-offset-2"><div class="row m-t-es-15 m-b-es-50"><div class="ideal-clients-list col-md-12"><div class="blue-circle"><span>!</span></div><p><span>My Ideal Client is</span> is a <span>{{idealClientSelects.age[+model.idealClient.age]}}</span> years old <span>{{idealClientSelects.gender[+model.idealClient.gender]}}</span>, <span>{{idealClientSelects.maritalStatus[+model.idealClient.maritalStatus]}}</span>, father of <span>{{idealClientSelects.kids[+model.idealClient.kids]}}</span>, work as an <span>{{idealClientSelects.employment[+model.idealClient.employment]}}</span>, lives in <span>{{idealClientSelects.location[+model.idealClient.location]}}</span>, generally on transit by <span>{{idealClientSelects.transit[+model.idealClient.transit]}}</span>, likes to <span>{{idealClientSelects.hobbies[+model.idealClient.hobbies]}}</span> and read <span>{{idealClientSelects.reads[+model.idealClient.reads]}}</span>.</p></div></div></div></div></div></div></div><slap-footer send="sendData" "="" forward="forward"></slap-footer>');
$templateCache.put('pages/idealClient/ideal-client-overview/ideal-client-overview.html','<div class="slap-page" scroll-top=""><div class="panel panel-default"><div class="panel-body"><button-switch visible="showVideoBlock"></button-switch><video-block class="video-block-600" visible="showVideoBlock"></video-block></div></div></div><slap-footer send="sendData" "="" forward="forward"></slap-footer>');
$templateCache.put('pages/idealClient/ideal-client-qa/ideal-client-qa.html','<div class="slap-page" scroll-top=""><div class="panel panel-default"><div class="panel-body"><button-switch visible="showVideoBlock"></button-switch><video-block class="video-block-600" visible="showVideoBlock"></video-block></div></div></div><slap-footer send="sendData" "="" forward="forward"></slap-footer>');
$templateCache.put('pages/idealClient/name-your-ideal-client/name-your-ideal-client.html','<div class="slap-page" scroll-top=""><div class="panel panel-default"><div class="panel-body"><button-switch visible="showVideoBlock"></button-switch><video-block visible="showVideoBlock"></video-block></div></div><div class="panel panel-default"><div class="panel-body static-text-panel"><button-switch visible="showStaticTextBlock"></button-switch><slap-static-text visible="showStaticTextBlock"></slap-static-text></div></div><div class="panel panel-default"><div class="panel-body slap-work-panel"><div class="row"><div class="col-md-12"><button-switch visible="showIdealClientNameBlock"></button-switch><p class="logo panel-title">SLAP<span class="aqua-green">work</span></p></div></div><div class="row sample-show-hide" ng-hide="showIdealClientNameBlock"><div class="col-md-11 padding-l-r-30"><p class="description">Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nam eu pharetra elit, a dapibus ex. In venenatis tempor odio, non ultrices lectus</p></div></div><div class="row sample-show-hide" ng-hide="showIdealClientNameBlock"><div class="col-md-12 padding-l-r-30 margin-b-24"><h4>Naming your Ideal Client</h4></div><div class="col-md-12 row-flex padding-l-r-30 margin-b-38"><div class="input-box"><input type="text" id="fourth" class="outline-0" ng-class="{\'active\': model.fourth}" ng-model="model.fourth" required=""> <label class="label" for="fourth">First Name</label></div></div></div></div></div></div><slap-footer send="sendData" "="" forward="forward"></slap-footer>');
$templateCache.put('pages/idealClient/slap-statement/slap-statement.html','<div class="slap-page container"><div class="panel panel-default margin-t-40 margin-b-140"><div class="panel-body"><button-switch visible="showVideoBlock"></button-switch><video-block visible="showVideoBlock"></video-block></div></div><div class="panel panel-default margin-t-40"><div class="panel-body static-text-panel"><button-switch visible="showStaticTextBlock"></button-switch><slap-static-text visible="showStaticTextBlock"></slap-static-text></div></div><div class="panel panel-default margin-t-40 margin-b-140"><div class="panel-body"><button-switch visible="showContent"></button-switch><h3 class="logo padding-l-15">SLAP<span class="aqua-green">work</span></h3><div class="sample-show-hide" ng-hide="showContent"><div class="form-group"><div class="col-md-3"><label for="first" class="label-text control-label">Lorem ipsum dolor sit armet</label></div><div class="col-md-4"><select id="first" ng-model="model.first" class="dropdown-box outline-0"><option>Dropdown Label</option></select></div></div></div></div></div></div><slap-footer></slap-footer>');
$templateCache.put('pages/idealClient/step2-summary/step2-summary.html','<div class="step3-summary slap-page" scroll-top=""><div class="panel panel-default"><div class="panel-body content-box slap-work-panel"><button-switch visible="showContent"></button-switch><p class="logo panel-title">SLAP<span class="aqua-green">summary</span></p><div class="col-xs-12 col-lg-12 sample-show-hide" ng-hide="showContent"><div class="row summary-step"><div class="line-to"></div><div class="col-xs-12 col-xs-12 m-b-sm-50"><div class="grey-circle-box"><div class="grey-circle">1</div></div><p style="min-height: 122px;"><span class="aqua-green">{{data.businessName}}</span> does <span class="aqua-green">{{data.second}}</span> for <span class="aqua-green">{{data.fourth}}</span> on a <span class="aqua-green">{{fifth[+data.fifth]}}</span> scale because <span class="aqua-green">I will grow my business this year I will be able to {{data.privilegeInfo.result}}</span> and I am committed to <span class="aqua-green">{{privilegesData.second[+data.privilegeInfo.text]}} {{data.privilegeInfo.additionalText}}</span>.</p></div></div><div class="row summary-step"><div class="line-to"></div><div class="col-xs-12 m-b-sm-50"><div class="grey-circle-box"><div class="grey-circle">2</div></div><p>My Ideal Client is a <span class="aqua-green">{{age[+client.age]}}</span> years old <span class="aqua-green">{{gender[+client.gender]}}</span>, <span class="aqua-green">{{maritalStatus[+client.maritalStatus]}}</span>, father of <span class="aqua-green">{{kids[+client.kids]}}</span>, work as an <span class="aqua-green">{{employment[+client.employment]}}</span>, lives in <span class="aqua-green">{{location[+client.location]}}</span>, generally on transit by <span class="aqua-green">{{transit[+client.transit]}}</span>, likes to <span class="aqua-green">{{hobbies[client.hobbies]}}</span> and read <span class="aqua-green">{{reads[client.reads]}}</span>.</p></div></div></div></div></div></div><slap-footer send="sendData" "="" forward="forward"></slap-footer>');
$templateCache.put('pages/idealClient/who-are-you-ideal-client/who-are-you-ideal-client.html','<div class="who-ideal-client slap-page" scroll-top=""><div class="panel panel-default"><div class="panel-body"><button-switch visible="showVideoBlock"></button-switch><video-block visible="showVideoBlock"></video-block></div></div><div class="panel panel-default"><div class="panel-body static-text-panel"><button-switch visible="showStaticTextBlock"></button-switch><slap-static-text visible="showStaticTextBlock"></slap-static-text></div></div><div class="panel panel-default sample-show-hide"><div class="panel-body slap-work-panel"><div class="row"><div class="col-md-12"><button-switch visible="showIdealClientTextBlock"></button-switch><p class="logo panel-title">SLAP<span class="aqua-green">work</span></p></div></div><div class="row sample-show-hide" ng-hide="showIdealClientTextBlock"><div class="col-md-11 p-w-es-30"><p class="heading2">Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nam eu pharetra elit, a dapibus ex. In venenatis tempor odio, non ultrices lectus</p></div></div><div class="row sample-show-hide" ng-hide="showIdealClientTextBlock"><div class="col-md-12 p-w-es-30"><h4>Who Are Your Ideal Clients?</h4></div></div><div class="input-group-wrap sample-show-hide" ng-hide="showIdealClientTextBlock"><div class="input-group-item row m-w-es-10 m-w-md-30" ng-repeat="item in data.clients"><div class="col-md-12 row-flex p-b-es-10"><div class="input-box"><input type="text" id="name-{{$index}}" class="name outline-0" ng-class="{\'active\': item.name}" ng-change="checkFormElements(item)" ng-model="item.name" required=""> <label class="label name-label" for="name-{{$index}}">Name</label></div><select ng-model="item.gender" ng-change="checkFormElements(item)" ng-class="{\'active\': item.gender !== \'0\'}" class="gender dropdown-box outline-0"><option value="{{$index}}" ng-repeat="gender in idealClientSelects.gender">{{gender}}</option></select><select ng-model="item.age" ng-change="checkFormElements(item)" ng-class="{\'active\': item.age !== \'0\'}" class="age dropdown-box outline-0"><option value="{{$index}}" ng-repeat="age in idealClientSelects.age">{{age}}</option></select><select ng-model="item.maritalStatus" ng-change="checkFormElements(item)" ng-class="{\'active\': item.maritalStatus !== \'0\'}" class="marital-status dropdown-box outline-0"><option value="{{$index}}" ng-repeat="maritalStatus in idealClientSelects.maritalStatus">{{maritalStatus}}</option></select><select ng-model="item.kids" ng-change="checkFormElements(item)" ng-class="{\'active\': item.kids !== \'0\'}" class="kids dropdown-box outline-0"><option value="{{$index}}" ng-repeat="kids in idealClientSelects.kids">{{kids}}</option></select></div><div class="col-md-12 row-flex m-b-es-50"><select ng-model="item.employment" ng-change="checkFormElements(item)" ng-class="{\'active\': item.employment !== \'0\'}" class="employment dropdown-box outline-0"><option value="{{$index}}" ng-repeat="employment in idealClientSelects.employment">{{employment}}</option></select><select ng-model="item.location" ng-change="checkFormElements(item)" ng-class="{\'active\': item.location !== \'0\'}" class="location dropdown-box outline-0"><option value="{{$index}}" ng-repeat="location in idealClientSelects.location">{{location}}</option></select><select ng-model="item.home" ng-change="checkFormElements(item)" ng-class="{\'active\': item.home !== \'0\'}" class="home dropdown-box outline-0"><option value="{{$index}}" ng-repeat="home in idealClientSelects.home">{{home}}</option></select><select ng-model="item.transit" ng-change="checkFormElements(item)" ng-class="{\'active\': item.transit !== \'0\'}" class="transit dropdown-box outline-0"><option value="{{$index}}" ng-repeat="transit in idealClientSelects.transit">{{transit}}</option></select><select ng-model="item.hobbies" ng-change="checkFormElements(item)" ng-class="{\'active\': item.transit !== \'0\'}" class="hobbies dropdown-box outline-0"><option value="{{$index}}" ng-repeat="hobbies in idealClientSelects.hobbies">{{hobbies}}</option></select><select ng-model="item.reads" ng-change="checkFormElements(item)" ng-class="{\'active\': item.transit !== \'0\'}" class="reads dropdown-box outline-0"><option value="{{$index}}" ng-repeat="reads in idealClientSelects.reads">{{reads}}</option></select></div></div><div class="input-group-item row m-w-es-10 m-w-md-30 sample-show-hide" ng-hide="showIdealClientTextBlock" id="idealclient-box" ng-if="shouldSelctIdeal"><span>My Ideal Client is</span> a <span><select ng-model="data.idealClient.age" ng-class="{\'active\': data.idealClient.age !== \'0\'}" class="age dropdown-box outline-0"><option value="{{age}}" ng-repeat="age in client.age">{{idealClientSelects.age[+age]}}</option></select></span> years old <span><select ng-model="data.idealClient.gender" ng-class="{\'active\': data.idealClient.gender !== \'0\'}" class="gender dropdown-box outline-0"><option value="{{gender}}" ng-repeat="gender in client.gender">{{idealClientSelects.gender[+gender]}}</option></select></span>, <span><select ng-model="data.idealClient.maritalStatus" ng-class="{\'active\': data.idealClient.maritalStatus !== \'0\'}" class="marital-status dropdown-box outline-0"><option value="{{maritalStatus}}" ng-repeat="maritalStatus in client.maritalStatus">{{idealClientSelects.maritalStatus[+maritalStatus]}}</option></select></span>, father of <span><select ng-model="data.idealClient.kids" ng-class="{\'active\': data.idealClient.kids !== \'0\'}" class="kids dropdown-box outline-0"><option value="{{kids}}" ng-repeat="kids in client.kids">{{idealClientSelects.kids[+kids]}}</option></select></span>, work as an <span><select ng-model="data.idealClient.employment" ng-class="{\'active\': data.idealClient.employment !== \'0\'}" class="employment dropdown-box outline-0"><option value="{{employment}}" ng-repeat="employment in client.employment">{{idealClientSelects.employment[+employment]}}</option></select></span>, lives in <span><select ng-model="data.idealClient.location" ng-class="{\'active\': item.location !== \'0\'}" class="location dropdown-box outline-0"><option value="{{location}}" ng-repeat="location in client.location">{{idealClientSelects.location[+location]}}</option></select></span>, generally on transit by <span><select ng-model="data.idealClient.transit" ng-class="{\'active\': data.idealClient.transit !== \'0\'}" class="transit dropdown-box outline-0"><option value="{{transit}}" ng-repeat="transit in client.transit">{{idealClientSelects.transit[+transit]}}</option></select></span>, likes to <span><select ng-model="data.idealClient.hobbies" ng-class="{\'active\': data.idealClient.hobbies !== \'0\'}" class="hobbies dropdown-box outline-0"><option value="{{hobbies}}" ng-repeat="hobbies in client.hobbies">{{idealClientSelects.hobbies[+hobbies]}}</option></select></span> and read <span><select ng-model="data.idealClient.reads" ng-class="{\'active\': data.idealClient.reads !== \'0\'}" class="reads dropdown-box outline-0"><option value="{{reads}}" ng-repeat="reads in client.reads">{{idealClientSelects.reads[+reads]}}</option></select></span>.</div></div></div></div></div><slap-footer send="sendData" "="" forward="forward"></slap-footer>');
$templateCache.put('pages/main/404/main-404.html','<div class="container m-t-xs-50"><div class="row"><div class="col-md-offset-3 col-md-6 text-center"><div class="panel panel-default"><div class="panel-body"><h1>Error 404</h1><p>Page not found</p><hr><a class="btn btn-default" ui-sref="home"><i class="fa fa-home"></i> Home</a></div></div></div></div></div>');
$templateCache.put('pages/main/500/main-500.html','<div class="container m-t-xs-50"><div class="row"><div class="col-md-offset-3 col-md-6 text-center"><div class="panel panel-default"><div class="panel-body"><h1>Error 500</h1><p>Server error</p><hr><a class="btn btn-default" ui-sref="home"><i class="fa fa-home"></i> Home</a></div></div></div></div></div>');
$templateCache.put('pages/main/confirm/main-confirm.html','<div class="container m-t-xs-50"><div class="row"><div class="col-xs-12 col-md-4 col-md-offset-4"><form><div class="panel panel-default animated fadeInDown"><div class="panel-body"><h3>Welcome</h3><hr><p>Your registration is complete!</p><hr><div class="text-center"><button type="submit" ng-click="stateGo()" class="btn btn-primary">Sign in</button></div></div></div></form></div></div></div>');
$templateCache.put('pages/main/index/main-index.html','<div><p>index</p></div>');
$templateCache.put('pages/main/login/main-login.html','<div class="container m-t-xs-50"><div class="row"><div class="col-xs-12 col-md-4 col-md-offset-4"><form ng-disabled="lock.state" id="login-form"><div class="panel panel-default animated fadeInDown"><div class="panel-body"><h3>Login</h3><hr><div class="form-group" ng-class="{\'has-error\':errors.email}"><input type="text" ng-model="login.email" class="form-control" name="email" placeholder="E-mail"><div class="help-block help-block-error" ng-show="errors.email" ng-bind-html="errors.email | joinBr"></div></div><div class="form-group" ng-class="{\'has-error\':errors.password}"><input type="password" ng-model="login.password" class="form-control" name="password" placeholder="Password"><div class="help-block help-block-error" ng-show="errors.password" ng-bind-html="errors.password | joinBr"></div></div><a ui-sref="reset">Forgot password?</a><hr><div class="text-center"><button ng-disabled="lock.state" type="submit" ng-click="submit()" class="btn btn-primary btn-fullwidth">Login</button></div></div></div></form><p class="text-center"><a ui-sref="step1" class="">Not registered yet? Sign up!</a></p></div></div></div>');
$templateCache.put('pages/main/registration/registration-step1.html','<div class="container signup"><div class="row"><header class="container signup"><div class="col-md-12 leave"><i class="fa fa-arrow-left" aria-hidden="true"></i> <a ui-sref="login">leave</a></div><div class="header-contents"><div class="col-md-3 header-logo"><a ui-sref="login"><img src="../images/logo.png" alt="logo"></a></div><div class="col-md-6 header-caption"><h1>choose your program</h1></div><div class="col-md-3 header-step"><div><span>Step</span><div class="oval oval-active"><span>1</span></div><div class="oval"><span>2</span></div><div class="oval"><span>3</span></div></div></div></div></header><article class="container signup plan"><div class="row"><div class="col-md-2 outline-0" ng-repeat="plan in vm.plans" ng-click="vm.choosePlan(plan,$event)"><div class="rectangle" ng-class="{\'rectangle-active\': plan._id == vm.plan._id}"><div class="rectangle-header"><h3>{{ plan.productName }}</h3></div><div class="rectangle-content"><div class="amount-plan"><span>{{ plan.costProduct }}</span></div><p class="text-center">per month</p><ul class="plan-list" ng-if="plan._id == vm.plans[0]._id"><li>SLAPcenter</li><li>SLAPassistant</li><li>SLAPschool</li><li>SLAPworld</li></ul><p class="plan-self text-center" ng-if="plan._id != vm.plans[0]._id">selfSLAP</p><div class="plan-group" ng-if="plan._id != vm.plans[0]._id"><p class="text-center">1 Group Call Per Month</p></div></div></div></div></div></article><div class="container signup next-bottom"><div class="col-md-12"><a ui-sref="step2" ng-click="vm.nextStep($event)">Next</a> <i class="fa fa-arrow-right" aria-hidden="true"></i></div></div></div></div>');
$templateCache.put('pages/main/registration/registration-step2.html','<div class="container-fluid"><div class="row"><header class="container signup"><div class="col-md-12 leave"><i class="fa fa-arrow-left" aria-hidden="true"></i> <a ui-sref="step1">leave</a></div><div class="header-contents"><div class="col-md-3 header-logo"><a ui-sref="login"><img src="../images/logo.png" alt="logo"></a></div><div class="col-md-6 header-caption"><h1>build with an expert</h1></div><div class="col-md-3 header-step"><div><span>Step</span><div class="oval"><span>1</span></div><div class="oval oval-active"><span>2</span></div><div class="oval"><span>3</span></div></div></div></div></header><article class="container signup"><div class="build-description col-md-8 col-md-offset-2"><p class="text-center">Want some help figuring out how exactly to grow your business?</p><p>We\u2019ve got you! You can work with one of our experienced and wise SLAPexperts to help you build the BEST plan. In about 30 days you will be focused, clear, challenged and supported - and armed with a rock solid plan to bring to life!</p></div><div class="col-md-6 col-md-offset-3"><div class="col-md-6 outline-0" ng-repeat="build in vm.builds" ng-click="vm.chooseBuild(build,$event)"><div class="rectangle build step2" ng-class="{\'rectangle-active\': build._id == vm.build._id}"><div class="rectangle-header"><h3 ng-show="build.buildType == 2">pay now</h3><h3 ng-hide="build.buildType == 2">payment plan</h3></div><div class="rectangle-content rectangle-content-flex step2" ng-show="build.buildType == 2"><div><div class="amount-plan"><span>{{ build.costProduct}}</span></div><p class="text-center">one time</p></div></div><div class="rectangle-content step2" ng-hide="build.buildType == 2"><div class="amount-plan"><span>{{ build.amountFirstPayment}}</span></div><p class="text-center">per today</p><div class="text-center plus"><i class="fa fa-plus fa-2x" aria-hidden="true"></i></div><div class="amount-plan"><span>{{ build.costProduct}}</span></div><p class="text-center">per month</p></div><div class="rectangle-footer"><div class="text-center"><p>SLAPbuild Total Cost</p><span>${{ build.buildType == 2 ? build.costProduct : vm.calculateFullCost(build)}}</span></div></div></div></div></div></article><div class="container signup next-bottom"><div class="col-md-12"><a ui-sref="step3" ng-show="!vm.active">No, thanks, next</a> <a ui-sref="step3" ng-hide="!vm.active">Next</a> <i class="fa fa-arrow-right" aria-hidden="true"></i></div></div></div></div>');
$templateCache.put('pages/main/registration/registration-step3.html','<div class="container signup"><div class="row"><header class="container signup"><div class="col-md-12 leave"><i class="fa fa-arrow-left" aria-hidden="true"></i> <a ui-sref="step2">leave</a></div><div class="header-contents"><div class="col-md-3 header-logo"><a href=""><img src="../images/logo.png" alt="logo"></a></div><div class="col-md-6 header-caption"><h1>{{vm.isRenew ? \'renew your account\' : \'set up your account\'}}</h1></div><div class="col-md-3 header-step"><div><span>Step</span><div class="oval"><span>1</span></div><div class="oval"><a ui-sref="step2"><span>2</span></a></div><div class="oval oval-active"><span>3</span></div></div></div></div></header><article class="container signup"><div class="registration" layout="row"><div class="registration-sidebar" flex="30"><div class="promo-sidebar"><div class="registration-sidebar-header"><h3 class="text-center">promo code</h3></div><div class="registration-sidebar-content"><div class="text-center"><input ng-model="vm.user.code" placeholder="Promo Code"><md-button md-no-ink="" class="md-primary" ng-click="vm.apply()" ng-disabled="!vm.user.code">apply</md-button></div></div></div><div class="payment-sidebar"><div class="registration-sidebar-header"><h3 class="text-center">payment summary</h3></div><div class="registration-sidebar-content"><div class="payment-content"><p>today\'s payment</p><hr><p class="leftstr">monthlySLAP</p><p class="rightstr">{{ vm.plan.costProduct }}</p><p class="leftstr">SLAPbuild</p><p class="rightstr" ng-show="vm.build">{{vm.build.buildType == 2 ? vm.build.costProduct : vm.build.amountFirstPayment }}</p><p class="rightstr" ng-hide="vm.build">-</p><div style="clear: left"></div><p class="text-center">today\'s total {{ vm.calculateTodayPayment }}</p></div><div class="payment-content"><p>monthly payment</p><hr><p class="leftstr">monthlySLAP</p><p class="rightstr">{{ vm.plan.costProduct }}</p><p class="leftstr">SLAPbuild</p><p class="rightstr">{{vm.build.buildType == 1 ? vm.build.costProduct : \'-\' }}</p><div style="clear: left"></div><p class="text-center">monthly total {{ vm.calculateMonthlyPayment }}</p></div></div></div></div><div class="registration-content" flex="70"><form name="registerForm"><div layout="row"><md-input-container class="md-block" flex="50"><label>Name</label> <input md-maxlength="30" required="" name="name" ng-model="vm.user.name" ng-disabled="vm.isRenew"></md-input-container><md-input-container class="md-block" flex="50"><label>Last Name</label> <input md-maxlength="30" required="" name="lastName" ng-model="vm.user.lastName" ng-disabled="vm.isRenew"></md-input-container></div><md-input-container class="md-block"><label for="businessName">Business Name</label> <input required="" name="businessName" ng-model="vm.user.businessName" id="businessName" ng-disabled="vm.isRenew"><div ng-messages="registerForm.businessName.$error" ng-hide="registerForm.businessName.$valid"><div ng-message-exp="[\'required\', \'maxlength\']"></div></div></md-input-container><div layout="row"><md-input-container class="md-block" flex="50"><label for="email">Email</label> <input name="email" ng-model="vm.user.email" id="email" required="" minlength="10" maxlength="100" ng-pattern="/^.+@.+\\..+$/" ng-disabled="vm.isRenew"><div ng-messages="registerForm.email.$error" ng-hide="registerForm.email.$valid"><div ng-message-exp="[\'required\', \'minlength\', \'maxlength\', \'pattern\']">Only letters and numbers are allowed (a-z,A-Z)</div></div></md-input-container><md-input-container class="md-block" flex="50"><label for="phone">Phone Number</label> <input name="phone" required="" ng-model="vm.user.phone" id="phone" ng-disabled="vm.isRenew"><div ng-messages="registerForm.phone.$error" ng-hide="registerForm.phone.$valid"><div ng-message-exp="[\'required\']">Your phone number</div></div></md-input-container></div><div layout="row" ng-if="!vm.isRenew"><md-input-container class="md-block" flex="50"><label for="password">Password</label> <input required="" type="password" name="password" ng-model="vm.user.password" minlength="6" md-maxlength="30" id="password"><div ng-messages="registerForm.password.$error" role="alert" ng-hide="registerForm.password.$valid"><div ng-message-exp="[\'required\', \'minlength\', \'maxlength\']">Password should be at least 6 until 30 characters</div></div></md-input-container><md-input-container class="md-block" flex="50"><label for="confirm">Confirm Password</label> <input required="" type="password" name="confirm" ng-model="vm.user.confirmPassword" minlength="6" md-maxlength="30" pass-compare="vm.user.password" id="confirm"><div ng-messages="registerForm.confirm.$error" role="alert" ng-hide="registerForm.confirm.$valid"><div ng-message-exp="[\'required\', \'minlength\', \'maxlength\']">Passwords are not the same</div></div></md-input-container></div><h3>payment info</h3><section ng-if="vm.isRenew">You will use same Payment information as previous account.</section><section ng-if="!vm.isRenew"><div layout="row"><md-input-container class="md-block" flex="50"><label for="creditCard">Credit Card Number</label> <input name="creditCard" required="" ng-model="vm.user.card.number" ui-mask="9999-9999-9999-9999" id="creditCard"><div ng-messages="registerForm.creditCard.$error" ng-hide="registerForm.creditCard.$valid"><div ng-message-exp="[\'required\', \'pattern\']">Enter a valid credit card number</div></div></md-input-container><md-input-container class="md-block" flex="50"><label for="exp_date">Expiration Date</label> <input name="expDate" required="" ng-model="vm.user.card.date" ui-mask="99/9999" id="exp_date"><div ng-messages="registerForm.expDate.$error" ng-hide="registerForm.expDate.$valid"><div ng-message-exp="[\'required\', \'pattern\']">Enter a valid expiration date</div></div></md-input-container></div><div layout="row"><md-input-container class="md-block" flex="50"><label for="code">Security Code</label> <input name="cvc" required="" ng-model="vm.user.card.cvc" type="password" ng-maxlength="4" ng-minlength="3" id="code"><div ng-messages="registerForm.cvc.$error" ng-hide="registerForm.cvc.$valid"><div ng-message-exp="[\'required\', \'pattern\']">Enter a valid security code (CVV)</div></div></md-input-container><md-input-container class="md-block" flex="50"><label for="billing">Billing Address</label> <input name="address" required="" ng-model="vm.user.billingAddress" id="billing"><div ng-messages="registerForm.address.$error" ng-hide="registerForm.address.$valid"><div ng-message-exp="[\'required\', \'pattern\']">Enter a valid billing address (ZIP code)</div></div></md-input-container></div></section><md-input-container class="md-block"><md-checkbox name="tos" ng-model="vm.user.check" required="">I agree with <span class="text-main-color">Terms and Conditions</span></md-checkbox><div ng-messages="registerForm.tos.$error" ng-hide="registerForm.tos.$modelValue"><div ng-message="required">You must accept the terms of service before you can proceed.</div></div></md-input-container></form></div></div></article><div class="row"><div class="next-bottom"><div class="col-md-12 finish"><a href="#" ng-click="vm.signup($event, registerForm)">Finish</a> <i class="fa fa-arrow-right" aria-hidden="true"></i></div></div></div></div></div>');
$templateCache.put('pages/main/reset/main-reset.html','<div class="container m-t-xs-50"><div class="row"><div class="col-xs-12 col-md-4 col-md-offset-4"><form ng-disabled="lock.state"><div class="panel panel-default animated fadeInDown"><div class="panel-body"><h3><i class="fa fa-key"></i> Reset Password</h3><hr><div class="form-group" ng-class="{\'has-error\':errors.email}"><input type="text" ng-model="email" class="form-control" name="email" placeholder="Email"><div class="help-block help-block-error" ng-show="errors.email" ng-bind-html="errors.email | joinBr"></div></div><hr><div class="text-center"><button ng-click="back()" class="btn btn-danger">Back</button> <button ng-disabled="lock.state" type="submit" ng-click="submit()" class="btn btn-primary">Send</button></div></div></div></form></div></div></div>');
$templateCache.put('pages/main/reset_password/main-reset-password.html','<div class="container m-t-xs-50"><div class="row"><div class="col-xs-12 col-md-4 col-md-offset-4"><form ng-disabled="lock.state"><div class="panel panel-default animated fadeInDown"><div class="panel-body"><h3><i class="fa fa-key"></i> Reset Password</h3><hr><div class="form-group" ng-class="{\'has-error\':errors.new_password}"><input type="password" ng-model="reset.new_password" class="form-control" name="new_password" placeholder="New Password"><div class="help-block help-block-error" ng-show="errors.new_password" ng-bind-html="errors.new_password | joinBr"></div></div><hr><div class="text-center"><button ng-disabled="lock.state" type="submit" ng-click="submit()" class="btn btn-primary">Reset</button></div></div></div></form></div></div></div>');
$templateCache.put('pages/main/unauthorized/main-unauthorized.html','<div class="container m-t-xs-50"><div class="row"><div class="col-md-offset-3 col-md-6 text-center"><div class="panel panel-default"><div class="panel-body"><h1>Permission Error</h1><p>You are not allowed to visit this page.</p><hr><a class="btn btn-default" ui-sref="home"><i class="fa fa-home"></i> Home</a></div></div></div></div></div>');
$templateCache.put('pages/main/welcome/welcome-index.html','<div class="container-fluid welcome-container"><div class="row row-flex"><div class="col-md-5 sidebar-welcome"><div class="sidebar-welcome-logo"><a ui-sref="mindset.ourCommitment"><img src="../images/logo.png" alt=""></a></div><div class="welcome"><h2>Welcome to<br>the SLAPworld</h2><p>You have more than you think.<br>Let\u2019s find it.</p></div></div><div class="col-md-7"><div class="content-welcome"><h2>YES! Time to start SLAPn!</h2><hr><p>Your payment details are in your email!</p><hr><p class="choose-time">Choose a time to meet your SLAPassistant,<br>then start exploring SLAPcenter!</p><div class="welcome-block"><div class="caption"><div class="oval oval-active"><span>1</span></div><p>Meet your SLAPassistant</p></div><p>Your SLAPassistant is your cheerleader, your accountability and your guide.<br>First, they will get you set up! Find a time to meet!</p><div class="welcome-calendar"><div class="col-xs-5"><div uib-datepicker="" ng-model="dt" datepicker-options="options"></div></div><div class="time-checkbox col-xs-7"><h4>Availability on {{ dt | date:\'EEE,MMM,dd\'}}</h4><div class="col-xs-3"><div ng-repeat="t in [\'12:30\',\'01:00\',\'01:30\',\'02:00\',\'02:30\']"><input type="checkbox" id="time\' + {{ t }} + \'"> <label for="time\' + {{ t }} + \'">{{ t }} pm</label></div></div><div class="col-xs-3"><div ng-repeat="t in [\'03:00\',\'03:30\',\'04:00\',\'04:30\',\'06:00\']"><input type="checkbox" id="time\' + {{ t }} + \'"> <label for="time\' + {{ t }} + \'">{{ t }} pm</label></div></div><div class="col-xs-3"><div ng-repeat="t in [\'06:30\',\'07:00\',\'07:30\',\'08:00\',\'08:30\']"><input type="checkbox" id="time\' + {{ t }} + \'"> <label for="time\' + {{ t }} + \'">{{ t }} pm</label></div></div><div class="col-xs-3"><div><input type="checkbox" id="time"> <label for="time">09:00 pm</label></div></div></div></div><div class="bottom bottom-blue"><a href="">CONFIRM THIS TIME</a></div></div><div class="welcome-block"><div class="caption"><div class="oval oval-active"><span>2</span></div><p>Explore SLAPcenter</p></div><p>Note down any questions that come up while you explore and your<br>SLAPassistant will answer them when you meet!</p><div class="bottom bottom-grey"><a ui-sref="mindset.ourCommitment">GO TO SLAPCENTER</a></div></div></div></div></div></div>');
$templateCache.put('pages/mindset/are-your-stuck/are-your-stuck.html','<div class="slap-page" scroll-top=""><div class="panel panel-default"><div class="panel-body"><button-switch visible="showVideoBlock"></button-switch><video-block visible="showVideoBlock"></video-block></div></div><div class="panel panel-default"><div class="panel-body static-text-panel"><button-switch visible="showStaticTextBlock"></button-switch><slap-static-text visible="showStaticTextBlock"></slap-static-text></div></div><div class="panel panel-default slap-work-panel"><div class="panel-body"><button-switch visible="showDropdownBlock"></button-switch><p class="logo panel-title">SLAP<span class="aqua-green">work</span></p><div class="sample-show-hide" ng-hide="showDropdownBlock"><div class="col-md-12"><div class="custom-rzslider" ng-repeat="slide in data"><p class="heading3">{{ slide.name }}</p><span class="position-left">{{ slide.left }}</span> <span class="position-right hidden-xs">{{ slide.right }}</span><rzslider rz-slider-model="slide.value" rz-slider-options="slide.options"></rzslider><div class="clearfix"></div><span class="position-right visible-xs">{{ slide.right }}</span></div></div></div></div></div></div><slap-footer send="sendData" "="" forward="forward"></slap-footer>');
$templateCache.put('pages/mindset/cashflow/cashflow.html','<div class="slap-page" scroll-top=""><div class="panel panel-default"><div class="panel-body"><button-switch visible="showVideoBlock"></button-switch><video-block class="video-block-600" visible="showVideoBlock"></video-block></div></div></div><slap-footer send="sendData" "="" forward="forward"></slap-footer>');
$templateCache.put('pages/mindset/get-slap-mindset/get-slap-mindset.html','<div class="slap-page" scroll-top=""><div class="panel panel-default margin-t-40"><div class="panel-body"><button-switch visible="showVideoBlock"></button-switch><video-block class="video-block-600" visible="showVideoBlock"></video-block></div></div></div><slap-footer send="sendData" "="" forward="forward"></slap-footer>');
$templateCache.put('pages/mindset/our-commitment/our-commitment.html','<div class="video-only-page slap-page" scroll-top=""><div class="panel panel-default"><div class="panel-body"><button-switch visible="showVideoBlock"></button-switch><video-block class="video-block-600" visible="showVideoBlock"></video-block></div></div></div><slap-footer send="sendData" "="" forward="forward"></slap-footer>');
$templateCache.put('pages/mindset/privilege_and_responsibility/privilege-and-responsibility.html','<div class="slap-page" scroll-top=""><div class="panel panel-default"><div class="panel-body"><button-switch visible="showVideoBlock"></button-switch><video-block visible="showVideoBlock"></video-block></div></div><div class="panel panel-default"><div class="panel-body static-text-panel"><button-switch visible="showStaticTextBlock"></button-switch><slap-static-text visible="showStaticTextBlock"></slap-static-text></div></div><slap-notifications notifications="notifications"></slap-notifications><div class="panel panel-default"><div class="panel-body slap-work-panel"><button-switch visible="showDropdownBlock"></button-switch><p class="logo panel-title">SLAP<span class="aqua-green">work</span></p><div class="sample-show-hide row" ng-hide="showDropdownBlock"><div class="form-group m-b-es-20"><div class="col-md-8 col-xs-12"><label for="first" class="control-label heading3">Growing my business allows me to provide for my family</label></div><div class="col-md-4 col-xs-12"><select id="first" ng-model="data.first" ng-change="checkDropdownModels(data.first, \'provide for my family\', \'first\')" class="dropdown-box outline-0" ng-class="{\'active\': data.first}" ng-if="data.first==\'My primary driver\' || !showInfoBlock"><option ng-repeat="item in options">{{item.label}}</option></select><select id="first" ng-model="data.first" ng-change="checkDropdownModels(data.first, \'provide for my family\')" class="dropdown-box outline-0" ng-class="{\'active\': data.first}" ng-if="data.first!=\'My primary driver\' && showInfoBlock"><option ng-repeat="item in availableOptions">{{item.label}}</option></select></div></div><div class="m-b-es-30 clearfix"></div><div class="form-group"><div class="col-md-8 col-xs-12"><label for="second" class="heading3 control-label">Growing my business allows me to create jobs</label></div><div class="col-md-4 col-xs-12"><select id="second" ng-model="data.second" ng-change="checkDropdownModels(data.second, \'create jobs\', \'second\')" class="dropdown-box outline-0" ng-class="{\'active\': data.second}" ng-if="data.second==\'My primary driver\' || !showInfoBlock"><option ng-repeat="item in options">{{item.label}}</option></select><select id="second" ng-model="data.second" ng-change="checkDropdownModels(data.second, \'create jobs\')" class="dropdown-box outline-0" ng-class="{\'active\': data.second}" ng-if="data.second!=\'My primary driver\' && showInfoBlock"><option ng-repeat="item in availableOptions">{{item.label}}</option></select></div></div><div class="m-b-es-30 clearfix"></div><div class="form-group"><div class="col-md-8 col-xs-12"><label for="third" class="heading3 control-label">Growing my business allows me to give more to my community</label></div><div class="col-md-4 col-xs-12"><select id="third" ng-model="data.third" ng-change="checkDropdownModels(data.third, \'give more to my community\', \'third\')" class="dropdown-box outline-0" ng-class="{\'active\': data.third}" ng-if="data.third==\'My primary driver\' || !showInfoBlock"><option ng-repeat="item in options">{{item.label}}</option></select><select id="third" ng-model="data.third" ng-change="checkDropdownModels(data.third, \'give more to my community\')" class="dropdown-box outline-0" ng-class="{\'active\': data.third}" ng-if="data.third!=\'My primary driver\' && showInfoBlock"><option ng-repeat="item in availableOptions">{{item.label}}</option></select></div></div><div class="m-b-es-30 clearfix"></div><div class="form-group"><div class="col-md-8 col-xs-12"><label for="fourth" class="heading3 control-label">Growing my business means I am helping the economy</label></div><div class="col-md-4 col-xs-12"><select id="fourth" ng-model="data.fourth" class="dropdown-box outline-0" ng-change="checkDropdownModels(data.fourth, \'helping the economy\', \'fourth\')" ng-class="{\'active\': data.fourth}" ng-if="data.fourth==\'My primary driver\' || !showInfoBlock"><option ng-repeat="item in options">{{item.label}}</option></select><select id="fourth" ng-model="data.fourth" class="dropdown-box outline-0" ng-change="checkDropdownModels(data.fourth, \'helping the economy\')" ng-class="{\'active\': data.fourth}" ng-if="data.fourth!=\'My primary driver\' && showInfoBlock"><option ng-repeat="item in availableOptions">{{item.label}}</option></select></div></div><div class="m-b-es-50 clearfix"></div><div class="col-md-12 col-xs-12" ng-show="showInfoBlock"><p class="heading2">{{data.businessName}} Impact Goal</p><p class="heading3">Because I will grow my business this year I will be able to <span class="aqua-green">{{data.result}}</span> and I am committed to<select ng-model="data.text" class="dropdown-box goal-select outline-0"><option value="0">providing</option><option value="1">creating</option><option value="2">giving</option><option value="3">helping</option></select>&nbsp;&nbsp; <input ng-model="data.additionalText" class="outline-0" type="text"></p></div></div></div></div></div><slap-footer send="sendData" "="" forward="forward"></slap-footer>');
$templateCache.put('pages/mindset/slap-start-date/slap-start-date.html','<div class="slap-page slap-start-date" scroll-top=""><div class="panel panel-default"><div class="panel-body"><button-switch visible="showVideoBlock"></button-switch><video-block visible="showVideoBlock"></video-block></div></div><div class="panel panel-default"><div class="panel-body static-text-panel"><button-switch visible="showStaticTextBlock"></button-switch><slap-static-text visible="showStaticTextBlock"></slap-static-text></div></div><slap-notifications notifications="notifications"></slap-notifications><div class="panel panel-default"><div class="panel-body slap-work-panel"><button-switch visible="showStartDate"></button-switch><p class="logo panel-title">SLAP<span class="aqua-green">work</span></p><div class="col-md-12 sample-show-hide" ng-hide="showStartDate"><p class="heading2">Choose Your Start Date</p><p class="heading3">I will start to put my SLAP into Action no later than the first day of<br><select ng-model="data.month" class="outline-0 dropdown-box active"><option value="1">January</option><option value="2">February</option><option value="3">March</option><option value="4">April</option><option value="5">May</option><option value="6">June</option><option value="7">July</option><option value="8">August</option><option value="9">September</option><option value="10">October</option><option value="11">November</option><option value="12">December</option></select><span class="year">{{data.year}}</span></p></div></div></div></div><slap-footer send="sendData" "="" forward="forward"></slap-footer>');
$templateCache.put('pages/mindset/start-slapn/start-slapn.html','<div class="slap-page margin-l-r-20" scroll-top=""><div class="panel panel-default margin-t-40 margin-b-140"><div class="panel-body"><button-switch visible="showVideoBlock"></button-switch><video-block class="video-block-600" visible="showVideoBlock"></video-block></div></div></div><slap-footer send="sendData" "="" forward="forward"></slap-footer>');
$templateCache.put('pages/mindset/top-down-bottom-up/top-down-bottom-up.html','<div class="slap-page" scroll-top=""><div class="panel panel-default"><div class="panel-body"><button-switch visible="showVideoBlock"></button-switch><video-block class="video-block-600" visible="showVideoBlock"></video-block></div></div></div><slap-footer send="sendData" "="" forward="forward"></slap-footer>');
$templateCache.put('pages/mindset/your-business/your-business.html','<div class="slap-page" scroll-top=""><div class="panel panel-default"><div class="panel-body"><button-switch visible="showVideoBlock"></button-switch><video-block class="video-block-600" visible="showVideoBlock"></video-block></div></div></div><slap-footer send="sendData" "="" forward="forward"></slap-footer>');
$templateCache.put('pages/mindset/your-commitment/your-commitment.html','<div class="slap-page" scroll-top=""><div class="panel panel-default"><div class="panel-body"><button-switch visible="showVideoBlock"></button-switch><video-block visible="showVideoBlock"></video-block></div></div><div class="panel panel-default"><div class="panel-body static-text-panel"><button-switch visible="showStaticTextBlock"></button-switch><slap-static-text visible="showStaticTextBlock"></slap-static-text></div></div><div class="panel panel-default" ng-class="{\'margin-b-140\': !showInfoBlock}"><div class="panel-body slap-work-panel"><button-switch visible="showDropdownBlock"></button-switch><p class="panel-title">SLAP<span class="aqua-green">work</span></p><div class="sample-show-hide" ng-hide="showDropdownBlock"><div class="col-xs-12"><div class="custom-rzslider" ng-repeat="slide in data"><p class="heading3">{{ slide.name }}</p><span class="position-left">{{ slide.left }}</span> <span class="position-right hidden-xs">{{ slide.right }}</span><rzslider rz-slider-model="slide.value" rz-slider-options="slide.options"></rzslider><div class="clearfix"></div><span class="position-right visible-xs">{{ slide.right }}</span></div></div></div></div></div></div><slap-footer send="sendData" "="" forward="forward"></slap-footer>');
$templateCache.put('pages/settingsUser/myaccounts/myaccounts.html','<div class="container-fluid m-t-es-30"><div class="row"><div class="col-md-12" style="font-size: 15px"><h1>My Accounts</h1><div class="panel panel-default p-es-10"><h3>Basic</h3><div><form layout="row" layout-wrap="" layout-align="center center" name="form"><md-input-container flex="100"><label>Business Name</label> <input ng-model="user.businessName" required="" name="businessName"><div ng-messages="form.businessName.$error"><ng-message when="required">Business Name is required.</ng-message></div></md-input-container><md-input-container flex="50"><label>First Name</label> <input ng-model="user.name" required="" name="name"><div ng-messages="form.name.$error"><ng-message when="required">First Name is required.</ng-message></div></md-input-container><md-input-container flex="50"><label>Last Name</label> <input ng-model="user.lastName" required="" name="lastName"><div ng-messages="form.lastName.$error"><ng-message when="required">Last Name is required.</ng-message></div></md-input-container><md-input-container class="md-block" flex="50"><label for="email">Email</label> <input name="email" ng-model="user.email" id="email" required="" minlength="10" maxlength="100" ng-pattern="/^.+@.+\\..+$/"><div ng-messages="form.email.$error" ng-hide="form.email.$valid"><div ng-message-exp="[\'required\', \'minlength\', \'maxlength\', \'pattern\']">Only letters and numbers are allowed (a-z,A-Z)</div></div></md-input-container><md-input-container class="md-block" flex="50"><label for="phone">Phone Number</label> <input name="phone" required="" ng-model="user.phone" id="phone"><div ng-messages="form.phone.$error" ng-hide="form.phone.$valid"><ng-message when="required">Phone Number is required.</ng-message></div></md-input-container><section layout="row" layout-align="end center" flex="100"><button class="btn btn-primary pull-right" ng-click="saveBasic()" ng-disabled="form.$invalid">Save Basic</button></section></form></div><div class="clearfix"></div></div><div class="panel panel-default p-es-10"><h3>Change Password</h3><div><form layout="row" layout-wrap="" layout-align="center center" name="passwordform"><md-input-container class="md-block" flex="50"><label for="password">Password</label> <input required="" type="password" name="password" ng-model="user.password" minlength="6" md-maxlength="30" id="password"><div ng-messages="passwordform.password.$error" role="alert" ng-hide="passwordform.password.$valid"><div ng-message-exp="[\'required\', \'minlength\', \'maxlength\']">Password should be at least 6 until 30 characters</div></div></md-input-container><md-input-container class="md-block" flex="50"><label for="confirm">Confirm Password</label> <input required="" type="password" name="confirm" ng-model="user.confirm_password" minlength="6" md-maxlength="30" pass-compare="user.password" id="confirm"><div ng-messages="passwordform.confirm.$error" role="alert" ng-hide="passwordform.confirm.$valid"><div ng-message-exp="[\'required\', \'minlength\', \'maxlength\']">Passwords are not the same</div></div></md-input-container><section layout="row" layout-align="end center" flex="100"><button class="btn btn-primary pull-right" ng-click="changePassword()" ng-disabled="passwordform.$invalid">Change Password</button></section></form></div><div class="clearfix"></div></div><div class="panel panel-default p-es-10" ng-if="!stateData.isAdminPage"><h3>Credit Card</h3><div><form layout="column" layout-wrap="" name="creditform"><button class="btn btn-primary pull-right" ng-click="getCreditCard()">Current Card Number</button><div class="clearfix"></div><div class="alert alert-success" ng-if="user.last4">You are using card ****-****-****-{{user.last4}}</div><div layout="row" flex="100"><md-input-container class="md-block" flex="50"><label for="creditCard">Credit Card Number</label> <input name="creditCard" required="" ng-model="user.card.number" ui-mask="9999-9999-9999-9999" id="creditCard"><div ng-messages="creditform.creditCard.$error" ng-hide="creditform.creditCard.$valid"><div ng-message-exp="[\'required\', \'pattern\']">Enter a valid credit card number</div></div></md-input-container><md-input-container class="md-block" flex="50"><label for="exp_date">Expiration Date</label> <input name="expDate" required="" ng-model="user.card.date" ui-mask="99/9999" id="exp_date"><div ng-messages="creditform.expDate.$error" ng-hide="creditform.expDate.$valid"><div ng-message-exp="[\'required\', \'pattern\']">Enter a valid expiration date</div></div></md-input-container></div><div layout="row" flex="100"><md-input-container class="md-block" flex="50"><label for="code">Security Code</label> <input name="cvc" required="" ng-model="user.card.cvc" type="password" ng-maxlength="4" ng-minlength="3" id="code"><div ng-messages="creditform.cvc.$error" ng-hide="creditform.cvc.$valid"><div ng-message-exp="[\'required\', \'pattern\']">Enter a valid security code (CVV)</div></div></md-input-container><md-input-container class="md-block" flex="50"><label for="billing">Billing Address</label> <input name="address" required="" ng-model="user.card.billingAddress" id="billing"><div ng-messages="creditform.address.$error" ng-hide="creditform.address.$valid"><div ng-message-exp="[\'required\', \'pattern\']">Enter a valid billing address (ZIP code)</div></div></md-input-container></div></form><button class="btn btn-primary pull-right" ng-click="changeCreditCard()" ng-disabled="creditform.$invalid">Change Credit Card</button><div class="clearfix"></div></div></div><div class="panel panel-default p-es-10" ng-if="!stateData.isAdminPage"><h3>Renew Account</h3><p>You can renew account with same basic information.</p><div><button class="btn btn-primary pull-right" ng-click="renewAccount()">Renew Account</button></div><div class="clearfix"></div></div></div></div></div>');
$templateCache.put('pages/settingsUser/payments/payments.html','<div class="container-fluid"><div class="row"><div class="col-md-12"><div class="panel panel-default"><div class="panel-body"><table ng-table-dynamic="list with cols" class="table table-hover table-vertical-align ng-cloak col-md-12"><tr ng-repeat="row in $data"><td ng-repeat="col in $columns" ng-switch="col.format" ng-class="col.style"><div ng-switch-when="raw" ng-bind-html="col.getValue(row)"></div><div ng-switch-when="compile" compile="col.getValue(row)"></div><div ng-switch-default="" ng-bind-html="col.getValue(row)"></div></td></tr><tr ng-if="!list.data.length"><td colspan="{{cols.length}}" class="text-center">You do not have records for display</td></tr></table></div></div></div></div></div>');
$templateCache.put('pages/slapExcute/main/slapExcuteMain.html','<div class="slap-excute" layout="column" ng-if="!resultPage"><h2 class="text-color-strong">SLAP<small class="text-aqua">excute</small></h2><md-card flex="100" layout="row"><md-card-content flex="100" layout="row" layout-align="space-around center"><span flex="15" class="text-color-strong">Revenue Status&nbsp;&nbsp;&nbsp;</span><section flex="70"><uib-progressbar class="one-line-bar" max="100" value="dashData.TRevenueGoalPercent"><span style="color:white; white-space:nowrap;">{{dashData.TRevenueGoalPercent}}%</span></uib-progressbar></section><md-button flex="15" ng-click="changeView()">Review Results&nbsp;&nbsp;&nbsp;&nbsp;<i class="fa fa-arrow-right" aria-hidden="true"></i></md-button></md-card-content></md-card><section flex="100" layout="row"><md-card flex="33"><md-card-content layout="row"><section flex="50" layout-margin="" class="m-r-es-20"><section class="progress-container" layout="row" layout-align="center center"><round-progress max="dashData.quaterTotalActions" current="dashData.quaterClosedActions" color="{{colorAction}}" bgcolor="{{progress.bgcolor}}" radius="{{progress.radius}}" stroke="{{progress.stroke}}" semi="false" rounded="true" clockwise="true" responsive="true" duration="{{progress.duration}}" animation="{{progress.animation}}" animation-delay="{{progress.delay}}"></round-progress><section class="progress-text"><p class="text-color-strong">{{dashData.quaterClosedActions}}/{{dashData.quaterTotalActions}}</p><small>Q{{currentQuater.nth}} Action Items</small></section></section></section><section flex="50" layout="column" layout-align="center center"><p><span class="md-headline text-color-middle">You\'re rockin it! Keep that way.</span><br><small>You have done {{dashData.quaterClosedActions}} out of {{dashData.quaterTotalActions}} action items this quater.</small></p><md-button class="md-primary" ng-click="openItemDialog($event, \'add\', \'action\')">add action</md-button></section></md-card-content></md-card><md-card flex="33"><md-card-content layout="row"><section flex="50" layout-margin="" class="m-r-es-20"><section class="progress-container" layout="row" layout-align="center center"><round-progress max="100" current="dashData.cQRevenueGoalPercent" color="{{colorSales}}" bgcolor="{{progress.bgcolor}}" radius="{{progress.radius}}" stroke="{{progress.stroke}}" semi="false" rounded="true" clockwise="true" responsive="true" duration="{{progress.duration}}" animation="{{progress.animation}}" animation-delay="{{progress.delay}}"></round-progress><section class="progress-text"><p class="text-color-strong">{{dashData.cQRevenueGoalPercent}}%</p><small>From you Q{{currentQuater.nth}} revenue goals</small></section></section></section><section flex="50" layout="column" layout-align="center center"><p><span class="md-headline text-color-middle">It\'s time to make deals!</span><br><small>You have {{dashData.daysLeft}} days to reach you Q{{currentQuater.nth}} revenue goal.</small></p><md-button class="md-primary" ng-click="openItemDialog($event, \'add\', \'sales\')">add sales</md-button></section></md-card-content></md-card><md-card flex="33"><md-card-content layout="row"><section flex="50" layout-margin="" class="m-r-es-20"><section class="progress-container" layout="row" layout-align="center center"><round-progress max="dashData.daysPassed" current="dashData.daysReflected" color="{{colorReflextion}}" bgcolor="{{progress.bgcolor}}" radius="{{progress.radius}}" stroke="{{progress.stroke}}" semi="false" rounded="true" clockwise="true" responsive="true" duration="{{progress.duration}}" animation="{{progress.animation}}" animation-delay="{{progress.delay}}"></round-progress><section class="progress-text"><p class="text-color-strong">{{dashData.daysReflected}}/{{dashData.daysPassed}}</p><small>Days you passed and reflected</small></section></section></section><section flex="50" layout="column" layout-align="center center"><p><span class="md-headline text-color-middle">Let reflect today?</span><br><small>Pausing daily is important to check what\'s working or not.</small></p><md-button class="md-primary" ng-click="openItemDialog($event, \'add\', \'reflextion\')">reflect now</md-button></section></md-card-content></md-card></section><section layout="column" ng-if="mainView==\'tab\'"><md-toolbar><div class="md-toolbar-tools" layout="row"><md-tabs md-selected="tabs.selectedIndex" flex="50"><md-tab id="tab-upcoming-id" aria-controls="tab-upcoming">UPCOMING</md-tab><md-tab id="tab-done-id" aria-controls="tab-done">DONE</md-tab></md-tabs><div flex="50" layout="row" layout-align="end center" class="md-body-1"><span>Filter By Type&nbsp&nbsp</span><slap-color-switch color="{{colorAction}}" name="Actions" value="filter.showActions" static="false"></slap-color-switch>&nbsp&nbsp<slap-color-switch color="{{colorSales}}" name="Sales" value="filter.showSales" static="false"></slap-color-switch>&nbsp&nbsp<slap-color-switch color="{{colorReflextion}}" name="Reflection" value="filter.showReflextion" static="false"></slap-color-switch></div></div></md-toolbar><md-content layout-padding="" flex="" class="tab-content"><ng-switch on="tabs.selectedIndex" class="tabpanel-container"><div role="tabpanel" id="tab-upcoming" aria-labelledby="tab-upcoming-id" ng-switch-when="0" md-swipe-left="tabs.next()" md-swipe-right="tabs.previous()" layout="column"><md-card layout="column" flex="" layout-fill="" ng-cloak=""><md-content style="height: auto"></md-content></md-card></div><div role="tabpanel" id="tab-done" aria-labelledby="tab-done-id" ng-switch-when="1" md-swipe-left="tabs.next()" md-swipe-right="tabs.previous()"><md-card layout="column" flex="" layout-fill="" ng-cloak=""></md-card></div></ng-switch></md-content></section><section layout="column" ng-if="mainView==\'list\'" class="m-t-es-50"><md-toolbar layout="row" layout-align="start center"><md-select ng-model="filter.period" flex="50"><md-option ng-value="\'week\'">This Week</md-option><md-option ng-value="\'month\'">This Month</md-option><md-option ng-repeat="quaterID in [0,1,2,3]" ng-value="\'quater\'+quaterID">{{quaterID + 1 == currentQuater.nth ? \'This Quater\' : \'Q\' + (quaterID+1)}}</md-option></md-select><span>{{filter.periodStr}}</span></md-toolbar><md-toolbar><div class="md-toolbar-tools" layout="row"><md-tabs md-selected="tabs.selectedIndex" flex="50"><md-tab id="tab-overdue-id" aria-controls="tab-overdue" ng-click="filter.status=\'overdue\'">OVERDUE</md-tab><md-tab id="tab-upcoming-id" aria-controls="tab-upcoming" ng-click="filter.status=\'upcoming\'">UPCOMING</md-tab><md-tab id="tab-done-id" aria-controls="tab-done" ng-click="filter.status=\'done\'">DONE</md-tab></md-tabs><div flex="50" layout="row" layout-align="end center" class="md-body-1"><span>Filter By Type&nbsp&nbsp</span><slap-color-switch color="{{colorAction}}" name="Actions" value="filter.showActions" static="false"></slap-color-switch>&nbsp&nbsp<slap-color-switch color="{{colorSales}}" name="Sales" value="filter.showSales" static="false"></slap-color-switch>&nbsp&nbsp<slap-color-switch color="{{colorReflextion}}" name="Reflection" value="filter.showReflextion" static="false"></slap-color-switch></div></div></md-toolbar><md-content layout-padding="" flex="" class="tab-content"><md-card layout="column" flex="" layout-fill="" ng-cloak=""><md-content style="height: auto"><section><md-list class="text-color-main"><md-list-item ng-repeat-start="item in filteredForListView()" ng-class="{\'list-item-action\': item.type==\'action\',\'list-item-sales\': item.type==\'sales\',\'list-item-reflextion\': item.type==\'reflextion\'}" layout="row"><slap-list-item item="item" title="{{item.type==\'sales\' ? revenues[item.title-1].name : (item.type==\'reflextion\' ? capitalize(item.reflextWhat) + \'ly Reflection\' : item.title )}}" open-item-dialog="openItemDialog" open-delete-item-dialog="openDeleteItemDialog" layout="row" layout-align="space-between center" flex="100"></slap-list-item></md-list-item><md-divider ng-if="!$last" ng-repeat-end=""></md-divider></md-list></section></md-content></md-card></md-content></section></div><div class="slap-excute" layout="column" ng-if="resultPage"><section layout="row" layout-align="start center"><md-button ng-click="changeView()"><i class="fa fa-arrow-left" aria-hidden="true"></i>&nbsp;&nbsp;&nbsp;Back</md-button><h2 class="text-color-strong">SLAP<small class="text-aqua">excute</small><span style="font-weight:300; font-size: 0.9em">/Results</span></h2></section><section flex="100" layout="row"><md-card flex="50"><md-card-content layout="row"><section flex="30" layout-margin="" class="m-r-es-20"><section class="progress-container" layout="row" layout-align="center center"><round-progress max="dashData.totalQuaterRevenue" current="dashData.closedQuaterRevenue" color="{{colorSales}}" bgcolor="{{progress.bgcolor}}" radius="{{progress.radius}}" stroke="{{progress.stroke}}" semi="false" rounded="true" clockwise="true" responsive="true" duration="{{progress.duration}}" animation="{{progress.animation}}" animation-delay="{{progress.delay}}"></round-progress><section class="progress-text"><p class="text-color-strong">{{ dashData.closedQuaterRevenue | currency}}</p><small>Out of {{dashData.totalQuaterRevenue}} Q{{currentQuater.nth}} Revenue goal</small></section></section></section><section flex="70" layout="column" layout-align="center center"><p><span class="md-headline text-color-middle">Your Q{{currentQuater.nth}} Goal Progress</span><br><small>You need to sell {{ dashData.totalQuaterRevenue | currency}} to reach your Q{{currentQuater.nth}} revenue goal.</small></p><md-button class="md-primary" ng-click="openItemDialog($event, \'add\', \'sales\')">add sales</md-button></section></md-card-content></md-card><md-card flex="50"><md-card-content layout="row"><section flex="30" layout-margin="" class="m-r-es-20"><section class="progress-container" layout="row" layout-align="center center"><round-progress max="dashData.totalYearRevenue" current="dashData.closedYearRevenue" color="{{colorSales}}" bgcolor="{{progress.bgcolor}}" radius="{{progress.radius}}" stroke="{{progress.stroke}}" semi="false" rounded="true" clockwise="true" responsive="true" duration="{{progress.duration}}" animation="{{progress.animation}}" animation-delay="{{progress.delay}}"></round-progress><section class="progress-text"><p class="text-color-strong">{{ dashData.closedYearRevenue | currency}}</p><small>Out of {{ dashData.totalYearRevenue | currency }} annual revenue goal</small></section></section></section><section flex="70" layout="column" layout-align="center center"><p><span class="md-headline text-color-middle">Your Annual Goal Progress</span><br><small>You need to sell {{ dashData.totalYearRevenue | currency }} to reach your annual revenue goal.</small></p><md-button class="md-primary" ng-click="openItemDialog($event, \'add\', \'sales\')">add sales</md-button></section></md-card-content></md-card></section><section layout="column" class="m-t-es-50 m-w-es-10"><div flex="100" layout="row" layout-align="space-between center" class="md-body-1 m-b-es-20"><h4 class="text-color-strong">Results By Revenue Streams</h4><section layout="row" layout-align="end center"><span>Filter By Quater&nbsp&nbsp</span><slap-color-switch color="{{colorSales}}" name="Q1" value="filter.showQ" ng-click="filterSales()" static="false" quater="1"></slap-color-switch>&nbsp&nbsp<slap-color-switch color="{{colorSales}}" name="Q2" value="filter.showQ" ng-click="filterSales()" static="false" quater="2"></slap-color-switch>&nbsp&nbsp<slap-color-switch color="{{colorSales}}" name="Q3" value="filter.showQ" ng-click="filterSales()" static="false" quater="3"></slap-color-switch>&nbsp&nbsp<slap-color-switch color="{{colorSales}}" name="Q4" value="filter.showQ" ng-click="filterSales()" static="false" quater="4"></slap-color-switch>&nbsp&nbsp<slap-color-switch color="{{colorSales}}" name="Year" value="filter.showQ" ng-click="filterSales()" static="false" quater="5"></slap-color-switch></section></div><md-card layout="column" flex="" layout-fill="" ng-cloak=""><md-list class="text-color-main"><md-list-item ng-repeat-start="revenueGrid in gridData" layout="column" layout-align="center stretch"><section layout="row" layout-align="space-between center"><a ng-if="!revenueGrid.showDetail" ng-click="revenueGrid.showDetail=!revenueGrid.showDetail" flex="5"><i class="material-icons">add_circle</i></a> <a ng-if="revenueGrid.showDetail" ng-click="revenueGrid.showDetail=!revenueGrid.showDetail" flex="5"><i class="material-icons">remove_circle</i></a><section ng-click="revenueGrid.showDetail=!revenueGrid.showDetail" flex="20">{{revenueGrid.revenue.name}}</section><section flex="" class="m-w-es-10" style="position:relative"><uib-progress class="two-line-bar" max="revenueGrid.totalSalesItemCount"><uib-bar class="actual" value="revenueGrid.actualSalesItemCount" ng-if="(revenueGrid.actualSalesItemCount !=0 && revenueGrid.projectedSalesItemCount != 0)" style="border-top-right-radius: 0px; border-bottom-right-radius: 0px;"></uib-bar><uib-bar class="actual" value="revenueGrid.actualSalesItemCount" ng-if="!(revenueGrid.actualSalesItemCount !=0 && revenueGrid.projectedSalesItemCount != 0)"></uib-bar><uib-bar class="projected" style="margin-left: -5px" value="revenueGrid.projectedSalesItemCount" ng-if="revenueGrid.projectedSalesItemCount != 0"><span>{{revenueGrid.projectedSalesItemCount}} projected sales unit</span></uib-bar></uib-progress></section><span flex="20">{{revenueGrid.actualSalesItemCount}}/{{revenueGrid.totalSalesItemCount}} SALES UNITS</span><md-button flex="10" class="md-primary" ng-click="openItemDialog($event, \'add\', \'sales\')">add sales</md-button></section><md-divider style="position: relative"></md-divider><section ng-if="revenueGrid.showDetail && revenueGrid.gridOptions.data.length == 0"><span class="text-center">No Sales Items</span></section><section ng-if="revenueGrid.showDetail && revenueGrid.gridOptions.data.length >=1"><div grid-data="" class="slap-grid" grid-options="revenueGrid.gridOptions" grid-actions="revenueGrid.gridActions"><table class="mdl-data-table mdl-js-data-table mdl-data-table--selectable mdl-shadow--2dp table table-responsive table-hover"><thead><tr><th sortable="dueDate" class="sortable"><span>DATE</span></th><th class="st-sort-disable th-dropdown"><md-select filter-by="typeStr" filter-type="select" ng-model="selectedTypeStr" placeholder="Filter By Type" ng-change="filter()"><md-option value="">All Types</md-option><md-option value="Closed Sale">Closed Sale</md-option><md-option value="Projected Sale">Projected Sale</md-option></md-select></th><th sortable="saleUnit" class="sortable"><span>SALES UNIT</span></th><th sortable="amount" class="sortable"><span>AMOUNT</span></th><th sortable="salesGoalShare" class="sortable"><span>SALES GOAL SHARE</span></th><th sortable="notes" class="sortable"><span>NOTES</span></th><th></th></tr></thead><tbody><tr grid-item=""><td ng-bind="item.dueDate | date:\'MM/dd/yyyy\'"></td><td ng-bind="item.typeStr"></td><td ng-bind="item.saleUnit + \' Units\'"></td><td>{{item.amount | currency}}</td><td>{{item.salesGoalShare}}%</td><td><span flex="" style="overflow: hidden; text-overflow: ellipsis;">{{item.notes}}</span></td><td><md-button ng-click="openItemDialog($event, \'edit\', item.type, item)" style="margin:0px">Edit &nbsp;&nbsp;<i class="fa fa-arrow-right" aria-hidden="true"></i></md-button></td></tr></tbody></table></div></section></md-list-item><md-divider ng-if="!$last" ng-repeat-end=""></md-divider></md-list></md-card></section></div>');
$templateCache.put('pages/slapExcute/results/slapExcuteResults.html','<div class="slap-excute" layout="column"><section layout="row" layout-align="start center"><md-button ui-sref="slapExcute.main"><i class="fa fa-arrow-left" aria-hidden="true"></i>&nbsp;&nbsp;&nbsp;Back</md-button><h2 class="text-color-strong">SLAP<small class="text-aqua">excute</small><span style="font-weight:300; font-size: 0.9em">/Results</span></h2></section><section flex="100" layout="row"><md-card flex="50"><md-card-content layout="row"><section flex="30" layout-margin="" class="m-r-es-20"><section class="progress-container" layout="row" layout-align="center center"><round-progress max="123" current="23" color="{{colorSales}}" bgcolor="{{progress.bgcolor}}" radius="{{progress.radius}}" stroke="{{progress.stroke}}" semi="false" rounded="true" clockwise="true" responsive="true" duration="{{progress.duration}}" animation="{{progress.animation}}" animation-delay="{{progress.delay}}"></round-progress><section class="progress-text"><p class="text-color-strong">{{ \'1000\' | currency}}</p><small>Out of 44400 Q2 Revenue goal</small></section></section></section><section flex="70" layout="column" layout-align="center center"><p><span class="md-headline text-color-middle">Your Q2 Goal Progress</span><br><small>You need to sell {{ \'2000\' | currency}} to reach your Q2 revenue goal.</small></p><md-button class="md-primary" ng-click="openItemDialog($event, \'add\', \'sales\')">add sales</md-button></section></md-card-content></md-card><md-card flex="50"><md-card-content layout="row"><section flex="30" layout-margin="" class="m-r-es-20"><section class="progress-container" layout="row" layout-align="center center"><round-progress max="123" current="23" color="{{colorSales}}" bgcolor="{{progress.bgcolor}}" radius="{{progress.radius}}" stroke="{{progress.stroke}}" semi="false" rounded="true" clockwise="true" responsive="true" duration="{{progress.duration}}" animation="{{progress.animation}}" animation-delay="{{progress.delay}}"></round-progress><section class="progress-text"><p class="text-color-strong">{{ \'70003\' | currency}}</p><small>Out of {{ \'230343\' | currency }} annual revenue goal</small></section></section></section><section flex="70" layout="column" layout-align="center center"><p><span class="md-headline text-color-middle">Your Annual Goal Progress</span><br><small>You need to sell {{ \'10002\' | currency }} to reach your annual revenue goal.</small></p><md-button class="md-primary" ng-click="openItemDialog($event, \'add\', \'sales\')">add sales</md-button></section></md-card-content></md-card></section><section layout="column" class="m-t-es-50"><div flex="100" layout="row" layout-align="space-between center" class="md-body-1"><span>Results By Revenue Streams</span><section layout="row" layout-align="end center"><span>Filter By Quater&nbsp&nbsp</span><slap-color-switch color="{{colorSales}}" name="Q1" value="filter.showQ" static="false" quater="1"></slap-color-switch>&nbsp&nbsp<slap-color-switch color="{{colorSales}}" name="Q2" value="filter.showQ" static="false" quater="2"></slap-color-switch>&nbsp&nbsp<slap-color-switch color="{{colorSales}}" name="Q3" value="filter.showQ" static="false" quater="3"></slap-color-switch>&nbsp&nbsp<slap-color-switch color="{{colorSales}}" name="Q4" value="filter.showQ" static="false" quater="4"></slap-color-switch>&nbsp&nbsp<slap-color-switch color="{{colorSales}}" name="Year" value="filter.showQ" static="false" quater="-1"></slap-color-switch></section></div><md-content layout-padding="" flex="" class="tab-content"><md-card layout="column" flex="" layout-fill="" ng-cloak=""><md-content style="height: auto"><section><md-subheader class="text-color-strong">Today</md-subheader><md-list class="text-color-main"><md-list-item ng-repeat-start="item in filtered(\'today\', \'upcoming\')" ng-class="{\'list-item-action\': item.type==\'action\',\'list-item-sales\': item.type==\'sales\',\'list-item-reflextion\': item.type==\'reflextion\'}" layout="row"><slap-list-item item="item" title="{{item.type==\'sales\' ? revenues[item.title-1].name : item.title}}" open-item-dialog="openItemDialog" open-delete-item-dialog="openDeleteItemDialog" layout="row" flex="100"></slap-list-item></md-list-item><md-divider ng-if="!$last" ng-repeat-end=""></md-divider></md-list></section></md-content></md-card></md-content></section></div>');
$templateCache.put('pages/statement/commit-toYour/commit-toYour.html','<div class="slap-page" scroll-top=""><div class="panel panel-default"><div class="panel-body"><button-switch visible="showVideoBlock"></button-switch><video-block visible="showVideoBlock"></video-block></div></div><div class="panel panel-default"><div class="panel-body static-text-panel"><button-switch visible="showStaticTextBlock"></button-switch><slap-static-text visible="showStaticTextBlock"></slap-static-text></div></div><div class="panel panel-default"><div class="panel-body slap-work-panel"><button-switch visible="showContent"></button-switch><p class="logo panel-title">SLAP<span class="aqua-green">work</span></p><div class="col-xs-12 sample-show-hide" ng-hide="showContent"><p class="line-text"><span class="aqua-green">{{businessName}}</span> <span editable-select="" model-value="data.first" values-list="first"></span> <span editable-text="" model-value="data.second"></span> <span editable-select="" model-value="data.third" values-list="third"></span> <span editable-text="" model-value="data.fourth"></span> on a <span class="aqua-green" editable-select="" model-value="data.fifth" values-list="fifth"></span> scale because I will grow my business this year I will be able to <span class="aqua-green" editable-select="" model-value="privilegeInfo.resultId" values-list="privilegesData.resultList"></span> and I am committed to <span class="aqua-green" editable-select="" model-value="privilegeInfo.text" values-list="privilegesData.second"></span> <span class="aqua-green" editable-text="" model-value="privilegeInfo.additionalText"></span>.</p></div></div></div></div><slap-footer send="sendData" forward="forward"></slap-footer>');
$templateCache.put('pages/statement/statement/statement.html','<div class="slap-page container"><div class="panel panel-default margin-t-40 margin-b-140"><div class="panel-body"><button-switch visible="showVideoBlock"></button-switch><video-block visible="showVideoBlock"></video-block></div></div><div class="panel panel-default margin-t-40"><div class="panel-body static-text-panel"><button-switch visible="showStaticTextBlock"></button-switch><slap-static-text visible="showStaticTextBlock"></slap-static-text></div></div><div class="panel panel-default margin-t-40 margin-b-140"><div class="panel-body"><button-switch visible="showContent"></button-switch><h3 class="logo padding-l-15">SLAP<span class="aqua-green">work</span></h3><div class="sample-show-hide" ng-hide="showContent"><div class="form-group"><div class="col-md-3"><label for="first" class="label-text control-label">Lorem ipsum dolor sit armet</label></div><div class="col-md-4"><select id="first" ng-model="model.first" class="dropdown-box outline-0"><option>Dropdown Label</option></select></div></div></div></div></div></div><slap-footer></slap-footer>');
$templateCache.put('pages/statement/statement-overview/statement-overview.html','<div class="slap-page" scroll-top=""><div class="panel panel-default"><div class="panel-body"><button-switch visible="showVideoBlock"></button-switch><video-block class="video-block-600" visible="showVideoBlock"></video-block></div></div></div><slap-footer send="sendData" "="" forward="forward"></slap-footer>');
$templateCache.put('pages/statement/statement-qa/statement-qa.html','<div class="slap-page" scroll-top=""><div class="panel panel-default"><div class="panel-body"><button-switch visible="showVideoBlock"></button-switch><video-block class="video-block-600" visible="showVideoBlock"></video-block></div></div></div><slap-footer send="sendData" "="" forward="forward"></slap-footer>');
$templateCache.put('pages/statement/step1-summary/step1-summary.html','<div class="slap-page step3-summary" scroll-top=""><div class="panel panel-default"><div class="panel-body content-box slap-work-panel"><button-switch visible="showContent"></button-switch><p class="logo panel-title">SLAP<span class="aqua-green">summary</span></p><div class="row sample-show-hide" ng-hide="showFormBlock"><div class="col-md-11 padding-l-r-30 margin-b-24"><p class="description">Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nam eu pharetra elit, a dapibus ex. In venenatis tempor odio, non ultrices lectus</p></div></div><div class="row sample-show-hide" ng-hide="showFormBlock"><div class="col-md-12"><div class="col-md-12 col-lg-10 margin-b-50 padding-l-100 padding-r-30"><div class="grey-circle-box"><div class="grey-circle">1</div></div><p style="padding-top: 10px;"><span class="aqua-green">{{data.businessName}}</span> does <span class="aqua-green">{{data.second}}</span> for <span class="aqua-green">{{data.fourth}}</span> on a <span class="aqua-green">{{fifth[+data.fifth]}}</span> scale because <span class="aqua-green">I will grow my business this year I will be able to {{data.privilegeInfo.result}}</span> and I am committed to <span class="aqua-green">{{privilegesData.second[+data.privilegeInfo.text]}} {{data.privilegeInfo.additionalText}}</span>.</p></div></div></div></div></div></div><slap-footer send="sendData" "="" forward="forward"></slap-footer>');
$templateCache.put('pages/statement/your-statement/your-statement.html','<div class="slap-page your-statement" scroll-top=""><div class="panel panel-default"><div class="panel-body"><button-switch visible="showVideoBlock"></button-switch><video-block visible="showVideoBlock"></video-block></div></div><div class="panel panel-default"><div class="panel-body static-text-panel"><button-switch visible="showStaticTextBlock"></button-switch><slap-static-text visible="showStaticTextBlock"></slap-static-text></div></div><div class="panel panel-default"><div class="panel-body slap-work-panel"><div class="row"><div class="col-md-12"><button-switch visible="showFormBlock"></button-switch><p class="logo panel-title">SLAP<span class="aqua-green">work</span></p></div></div><div class="row sample-show-hide" ng-hide="showFormBlock"><div class="col-md-11 padding-l-r-30 margin-b-24"><p class="heading2">Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nam eu pharetra elit, a dapibus ex. In venenatis tempor odio, non ultrices lectus</p></div></div><div class="row sample-show-hide" ng-hide="showFormBlock"><div class="col-md-12 row-flex padding-l-r-30 margin-b-38"><span class="line-text margin-r-20" data-ng-bind="::data.businessName"></span><select ng-model="data.first" class="first-select active margin-r-20 dropdown-box outline-0"><option value="0">Does</option><option value="1">Provides</option><option value="2">Sells</option></select><div class="input-box"><input ng-model="data.second" type="text" id="second" ng-class="{\'active\': data.second}" class="second-input outline-0" required=""> <label class="label" for="second">What</label></div></div><div class="col-md-12 row-flex padding-l-r-30 margin-b-38"><select ng-model="data.third" class="third-select active margin-r-20 dropdown-box outline-0"><option value="0">For</option><option value="1">To</option></select><div class="input-box"><input ng-model="data.fourth" type="text" id="fourth" ng-class="{\'active\': data.fourth}" class="fourth-input margin-r-20 outline-0" required=""> <label class="label" for="fourth">Whom</label></div><span class="line-text margin-r-20">on a</span><select ng-model="data.fifth" class="fifth-select active margin-r-20 dropdown-box outline-0"><option value="0">Market size</option><option value="1">Local</option><option value="2">Regional</option><option value="3">National</option><option value="4">Global</option></select><span class="line-text">scale</span></div><div class="col-md-9 col-xs-12 margin-b-38 padding-l-r-30"><p class="line-text">because I will grow my business this year I will be able to <span class="aqua-green">{{data.privilegeInfo.result}}</span> and I am committed to <span class="aqua-green">{{privilegesData.second[+data.privilegeInfo.text]}} {{data.privilegeInfo.additionalText}}</span></p></div></div></div></div></div><slap-footer send="sendData" "="" forward="forward"></slap-footer>');
$templateCache.put('pages/yearGoal/adjust-your-year-goal/adjust-your-year-goal.html','<div class="slap-page revenue-page personal-expanses" scroll-top=""><div class="panel panel-default"><div class="panel-body"><button-switch visible="showVideoBlock"></button-switch><video-block visible="showVideoBlock"></video-block></div></div><div class="panel panel-default"><div class="panel-body static-text-panel"><button-switch visible="showStaticTextBlock"></button-switch><slap-static-text visible="showStaticTextBlock"></slap-static-text></div></div><slap-notifications notifications="notifications"></slap-notifications><div class="panel panel-default"><div class="panel-body slap-work-panel"><button-switch visible="showContent"></button-switch><p class="logo panel-title">SLAP<span class="aqua-green">work</span></p><div class="sample-show-hide" ng-hide="showContent"><div class="revenue-row"><div class="revenue-name-container text-center">Revenue Streams</div><div class="revenue-price-container text-center">Selling Price &amp; Variable Expenses</div><div class="revenue-margin-container text-center">Profit Margin</div><div class="revenue-breakdown-container text-center">Revenue Breakdown</div><div class="revenue-unit-container text-right">Unit of Sales</div></div><div class="revenue-row" ng-repeat="revenue in data.revenues | filter:{deleted: false}"><div class="revenue-name-container"><div class="input-box"><input ng-model="revenue.name" type="text" class="monthly-cost outline-0" ng-blur="checkRevenueCompleted(revenue, $event)" ng-class="{\'active\': revenue.name}" required=""> <label class="label expense-label">Add Revenue</label></div></div><div class="revenue-price-container"><div class=""><div class="input-box"><span class="currency">$</span> <input ng-model="revenue.sellingPrice" type="text" class="monthly-cost outline-0" ng-blur="checkRevenueCompleted(revenue, $event)" ng-keydown="checkValidity(revenue.sellingPrice, $event)" ng-class="{\'active\': revenue.sellingPrice}" required=""></div></div><div class="variable-row" ng-repeat="variableExpense in revenue.variableExpenses"><div class="variable-name"><div class="input-box"><input ng-model="variableExpense.expense" type="text" class="monthly-cost outline-0" ng-blur="checkVariableExpenseCompleted(variableExpense, revenue, $event)" ng-class="{\'active\': variableExpense.expense}" required=""> <label class="label expense-label">Expense</label></div></div><div class="variable-price"><div class="input-box"><span class="currency">$</span> <input ng-model="variableExpense.cost" type="text" class="monthly-cost outline-0" ng-blur="checkVariableExpenseCompleted(variableExpense, revenue, $event)" ng-keydown="checkValidity(variableExpense.cost, $event)" ng-class="{\'active\': variableExpense.cost}" required=""></div></div><span class="delete-btn outline-0 pull-right" ng-click="deleteVariableExpense(revenue, variableExpense)"><i class="fa fa-trash" aria-hidden="true"></i></span></div></div><div class="revenue-margin-container text-center"><span class="info-text">%{{revenue.margin}}</span></div><div class="revenue-breakdown-container text-center"><div class="input-box"><span class="currency">%</span> <input ng-model="revenue.breakdown" type="text" class="incidentals outline-0" ng-blur="checkRevenueCompleted(revenue, $event)" ng-keydown="checkValidity(revenue.breakdown, $event)" ng-class="{\'active\': revenue.breakdown}" required=""></div></div><div class="revenue-unit-container text-center"><span class="info-text">{{revenue.unit}} Units</span> <span class="delete-btn outline-0 pull-right" ng-click="deleteRevenue(revenue)"><i class="fa fa-trash" aria-hidden="true"></i></span></div></div><div class="revenue-row"><div class="revenue-name-container"></div><div class="revenue-price-container"></div><div class="revenue-margin-container"></div><div class="revenue-breakdown-container text-center"><span style="font-size: 14px" class="pull-left">Total</span><div class="item-circle item-circle-check pull-right" ng-if="data.totalBreakdown == 100"><i class="fa fa-check fa-lg text-white" aria-hidden="true"></i></div><br><span>%{{ data.totalBreakdown }}</span></div><div class="revenue-unit-container"></div></div></div></div></div></div><slap-footer send="sendData" "="" forward="forward"></slap-footer>');
$templateCache.put('pages/yearGoal/commit-your-year-goal/commit-your-year-goal.html','<div class="define-client slap-page"><div class="panel panel-default"><div class="panel-body"><button-switch visible="showVideoBlock"></button-switch><video-block visible="showVideoBlock"></video-block></div></div><div class="panel panel-default"><div class="panel-body static-text-panel"><button-switch visible="showStaticTextBlock"></button-switch><slap-static-text visible="showStaticTextBlock"></slap-static-text></div></div><div class="panel panel-default"><div class="panel-body slap-work-panel"><button-switch visible="showContent"></button-switch><p class="logo panel-title">SLAP<span class="aqua-green">moment</span></p><div class="col-md-12"><div class="row sample-show-hide" ng-hide="showIdealClientTextBlock"><div class="row"><div class="col-xs-12"><p class="description">Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nam eu pharetra elit, a dapibus ex. In venenatis tempor odio, non ultrices lectus</p></div></div></div></div><div class="col-md-12 row-flex sample-show-hide padding-t-45" ng-hide="showContent"><div class="col-xs-12 col-lg-8 col-lg-offset-2"><div class="row m-t-es-15 m-b-es-50"><div class="ideal-clients-list col-md-12"><div class="blue-circle"><span>!</span></div><p ng-repeat="revenue in data.revenues | filter:{deleted: false}" class="text-center">Selling <span>{{revenue.unit}} Units</span> of <span>{{revenue.name}}</span> for <span>${{revenue.sellingPrice}}</span>.</p></div></div></div></div></div></div></div><slap-footer send="sendData" "="" forward="forward"></slap-footer>');
$templateCache.put('pages/yearGoal/fixed-business-expenses/fixed-business-expenses.html','<div class="slap-page personal-expanses" scroll-top=""><div class="panel panel-default"><div class="panel-body"><button-switch visible="showVideoBlock"></button-switch><video-block visible="showVideoBlock"></video-block></div></div><div class="panel panel-default"><div class="panel-body static-text-panel"><button-switch visible="showStaticTextBlock"></button-switch><slap-static-text visible="showStaticTextBlock"></slap-static-text></div></div><slap-notifications notifications="notifications"></slap-notifications><div class="panel panel-default margin-t-40 margin-b-140"><div class="panel-body slap-work-panel"><button-switch visible="showContent"></button-switch><p class="logo panel-title">SLAP<span class="aqua-green">work</span></p><div class="col-md-9"><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nam eu pharetra elit, a dapibus ex. In venenatis tempor odio, non ultrices lectus</p></div><div class="form-box sample-show-hide col-xs-12" ng-hide="showContent"><div class="row"><div class="col-md-5"><h4>What is the name of the expense?</h4></div><div class="col-md-3"><h4>Monthly Expense</h4></div><div class="col-md-4"><h4>Yearly Expense</h4></div></div><div class="row item"><div class="col-md-5"><div class="input-box"><input ng-model="data.expenses[0].expense" type="text" id="expense-0" class="expense outline-0" disabled="" ng-class="{\'active\': data.expenses[0].expense}" required=""></div></div><div class="col-md-3"><div class="input-box"><span class="currency">$</span> <input value="{{data.expenses[0].monthlyCost | number:2}}" type="text" class="monthly-cost outline-0" disabled="" ng-class="{\'active\': data.expenses[0].monthlyCost}" required=""></div></div><div class="result col-md-4"><div ng-show="data.expenses[0].monthlyCost">&#215;12 = ${{data.expenses[0].monthlyCost ? (data.expenses[0].monthlyCost * 12) : \'\' | number:2}}</div></div></div><div class="row item" ng-repeat="item in data.expenses.slice(1)"><div class="col-md-5"><div class="input-box"><input ng-model="item.expense" type="text" id="expense-{{$index}}" class="expense outline-0" ng-keydown="$event.keyCode === 13" ng-class="{\'active\': item.expense}" required=""> <label class="label expense-label" for="expense-{{$index}}">Add Another Expense</label></div></div><div class="col-md-3"><div class="input-box"><span class="currency">$</span> <input ng-model="item.monthlyCost" type="text" class="monthly-cost outline-0" ng-blur="checkFormElements(item, $event)" ng-keydown="$event.keyCode === 13 && checkFormElements(item, $event)" ng-class="{\'active\': item.monthlyCost}" required=""></div></div><div class="result col-md-4"><div ng-show="item.monthlyCost">&#215;12 = ${{item.monthlyCost ? (item.monthlyCost * 12) : \'\' | number:2}}</div><div class="delete-btn outline-0" ng-click="deleteItem(item)"><i class="fa fa-trash" aria-hidden="true"></i></div></div></div><div class="row row-flex incidentals-wrap m-t-es-30"><div class="col-md-5"><div class="input-box"><span>Incidentals for</span> <span class="currency">%</span> <input ng-model="data.incidentals" type="text" id="incidentals" class="incidentals outline-0" ng-blur="checkNumberValid(data.incidentals, $event)" required=""></div></div><div class="result col-md-3"><span>${{data.incidentals * 0.01 * data.expensesSum | number:2}}</span></div><div class="result col-md-4">&#215;12 = ${{(data.incidentals * 0.01) * data.expensesSum * 12 | number:2}}</div></div><div class="row row-flex incidentals-wrap m-t-es-30"><div class="col-md-5"><div class="input-box"><input type="text" class="expense outline-0" disabled="" value="Expected Profit" ng-class="{\'active\': data.expenses[0].expense}" required=""></div></div><div class="col-md-3"></div><div class="result col-md-4"><div class="input-box"><span class="currency" style="line-height: 36px;">$</span> <input ng-model="data.profit" type="text" class="monthly-cost outline-0" ng-blur="checkNumberValid(data.profit, $event)" ng-keydown="$event.keyCode === 13 && checkNumberValid(data.profit, $event)" ng-class="{\'active\': data.profit}" required=""></div></div></div><div class="row m-t-es-50"><div class="col-md-12 margin-b-50"><div class="col-md-12 row-flex total-expense-wrap"><div class="col-md-5 padding-l-30">Total Expenses</div><div class="result col-md-3"><span>Total Monthly</span> <span>${{data.expensesSum + data.incidentals * 0.01 * data.expensesSum | number:2}}</span></div><div class="result col-md-4 padding-l-20"><span>Total Yearly</span> <span>&#215;12 = ${{(data.expensesSum + data.incidentals * 0.01 * data.expensesSum ) * 12 + (+data.profit) | number:2}}</span></div></div></div></div></div></div></div></div><slap-footer send="sendData" "="" forward="forward"></slap-footer>');
$templateCache.put('pages/yearGoal/personal-expenses/personal-expenses.html','<div class="slap-page personal-expanses" scroll-top=""><div class="panel panel-default"><div class="panel-body"><button-switch visible="showVideoBlock"></button-switch><video-block visible="showVideoBlock"></video-block></div></div><div class="panel panel-default"><div class="panel-body static-text-panel"><button-switch visible="showStaticTextBlock"></button-switch><slap-static-text visible="showStaticTextBlock"></slap-static-text></div></div><slap-notifications notifications="notifications"></slap-notifications><div class="panel panel-default"><div class="panel-body slap-work-panel"><button-switch visible="showContent"></button-switch><p class="logo panel-title">SLAP<span class="aqua-green">work</span></p><div class="col-xs-12"><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nam eu pharetra elit, a dapibus ex. In venenatis tempor odio, non ultrices lectus</p></div><div class="form-box sample-show-hide col-xs-12" ng-hide="showContent"><div class="row"><div class="col-md-5"><h4>What is the name of the expense?</h4></div><div class="col-md-3"><h4>Monthly Expense</h4></div><div class="col-md-4"><h4>Yearly Expense</h4></div></div><div class="row margin-b-50 item" ng-repeat="item in data.expenses"><div class="col-md-5"><div class="input-box"><input ng-model="item.expense" type="text" id="expense-{{$index}}" class="expense outline-0" ng-keydown="$event.keyCode === 13" ng-class="{\'active\': item.expense}" required=""> <label class="label expense-label" for="expense-{{$index}}">Add Another Expense</label></div></div><div class="col-md-3"><div class="input-box"><span class="currency">$</span> <input ng-model="item.monthlyCost" type="text" class="monthly-cost outline-0" ng-blur="checkFormElements(item, $event)" ng-keydown="$event.keyCode === 13 && checkFormElements(item, $event)" ng-class="{\'active\': item.monthlyCost}" required=""></div></div><div class="result col-md-4"><div ng-show="item.monthlyCost">&#215;12 = ${{item.monthlyCost ? (item.monthlyCost * 12) : \'\' | number:2}}</div><div class="delete-btn outline-0" ng-click="deleteItem(item)"><i class="fa fa-trash" aria-hidden="true"></i></div></div></div><div class="row row-flex incidentals-wrap m-t-es-30"><div class="col-md-5"><div class="input-box"><span>Incidentals for</span> <span class="currency">%</span> <input ng-model="data.incidentals" type="text" id="incidentals" class="incidentals outline-0" ng-blur="checkNumberValid(data.incidentals, $event)" required=""></div></div><div class="result col-md-3"><span>${{data.incidentals * 0.01 * data.expensesSum | number:2}}</span></div><div class="result col-md-4">&#215;12 = ${{(data.incidentals * 0.01) * data.expensesSum * 12 | number:2}}</div></div><div class="row"><div class="col-md-12 m-t-es-50"><div class="col-md-12 row-flex total-expense-wrap"><div class="col-md-5 padding-l-30">Total Expenses</div><div class="result col-md-3"><span>Total Monthly</span> <span>${{data.expensesSum + data.incidentals * 0.01 * data.expensesSum | number:2}}</span></div><div class="result col-md-4 padding-l-20"><span>Total Yearly</span> <span>&#215;12 = ${{(data.expensesSum + data.incidentals * 0.01 * data.expensesSum) * 12 | number:2}}</span></div></div></div></div></div></div></div></div><slap-footer send="sendData" "="" forward="forward"></slap-footer>');
$templateCache.put('pages/yearGoal/profit-margin/profit-margin.html','<div class="slap-page revenue-page personal-expanses" scroll-top=""><div class="panel panel-default"><div class="panel-body"><button-switch visible="showVideoBlock"></button-switch><video-block visible="showVideoBlock"></video-block></div></div><div class="panel panel-default"><div class="panel-body static-text-panel"><button-switch visible="showStaticTextBlock"></button-switch><slap-static-text visible="showStaticTextBlock"></slap-static-text></div></div><slap-notifications notifications="notifications"></slap-notifications><div class="panel panel-default"><div class="panel-body slap-work-panel"><button-switch visible="showContent"></button-switch><p class="logo panel-title">SLAP<span class="aqua-green">work</span></p><div class="sample-show-hide" ng-hide="showContent"><div class="revenue-row"><div class="revenue-name-container text-center">Revenue Streams</div><div class="revenue-price-container text-center">Selling Price &amp; Variable Expenses</div><div class="revenue-margin-container text-center show-border"><div class="blue-circle"><span>!</span></div>Profit Margin</div></div><div class="revenue-row" ng-repeat="revenue in data.revenues | filter:{deleted: false}"><div class="revenue-name-container"><div class="input-box"><input ng-model="revenue.name" type="text" class="monthly-cost outline-0" disabled="" ng-class="{\'active\': revenue.name}" required=""></div></div><div class="revenue-price-container"><div class=""><div class="input-box"><span class="currency">$</span> <input ng-model="revenue.sellingPrice" type="text" class="monthly-cost outline-0" disabled="" ng-blur="checkRevenueCompleted(revenue, $event)" ng-keydown="checkValidity(revenue.sellingPrice, $event)" ng-class="{\'active\': revenue.sellingPrice}" required=""></div></div><div class="variable-row" ng-repeat="variableExpense in revenue.variableExpenses" ng-if="variableExpense.expense != \'\' && variableExpense.cost != \'0.00\'"><div class="variable-name"><div class="input-box"><input ng-model="variableExpense.expense" type="text" class="monthly-cost outline-0" disabled="" ng-class="{\'active\': variableExpense.expense}" required=""></div></div><div class="variable-price"><div class="input-box"><span class="currency">-$</span> <input ng-model="variableExpense.cost" type="text" class="monthly-cost outline-0" disabled="" ng-keydown="checkValidity(variableExpense.cost, $event)" ng-class="{\'active\': variableExpense.cost}" required=""></div></div></div></div><div class="revenue-margin-container show-border text-center" ng-class="\'row-\' + calcHeight(revenue, $index) + \'th\'"><span class="info-text">%{{revenue.margin}}</span></div></div></div></div></div></div><slap-footer send="sendData" "="" forward="forward"></slap-footer>');
$templateCache.put('pages/yearGoal/revenue-breakdown/revenue-breakdown.html','<div class="slap-page revenue-page personal-expanses" scroll-top=""><div class="panel panel-default"><div class="panel-body"><button-switch visible="showVideoBlock"></button-switch><video-block visible="showVideoBlock"></video-block></div></div><div class="panel panel-default"><div class="panel-body static-text-panel"><button-switch visible="showStaticTextBlock"></button-switch><slap-static-text visible="showStaticTextBlock"></slap-static-text></div></div><slap-notifications notifications="notifications"></slap-notifications><div class="panel panel-default"><div class="panel-body slap-work-panel"><button-switch visible="showContent"></button-switch><p class="logo panel-title">SLAP<span class="aqua-green">work</span></p><div class="sample-show-hide" ng-hide="showContent"><div class="revenue-row"><div class="revenue-name-container text-center">Revenue Streams</div><div class="revenue-price-container text-center">Selling Price &amp; Variable Expenses</div><div class="revenue-margin-container text-center">Profit Margin</div><div class="revenue-breakdown-container text-center show-border"><div class="blue-circle"><span><i class="fa fa-arrow-down" aria-hidden="true"></i></span></div>Revenue Breakdown</div></div><div class="revenue-row" ng-repeat="revenue in data.revenues | filter:{deleted: false}"><div class="revenue-name-container"><div class="input-box"><input ng-model="revenue.name" type="text" class="monthly-cost outline-0" disabled="" ng-blur="checkRevenueCompleted(revenue, $event)" ng-class="{\'active\': revenue.name}" required=""></div></div><div class="revenue-price-container"><div class=""><div class="input-box"><span class="currency">$</span> <input ng-model="revenue.sellingPrice" type="text" class="monthly-cost outline-0" ng-blur="checkRevenueCompleted(revenue, $event)" disabled="" ng-keydown="checkValidity(revenue.sellingPrice, $event)" ng-class="{\'active\': revenue.sellingPrice}" required=""></div></div><div class="variable-row" ng-repeat="variableExpense in revenue.variableExpenses" ng-if="variableExpense.expense != \'\' && variableExpense.cost != \'0.00\'"><div class="variable-name"><div class="input-box"><input ng-model="variableExpense.expense" type="text" class="monthly-cost outline-0" disabled="" ng-blur="checkVariableExpenseCompleted(variableExpense, revenue, $event)" ng-class="{\'active\': variableExpense.expense}" required=""></div></div><div class="variable-price"><div class="input-box"><span class="currency">-$</span> <input ng-model="variableExpense.cost" type="text" class="monthly-cost outline-0" disabled="" ng-blur="checkVariableExpenseCompleted(variableExpense, revenue, $event)" ng-keydown="checkValidity(variableExpense.cost, $event)" ng-class="{\'active\': variableExpense.cost}" required=""></div></div></div></div><div class="revenue-margin-container text-center"><span class="info-text">%{{revenue.margin}}</span></div><div class="revenue-breakdown-container text-center show-border" ng-class="\'row-\' + calcHeight(revenue, $index) + \'th\'"><div class="input-box"><span class="currency">%</span> <input ng-model="revenue.breakdown" type="text" class="incidentals outline-0" ng-blur="doCalculation()" ng-keydown="checkValidity(revenue.breakdown, $event)" ng-class="{\'active\': revenue.breakdown}" required=""></div></div></div><div class="revenue-row"><div class="revenue-name-container"></div><div class="revenue-price-container"></div><div class="revenue-margin-container"></div><div class="revenue-breakdown-container text-center show-border"><span style="font-size: 14px" class="pull-left">Total</span><div class="item-circle item-circle-check pull-right" ng-if="data.totalBreakdown == 100"><i class="fa fa-check fa-lg text-white" aria-hidden="true"></i></div><br><span>%{{ data.totalBreakdown }}</span></div></div></div></div></div></div><slap-footer send="sendData" "="" forward="forward"></slap-footer>');
$templateCache.put('pages/yearGoal/revenue-streams/revenue-streams.html','<div class="slap-page revenue-page personal-expanses" scroll-top=""><div class="panel panel-default"><div class="panel-body"><button-switch visible="showVideoBlock"></button-switch><video-block visible="showVideoBlock"></video-block></div></div><div class="panel panel-default"><div class="panel-body static-text-panel"><button-switch visible="showStaticTextBlock"></button-switch><slap-static-text visible="showStaticTextBlock"></slap-static-text></div></div><slap-notifications notifications="notifications"></slap-notifications><div class="panel panel-default"><div class="panel-body slap-work-panel"><button-switch visible="showContent"></button-switch><p class="logo panel-title">SLAP<span class="aqua-green">work</span></p><div class="sample-show-hide" ng-hide="showContent"><div class="revenue-row"><div class="revenue-name-container text-center">Revenue Streams</div></div><div class="revenue-row" ng-repeat="revenue in data.revenues | filter:{deleted: false}"><div class="revenue-name-container"><div class="input-box" style="width: calc(100% - 20px); display: inline-block"><input ng-model="revenue.name" type="text" class="monthly-cost outline-0" ng-blur="checkRevenueCompleted(revenue, $event)" ng-class="{\'active\': revenue.name}" required=""> <label class="label expense-label">Add Revenue</label></div><span class="delete-btn outline-0 pull-right" ng-click="deleteRevenue(revenue)" style="padding-top: 20px"><i class="fa fa-trash" aria-hidden="true"></i></span></div></div></div></div></div></div><slap-footer send="sendData" "="" forward="forward"></slap-footer>');
$templateCache.put('pages/yearGoal/selling-price/selling-price.html','<div class="slap-page revenue-page personal-expanses" scroll-top=""><div class="panel panel-default"><div class="panel-body"><button-switch visible="showVideoBlock"></button-switch><video-block visible="showVideoBlock"></video-block></div></div><div class="panel panel-default"><div class="panel-body static-text-panel"><button-switch visible="showStaticTextBlock"></button-switch><slap-static-text visible="showStaticTextBlock"></slap-static-text></div></div><slap-notifications notifications="notifications"></slap-notifications><div class="panel panel-default"><div class="panel-body slap-work-panel"><button-switch visible="showContent"></button-switch><p class="logo panel-title">SLAP<span class="aqua-green">work</span></p><div class="sample-show-hide" ng-hide="showContent"><div class="revenue-row"><div class="revenue-name-container text-center">Revenue Streams</div><div class="revenue-price-container text-center show-border"><div class="blue-circle"><span><i class="fa fa-arrow-down" aria-hidden="true"></i></span></div>Selling Price</div></div><div class="revenue-row" ng-repeat="revenue in data.revenues | filter:{deleted: false}"><div class="revenue-name-container"><div class="input-box"><input ng-model="revenue.name" type="text" class="monthly-cost outline-0" disabled="" ng-class="{\'active\': revenue.name}" required=""></div></div><div class="revenue-price-container show-border"><div class=""><div class="input-box"><span class="currency">$</span> <input ng-model="revenue.sellingPrice" type="text" class="monthly-cost outline-0" ng-keydown="checkValidity(revenue.sellingPrice, $event)" ng-class="{\'active\': revenue.sellingPrice}" required=""></div></div></div></div></div></div></div></div><slap-footer send="sendData" "="" forward="forward"></slap-footer>');
$templateCache.put('pages/yearGoal/step3-summary/step3-summary.html','<div class="step3-summary slap-page" scroll-top=""><div class="panel panel-default"><div class="panel-body content-box slap-work-panel"><button-switch visible="showContent"></button-switch><p class="logo panel-title">SLAP<span class="aqua-green">summary</span></p><div class="col-xs-12 col-lg-12 sample-show-hide" ng-hide="showContent"><div class="row summary-step"><div class="line-to"></div><div class="col-xs-12 col-xs-12 m-b-sm-50"><div class="grey-circle-box"><div class="grey-circle">1</div></div><p style="min-height: 122px;"><span class="aqua-green">{{data.businessName}}</span> does <span class="aqua-green">{{data.second}}</span> for <span class="aqua-green">{{data.fourth}}</span> on a <span class="aqua-green">{{fifth[+data.fifth]}}</span> scale because <span class="aqua-green">I will grow my business this year I will be able to {{data.privilegeInfo.result}}</span> and I am committed to <span class="aqua-green">{{privilegesData.second[+data.privilegeInfo.text]}} {{data.privilegeInfo.additionalText}}</span>.</p></div></div><div class="row summary-step"><div class="line-to"></div><div class="col-xs-12 m-b-sm-50"><div class="grey-circle-box"><div class="grey-circle">2</div></div><p style="min-height: 122px;">My Ideal Client is a <span class="aqua-green">{{age[+client.age]}}</span> years old <span class="aqua-green">{{gender[+client.gender]}}</span>, <span class="aqua-green">{{maritalStatus[+client.maritalStatus]}}</span>, father of <span class="aqua-green">{{kids[+client.kids]}}</span>, work as an <span class="aqua-green">{{employment[+client.employment]}}</span>, lives in <span class="aqua-green">{{location[+client.location]}}</span>, generally on transit by <span class="aqua-green">{{transit[+client.transit]}}</span>, likes to <span class="aqua-green">{{hobbies[client.hobbies]}}</span> and read <span class="aqua-green">{{reads[client.reads]}}</span>.</p></div></div><div class="row summary-step"><div class="line-to"></div><div class="col-md-12 margin-b-50 padding-l-100 padding-r-30"><div class="grey-circle-box"><div class="grey-circle">3</div></div><p>By <span class="aqua-green">{{months[+slapStartDate.month]}} 31, {{slapStartDate.year}}</span>, I will sell</p><ul class="revenue-summary row"><li class="col-xs-4 col-sm-3 col-md-2" ng-repeat="revenue in model.revenues | filter: {deleted: false}"><p><span class="aqua-green">{{revenue.unit}} Units</span> of <span class="aqua-green">{{revenue.name}}</span> for avg. price <span class="aqua-green">${{revenue.sellingPrice}}</span>.</p></li></ul><p>To generate a total of <span class="aqua-green">${{totalTarget | number:2}}</span> revenue and <span class="aqua-green">${{profit | number:2}}</span> profit this SLAPyear!</p></div></div></div></div></div></div><slap-footer send="sendData" "="" forward="forward"></slap-footer>');
$templateCache.put('pages/yearGoal/total-fixed-expenses-revenue/total-fixed-expenses-revenue.html','<div class="define-client slap-page"><div class="panel panel-default"><div class="panel-body"><button-switch visible="showVideoBlock"></button-switch><video-block visible="showVideoBlock"></video-block></div></div><div class="panel panel-default"><div class="panel-body static-text-panel"><button-switch visible="showStaticTextBlock"></button-switch><slap-static-text visible="showStaticTextBlock"></slap-static-text></div></div><div class="panel panel-default"><div class="panel-body slap-work-panel"><button-switch visible="showContent"></button-switch><p class="logo panel-title">SLAP<span class="aqua-green">moment</span></p><div class="col-md-12"><div class="row sample-show-hide" ng-hide="showIdealClientTextBlock"><div class="row"><div class="col-xs-12"><p class="description">Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nam eu pharetra elit, a dapibus ex. In venenatis tempor odio, non ultrices lectus</p></div></div></div></div><div class="col-md-12 row-flex sample-show-hide padding-t-45" ng-hide="showContent"><div class="col-xs-12 col-lg-8 col-lg-offset-2"><div class="row m-t-es-15 m-b-es-50"><div class="ideal-clients-list col-md-12"><div class="blue-circle"><span>!</span></div><p class="text-center">In order to cover all of your Fixed Expenses and pay yourself a salary that will cover your Personal Expenses, you must make a minimum of <em>${{total | number:2}}</em></p></div></div></div></div></div></div></div><slap-footer send="sendData" "="" forward="forward"></slap-footer>');
$templateCache.put('pages/yearGoal/variable-business-expenses/variable-business-expenses.html','<div class="slap-page revenue-page personal-expanses" scroll-top=""><div class="panel panel-default"><div class="panel-body"><button-switch visible="showVideoBlock"></button-switch><video-block visible="showVideoBlock"></video-block></div></div><div class="panel panel-default"><div class="panel-body static-text-panel"><button-switch visible="showStaticTextBlock"></button-switch><slap-static-text visible="showStaticTextBlock"></slap-static-text></div></div><slap-notifications notifications="notifications"></slap-notifications><div class="panel panel-default"><div class="panel-body slap-work-panel"><button-switch visible="showContent"></button-switch><p class="logo panel-title">SLAP<span class="aqua-green">work</span></p><div class="sample-show-hide" ng-hide="showContent"><div class="revenue-row"><div class="revenue-name-container text-center">Revenue Streams</div><div class="revenue-price-container text-center show-border"><div class="blue-circle"><span><i class="fa fa-arrow-down" aria-hidden="true"></i></span></div>Selling Price &amp; Variable Expenses</div></div><div class="revenue-row" ng-repeat="revenue in data.revenues | filter:{deleted: false}"><div class="revenue-name-container"><div class="input-box"><input ng-model="revenue.name" type="text" class="monthly-cost outline-0" disabled="" ng-class="{\'active\': revenue.name}" required=""></div></div><div class="revenue-price-container show-border"><div class=""><div class="input-box"><span class="currency">$</span> <input ng-model="revenue.sellingPrice" type="text" class="monthly-cost outline-0" disabled="" ng-keydown="checkValidity(revenue.sellingPrice, $event)" ng-class="{\'active\': revenue.sellingPrice}" required=""></div></div><div class="variable-row" ng-repeat="variableExpense in revenue.variableExpenses"><div class="variable-name"><div class="input-box"><input ng-model="variableExpense.expense" type="text" class="monthly-cost outline-0" ng-blur="checkVariableExpenseCompleted(variableExpense, revenue, $event)" ng-class="{\'active\': variableExpense.expense}" required=""> <label class="label expense-label">Expense</label></div></div><div class="variable-price"><div class="input-box"><span class="currency">-$</span> <input ng-model="variableExpense.cost" type="text" class="monthly-cost outline-0" ng-blur="checkVariableExpenseCompleted(variableExpense, revenue, $event)" ng-keydown="checkValidity(variableExpense.cost, $event)" ng-class="{\'active\': variableExpense.cost}" required=""></div></div><span class="delete-btn outline-0 pull-right" ng-click="deleteVariableExpense(revenue, variableExpense)"><i class="fa fa-trash" aria-hidden="true"></i></span></div></div></div></div></div></div></div><slap-footer send="sendData" "="" forward="forward"></slap-footer>');
$templateCache.put('pages/yearGoal/year-goal-overview/year-goal-overview.html','<div class="slap-page" scroll-top=""><div class="panel panel-default"><div class="panel-body"><button-switch visible="showVideoBlock"></button-switch><video-block class="video-block-600" visible="showVideoBlock"></video-block></div></div></div><slap-footer send="sendData" "="" forward="forward"></slap-footer>');
$templateCache.put('pages/yearGoal/year-goal-qa/year-goal-qa.html','<div class="slap-page" scroll-top=""><div class="panel panel-default"><div class="panel-body"><button-switch visible="showVideoBlock"></button-switch><video-block class="video-block-600" visible="showVideoBlock"></video-block></div></div></div><slap-footer send="sendData" "="" forward="forward"></slap-footer>');
$templateCache.put('pages/yearGoal/your-year-goal/your-year-goal.html','<div class="define-client slap-page"><div class="panel panel-default"><div class="panel-body"><button-switch visible="showVideoBlock"></button-switch><video-block visible="showVideoBlock"></video-block></div></div><div class="panel panel-default"><div class="panel-body static-text-panel"><button-switch visible="showStaticTextBlock"></button-switch><slap-static-text visible="showStaticTextBlock"></slap-static-text></div></div><div class="panel panel-default"><div class="panel-body slap-work-panel"><button-switch visible="showContent"></button-switch><p class="logo panel-title">SLAP<span class="aqua-green">moment</span></p><div class="col-md-12"><div class="row sample-show-hide" ng-hide="showIdealClientTextBlock"><div class="row"><div class="col-xs-12"><p class="description">Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nam eu pharetra elit, a dapibus ex. In venenatis tempor odio, non ultrices lectus</p></div></div></div></div><div class="col-md-12 row-flex sample-show-hide padding-t-45" ng-hide="showContent"><div class="col-xs-12 col-lg-8 col-lg-offset-2"><div class="row m-t-es-15 m-b-es-50"><div class="ideal-clients-list col-md-12"><div class="blue-circle"><span>!</span></div><p ng-repeat="revenue in data.revenues | filter:{deleted: false}" class="text-center">Selling <span>{{revenue.unit}} Units</span> of <span>{{revenue.name}}</span> for <span>${{revenue.sellingPrice}}</span>.</p></div></div></div></div></div></div></div><slap-footer send="sendData" "="" forward="forward"></slap-footer>');
$templateCache.put('admin/components/dialogs/activity-dialog/activity-dialog.html','<md-dialog aria-label="List dialog" class="activity-dialog p-t-es-40"><section layout="column"><form layout="row" layout-wrap="" layout-align="center center" name="form"><md-input-container flex="50"><label>Activity</label> <input ng-model="formData.title" required="" name="title"><div ng-messages="form.title.$error"><ng-message when="required">Activity is required.</ng-message></div></md-input-container><md-input-container flex="50"><md-select ng-model="formData.type"><md-option ng-value="type.name" ng-repeat="type in activityTypes">{{type.name}}</md-option></md-select><div class="md-errors-spacer"></div></md-input-container><md-input-container flex="100"><label>Notes</label> <input ng-model="formData.notes"></md-input-container></form></section><md-dialog-actions><md-button ng-click="updateItem($event)" class="md-primary" ng-if="(curMode == \'edit\')" ng-disabled="form.$invalid">Edit</md-button><md-button ng-click="updateItem($event)" class="md-primary" ng-if="curMode == \'add\'" ng-disabled="form.$invalid">Add</md-button><md-button ng-click="closeDialog()" class="md-primary">Close</md-button></md-dialog-actions></md-dialog>');
$templateCache.put('admin/components/dialogs/password-dialog/password-dialog.html','<md-dialog aria-label="List dialog" class="activity-dialog p-t-es-40"><section layout="column"><form layout="row" layout-wrap="" layout-align="center center" name="form"><md-input-container class="md-block" flex="50"><label for="password">Password</label> <input required="" type="password" name="password" ng-model="password.password" minlength="6" md-maxlength="30" id="password"><div ng-messages="form.password.$error" role="alert" ng-hide="form.password.$valid"><div ng-message-exp="[\'required\', \'minlength\', \'maxlength\']">Password should be at least 6 until 30 characters</div></div></md-input-container><md-input-container class="md-block" flex="50"><label for="confirm">Confirm Password</label> <input required="" type="password" name="confirm" ng-model="password.confirm_password" minlength="6" md-maxlength="30" pass-compare="password.password" id="confirm"><div ng-messages="form.confirm.$error" role="alert" ng-hide="form.confirm.$valid"><div ng-message-exp="[\'required\', \'minlength\', \'maxlength\']">Passwords are not the same</div></div></md-input-container><span>TODO: Decide pasword strength</span></form></section><md-dialog-actions><md-button ng-click="setPassword($event)" class="md-primary" ng-disabled="form.$invalid">Change</md-button><md-button ng-click="closeDialog()" class="md-primary">Close</md-button></md-dialog-actions></md-dialog>');
$templateCache.put('admin/pages/main/index/main-index.html','<div class="container"><div class="row"><div class="col-xs-12"><section layout="column"><md-card class="card" flex="100" style="overflow: initial"><div class="card-move-up waves-effect waves-block waves-light"><div class="move-up cyan darken-1"><div><span class="chart-title white-text">Revenue</span><div class="chart-revenue cyan darken-2 white-text"><p class="chart-revenue-total">$4,500.85</p><p class="chart-revenue-per"><i class="mdi-navigation-arrow-drop-up"></i> 21.80 %</p></div><div class="switch chart-revenue-switch right"><label class="cyan-text text-lighten-5">Month <input type="checkbox"> <span class="lever"></span> Year</label></div></div><div class="trending-line-chart-wrapper"><canvas id="trending-line-chart" height="70"></canvas></div></div></div><div class="card-content"><a class="btn-floating btn-move-up waves-effect waves-light darken-2 right"><i class="mdi-content-add activator"></i></a><div class="col s12 m3 l3"><div id="doughnut-chart-wrapper"><canvas id="doughnut-chart" height="200"></canvas><div class="doughnut-chart-status">4500<p class="ultra-small center-align">Sold</p></div></div></div><div class="col s12 m2 l2"><ul class="doughnut-chart-legend"><li class="mobile ultra-small"><span class="legend-color"></span>Mobile</li><li class="kitchen ultra-small"><span class="legend-color"></span> Kitchen</li><li class="home ultra-small"><span class="legend-color"></span> Home</li></ul></div><div class="col s12 m5 l6"><div class="trending-bar-chart-wrapper"><canvas id="trending-bar-chart" height="90"></canvas></div></div></div><div class="card-reveal"><span class="card-title grey-text text-darken-4">Revenue by Month <i class="mdi-navigation-close right"></i></span><table class="responsive-table"><thead><tr><th data-field="id">ID</th><th data-field="month">Month</th><th data-field="item-sold">Item Sold</th><th data-field="item-price">Item Price</th><th data-field="total-profit">Total Profit</th></tr></thead><tbody><tr><td>1</td><td>January</td><td>122</td><td>100</td><td>$122,00.00</td></tr><tr><td>2</td><td>February</td><td>122</td><td>100</td><td>$122,00.00</td></tr><tr><td>3</td><td>March</td><td>122</td><td>100</td><td>$122,00.00</td></tr><tr><td>4</td><td>April</td><td>122</td><td>100</td><td>$122,00.00</td></tr><tr><td>5</td><td>May</td><td>122</td><td>100</td><td>$122,00.00</td></tr><tr><td>6</td><td>June</td><td>122</td><td>100</td><td>$122,00.00</td></tr><tr><td>7</td><td>July</td><td>122</td><td>100</td><td>$122,00.00</td></tr><tr><td>8</td><td>August</td><td>122</td><td>100</td><td>$122,00.00</td></tr><tr><td>9</td><td>Septmber</td><td>122</td><td>100</td><td>$122,00.00</td></tr><tr><td>10</td><td>Octomber</td><td>122</td><td>100</td><td>$122,00.00</td></tr><tr><td>11</td><td>November</td><td>122</td><td>100</td><td>$122,00.00</td></tr><tr><td>12</td><td>December</td><td>122</td><td>100</td><td>$122,00.00</td></tr></tbody></table></div></md-card><div class="clearfix"></div><br><div id="card-stats" flex="100"><div class="row"><div class="col s12 m6 l3"><div class="card"><div class="card-content green white-text"><p class="card-stats-title"><i class="mdi-social-group-add"></i> New Clients</p><h4 class="card-stats-number">566</h4><p class="card-stats-compare"><i class="mdi-hardware-keyboard-arrow-up"></i> 15% <span class="green-text text-lighten-5">from yesterday</span></p></div><div class="card-action green darken-2"><div id="clients-bar" class="center-align"></div></div></div></div><div class="col s12 m6 l3"><div class="card"><div class="card-content pink lighten-1 white-text"><p class="card-stats-title"><i class="mdi-editor-insert-drive-file"></i> Renewals</p><h4 class="card-stats-number">1806</h4><p class="card-stats-compare"><i class="mdi-hardware-keyboard-arrow-down"></i> 3% <span class="deep-purple-text text-lighten-5">from last month</span></p></div><div class="card-action pink darken-2"><div id="invoice-line" class="center-align"></div></div></div></div><div class="col s12 m6 l3"><div class="card"><div class="card-content blue-grey white-text"><p class="card-stats-title"><i class="mdi-action-trending-up"></i> Today Profit</p><h4 class="card-stats-number">$806.52</h4><p class="card-stats-compare"><i class="mdi-hardware-keyboard-arrow-up"></i> 80% <span class="blue-grey-text text-lighten-5">from yesterday</span></p></div><div class="card-action blue-grey darken-2"><div id="profit-tristate" class="center-align"></div></div></div></div><div class="col s12 m6 l3"><div class="card"><div class="card-content purple white-text"><p class="card-stats-title"><i class="mdi-editor-attach-money"></i>Total Sales</p><h4 class="card-stats-number">$8990.63</h4><p class="card-stats-compare"><i class="mdi-hardware-keyboard-arrow-up"></i> 70% <span class="purple-text text-lighten-5">last month</span></p></div><div class="card-action purple darken-2"><div id="sales-compositebar" class="center-align"></div></div></div></div></div></div></section></div></div></div>');
$templateCache.put('admin/pages/main/login/main-login.html','<div class="container"><div class="row"><div class="col-md-offset-3 col-md-6 col-xs-12"><form ng-disabled="" id="login-form" name="loginForm" novalidate=""><div class="panel panel-default animated fadeInDown"><div class="panel-body"><h3>SLAP ADMIN Login</h3><hr><div class="form-group" ng-class="{\'has-error\':vm.errors.email}"><input type="email" ng-model="vm.login.email" class="form-control" name="email" placeholder="E-mail" required=""><div class="help-block help-block-error" ng-show="vm.errors.email" ng-bind-html="vm.errors.email | joinBr"></div></div><div class="form-group" ng-class="{\'has-error\':vm.errors.password}"><input type="password" ng-model="vm.login.password" class="form-control" name="password" placeholder="Password" required="" ng-minlength="4" ng-maxlength="30"><div class="help-block help-block-error" ng-show="vm.errors.password" ng-bind-html="vm.errors.email | joinBr"></div></div><hr><div class="text-center"><button ng-disabled="loginForm.$invalid" type="submit" ng-click="vm.submit()" class="btn btn-primary btn-fullwidth">Login</button></div></div></div></form></div></div></div>');
$templateCache.put('admin/pages/manage_data/coupon/list/coupon-manage.html','<div class="container"><div class="row"><div class="col-md-12"><div class="panel panel-default"><div class="panel-body"><div class="text-right"><a class="btn btn-primary" ui-sref="coupon.add"><i class="fa fa-plus"></i> Add</a></div><hr><table ng-table-dynamic="list with cols" class="table table-hover table-vertical-align ng-cloak"><tr ng-repeat="row in $data"><td ng-repeat="col in $columns" ng-switch="col.format" ng-class="col.style"><div ng-switch-when="raw" ng-bind-html="col.getValue(row)"></div><div ng-switch-when="compile" compile="col.getValue(row)"></div><div ng-switch-default="" ng-bind-html="col.getValue(row)"></div></td></tr><tr ng-if="!list.data.length"><td colspan="{{cols.length}}" class="text-center">You do not have records for display</td></tr></table></div></div></div></div></div>');
$templateCache.put('admin/pages/manage_data/emailtemplates/item/emailtemplates-item.html','<div class="container"><div class="row"><div class="col-md-12"><div class="panel panel-default"><div class="panel-body"><form name="emailTemplateForm" novalidate=""><div class="col-xs-12"><div class="text-right col-xs-12"><button type="submit" class="btn btn-primary" ng-click="save()">Save</button><a class="btn btn-danger" ui-sref="emailtemplates.list">Cancel</a></div></div><br><hr><md-input-container class="md-block"><label>Title</label> <input required="" type="text" name="subject" ng-model="emailTemplate.subject"></md-input-container><br><br><md-input-container class="md-block"><label>Html Version</label> <textarea ng-model="emailTemplate.html"></textarea></md-input-container><br><br><md-input-container class="md-block"><label>Text Version</label> <textarea ng-model="emailTemplate.text"></textarea></md-input-container><br><br><md-input-container class="md-block"><label>SCSS</label> <textarea ng-model="emailTemplate.scss"></textarea></md-input-container></form></div></div></div></div></div>');
$templateCache.put('admin/pages/manage_data/emailtemplates/list/emailtemplates-manage.html','<div class="container"><div class="row"><div class="col-md-12"><div class="panel panel-default"><div class="panel-body"><div class="text-right"></div><hr><table ng-table-dynamic="list with cols" class="table table-hover table-vertical-align ng-cloak"><tr ng-repeat="row in $data"><td ng-repeat="col in $columns" ng-switch="col.format" ng-class="col.style"><div ng-switch-when="raw" ng-bind-html="col.getValue(row)"></div><div ng-switch-when="compile" compile="col.getValue(row)"></div><div ng-switch-default="" ng-bind-html="col.getValue(row)"></div></td></tr><tr ng-if="!list.data.length"><td colspan="{{cols.length}}" class="text-center">You do not have records for display</td></tr></table></div></div></div></div></div>');
$templateCache.put('admin/pages/manage_data/products/item/products-item.html','<div class="container"><div class="row"><div class="col-md-12"><div class="panel panel-default"><div class="panel-body"><form name="createProductsForm"><div class="col-xs-12 m-b-es-20"><button type="submit" class="btn btn-primary pull-right" ng-click="save()">Save</button> <button type="submit" class="btn btn-default pull-right" ng-click="apply()" ng-show="productID">Apply</button> <a class="btn btn-danger pull-right" ui-sref="plans.list">Cancel</a></div><div class="col-xs-12 m-b-es-20"><div class="col-xs-4 text-left"><select name="switchProduct" id="switchProduct" ng-model="product.switchProduct" class="form-control" ng-change="typeChange()"><option ng-value="true">Plan</option><option ng-value="false">Build</option></select></div><div class="col-xs-4 build-form"><div class="form-group build-form" ng-hide="product.switchProduct"><select name="switchBuildType" id="switchBuildType" ng-model="product.switchBuildType" class="form-control" ng-change="buildTypeChange()"><option ng-value="true">Installments</option><option ng-value="false">One Time Payments</option></select></div></div><div class="text-right col-xs-4"><div class="switch-status"><select name="switchStatus" id="switchStatus" ng-model="product.switchStatus" class="form-control" ng-change="statusChange()"><option ng-value="true">Active</option><option ng-value="false">Inactive</option></select></div></div></div><br><hr><div class="form-group" ng-class="{\'has-error\' : errors[\'productName\']}"><label for="productName" ng-show="product.switchProduct">Name of SLAPplan*</label> <label for="productName" ng-hide="product.switchProduct">Name of SLAPbuild*</label> <input type="text" class="form-control" id="productName" ng-model="product.productName"><div class="help-block help-block-error" ng-show="errors[\'productName\']" ng-bind-html="errors[\'productName\']"></div></div><div class="form-group" ng-class="{\'has-error\' : errors[\'productDescription\']}"><label for="productDescription" ng-show="product.switchProduct">Description of SLAPplan*</label> <label for="productDescription" ng-hide="product.switchProduct">Description of SLAPbuild*</label> <textarea class="form-control" id="productDescription" rows="3" ng-model="product.productDescription"></textarea><div class="help-block help-block-error" ng-show="errors[\'productDescription\']" ng-bind-html="errors[\'productDescription\']"></div></div><div class="row"><div class="col-md-4"><div class="form-group" ng-class="{\'has-error\' : errors[\'costProduct\']}"><label for="costProduct" ng-show="product.switchProduct">Monthly Payment for SLAPplan*</label> <label for="costProduct" ng-hide="product.switchProduct || product.buildType == 2">Monthly Payment for SLAPbuild*</label> <label for="costProduct" ng-hide="product.switchProduct || product.buildType == 1">Amount for One Time SLAPbuild*</label> <input type="number" class="form-control" id="costProduct" ng-model="product.costProduct"><div class="help-block help-block-error" ng-show="errors[\'costProduct\']" ng-bind-html="errors[\'costProduct\']"></div></div></div><div class="col-md-4"><div class="form-group" ng-class="{\'has-error\' : errors[\'billingFrequency\']}"><label for="billingFrequency" ng-show="product.switchProduct">Billing Frequency*</label> <label for="billingFrequency" ng-hide="product.switchProduct">Billing Frequency*</label><select class="form-control" id="billingFrequency" ng-model="product.billingFrequency" ng-disabled="product.buildType == 2 && !product.switchProduct" ng-options="mount.id as mount.id for mount in select_month"></select><div class="help-block help-block-error" ng-show="errors[\'billingFrequency\']" ng-bind-html="errors[\'billingFrequency\']"></div></div></div><div class="col-md-4"><div class="form-group" ng-class="{\'has-error\' : errors[\'expertHours\']}"><label for="expertHours" ng-show="product.switchProduct">SLAPexpert Hours*</label> <label for="expertHours" ng-hide="product.switchProduct">SLAPexpert Hours*</label> <input type="number" class="form-control" id="expertHours" ng-model="product.expertHours"><div class="help-block help-block-error" ng-show="errors[\'expertHours\']" ng-bind-html="errors[\'expertHours\']"></div></div></div></div><div class="row"><div class="col-md-12 build-form" ng-hide="product.switchProduct || product.buildType == 2"><div class="form-group" ng-class="{\'has-error\' : errors[\'amountFirstPayment\']}"><label for="amountFirstPayment">First Payment for SLAPbuild</label> <input type="number" class="form-control" id="amountFirstPayment" ng-model="product.amountFirstPayment"><div class="help-block help-block-error" ng-show="errors[\'amountFirstPayment\']" ng-bind-html="errors[\'amountFirstPayment\']"></div></div></div></div></form><hr><span>Fields with * are required.</span></div></div></div></div></div>');
$templateCache.put('admin/pages/manage_data/products/list/products-manage.html','<div class="container"><div class="row"><div class="col-md-12"><div class="panel panel-default"><div class="panel-body"><div class="text-right"><a class="btn btn-primary" ui-sref="plans.add"><i class="fa fa-plus"></i> Add</a></div><hr><table ng-table-dynamic="list with cols" class="table table-hover table-vertical-align ng-cloak"><tr ng-repeat="row in $data"><td ng-repeat="col in $columns" ng-switch="col.format" ng-class="col.style"><div ng-switch-when="raw" ng-bind-html="col.getValue(row)"></div><div ng-switch-when="compile" compile="col.getValue(row)"></div><div ng-switch-default="" ng-bind-html="col.getValue(row)"></div></td></tr><tr ng-if="!list.data.length"><td colspan="{{cols.length}}" class="text-center">You do not have records for display</td></tr></table></div></div></div></div></div>');
$templateCache.put('admin/pages/manage_data/users/item/users-item.html','<div layout="column" style="width: 100%;"><md-card flex="100" class="p-es-30 m-w-es-40"><form layout="row" layout-wrap="" layout-align="center center" name="form"><md-input-container flex="100"><label>Business Name</label> <input ng-model="user.businessName" required="" name="businessName"><div ng-messages="form.businessName.$error"><ng-message when="required">Business Name is required.</ng-message></div></md-input-container><md-input-container flex="50"><label>First Name</label> <input ng-model="user.name" required="" name="name"><div ng-messages="form.name.$error"><ng-message when="required">First Name is required.</ng-message></div></md-input-container><md-input-container flex="50"><label>Last Name</label> <input ng-model="user.lastName" required="" name="lastName"><div ng-messages="form.lastName.$error"><ng-message when="required">Last Name is required.</ng-message></div></md-input-container><md-input-container flex="50"><md-select ng-model="user.status"><md-option ng-repeat="status in STATUSES" ng-value="status.id">{{status.name}}</md-option></md-select><div class="md-errors-spacer"></div></md-input-container><md-input-container flex="50"><md-select ng-model="user.role" ng-disabled="user.role == 4"><md-option ng-value="role.id" ng-repeat="role in ROLES" ng-disabled="role.id == 4">{{role.name}}</md-option></md-select><div class="md-errors-spacer"></div></md-input-container><md-input-container class="md-block" flex="50"><label for="email">Email</label> <input name="email" ng-model="user.email" id="email" required="" minlength="10" maxlength="100" ng-pattern="/^.+@.+\\..+$/"><div ng-messages="form.email.$error" ng-hide="form.email.$valid"><div ng-message-exp="[\'required\', \'minlength\', \'maxlength\', \'pattern\']">Only letters and numbers are allowed (a-z,A-Z)</div></div></md-input-container><md-input-container class="md-block" flex="50"><label for="phone">Phone Number</label> <input name="phone" required="" ng-model="user.phone" id="phone"><div ng-messages="form.phone.$error" ng-hide="form.phone.$valid"><ng-message when="required">Phone Number is required.</ng-message></div></md-input-container><md-input-container class="md-block" flex="50" ng-if="!userID"><label for="password">Password</label> <input required="" type="password" name="password" ng-model="user.password" minlength="6" md-maxlength="30" id="password"><div ng-messages="form.password.$error" role="alert" ng-hide="form.password.$valid"><div ng-message-exp="[\'required\', \'minlength\', \'maxlength\']">Password should be at least 6 until 30 characters</div></div></md-input-container><md-input-container class="md-block" flex="50" ng-if="!userID"><label for="confirm">Confirm Password</label> <input required="" type="password" name="confirm" ng-model="password.confirm_password" minlength="6" md-maxlength="30" pass-compare="user.password" id="confirm"><div ng-messages="form.confirm.$error" role="alert" ng-hide="form.confirm.$valid"><div ng-message-exp="[\'required\', \'minlength\', \'maxlength\']">Passwords are not the same</div></div></md-input-container><section layout="row" layout-align="end center" flex="100"><md-button ng-click="showSetPasswordDialog($event)" class="md-primary">SET Password</md-button><md-button ng-click="createOrSave($event)" class="md-primary">Save</md-button><md-button ng-click="deleteItem($event)" class="md-warn">Delete</md-button></section></form></md-card></div>');
$templateCache.put('admin/pages/manage_data/users/list/users-manage.html','<div layout="column" style="width: 100%;"><md-card flex="100" class="p-es-30 m-w-es-40"><section><md-button class="md-primary pull-right" ui-sref="users.add">New User</md-button></section><div layout-gt-xs="row" layout-xs="column" layout-align="stretch center"><md-input-container class="md-icon-float md-block" flex="50" style="margin: 0px"><md-icon><i class="material-icons">search</i></md-icon><input ng-model="searchKeyword" ng-keydown="buildGridData()" type="text" placeholder="Search"></md-input-container></div><div grid-data="" class="slap-grid" id="users-grid" grid-options="gridData.gridOptions" grid-actions="gridData.gridActions" ng-if="dataReady"><div layout-gt-sm="row" layout-sm="column" layout-align="center"><div flex-gt-sm="25" flex-sm="100" layout="row" layout-align="start center"><span>{{filtered.length}} items total</span></div><div flex-gt-sm="75" flex-xs="100"><div layout-xs="column" layout="row" layout-align-xs="end end" layout-align="end center"><grid-pagination max-size="5" boundary-links="true" class="pagination mdl-shadow--2dp" ng-if="paginationOptions.totalItems > paginationOptions.itemsPerPage" total-items="paginationOptions.totalItems" ng-model="paginationOptions.currentPage" ng-change="reloadGrid()" items-per-page="paginationOptions.itemsPerPage"></grid-pagination><md-input-container flex-offset-gt-xs="5" class="items-per-page"><md-select ng-init="paginationOptions.itemsPerPage = \'5\'" ng-model="paginationOptions.itemsPerPage" ng-change="reloadGrid()" aria-label="page-selector"><md-option value="5">5</md-option><md-option value="10">10</md-option><md-option value="20">20</md-option><md-option value="50">50</md-option></md-select></md-input-container></div></div></div><div><table class="mdl-data-table mdl-js-data-table mdl-data-table--selectable mdl-shadow--2dp table table-responsive table-hover"><thead><tr><th sortable="businessName" class="sortable"><span>Business Name</span></th><th class="st-sort-disable th-dropdown"><md-select filter-by="displayRole" filter-type="select" ng-model="selectedTypeStr" placeholder="Filter By Type" ng-change="filter()"><md-option value="">All</md-option><md-option ng-value="role.name" ng-repeat="role in ROLES">{{role.name}}</md-option></md-select></th><th sortable="name" class="sortable"><span>First Name</span></th><th sortable="lastName" class="sortable"><span>Last Name</span></th><th sortable="email" class="sortable"><span>Email</span></th><th class="st-sort-disable th-dropdown"><md-select filter-by="displayStatus" filter-type="select" ng-model="selectedStatusStr" placeholder="Filter By Status" ng-change="filter()"><md-option value="">All</md-option><md-option value="{{status.name}}" ng-repeat="status in STATUSES">{{status.name}}</md-option></md-select></th><th></th></tr></thead><tbody><tr grid-item=""><td>{{item.businessName}}</td><td>{{item.displayRole}}</td><td>{{item.name}}</td><td>{{item.lastName}}</td><td>{{item.email}}</td><td>{{item.displayStatus}}</td><td><a ui-sref="users.item({user_id:item._id, mode:\'edit\'})" style="margin:0px">Edit</a> <a ui-sref="slapsters.item({user_id:item._id})" style="margin:0px" ng-if="item.role == 4">View</a> <a ng-click="deleteItem($event, item)" style="margin:0px">Delete</a></td></tr></tbody></table></div></div></md-card></div>');
$templateCache.put('admin/pages/reports/financial_tracker/list/index.html','<div class="container"><div class="row"><div class="col-md-12"><div class="panel panel-default"><div class="panel-body"><hr><table ng-table-dynamic="list with cols" class="table table-hover table-vertical-align ng-cloak"><tr ng-repeat="row in $data" ng-class="{rowRed: row.status == 0 }"><td ng-repeat="col in $columns" ng-switch="col.format" ng-class="col.style"><div ng-switch-when="raw" ng-bind-html="col.getValue(row)"></div><div ng-switch-when="compile" compile="col.getValue(row)"></div><div ng-switch-default="" ng-bind-html="col.getValue(row)"></div></td></tr><tr ng-if="!list.data.length"><td colspan="{{cols.length}}" class="text-center">You do not have records for display</td></tr></table></div></div></div></div></div>');
$templateCache.put('admin/pages/reports/report_builder/index/index.html','<div class="container"><div class="row"><div class="col-xs-12">report builder coneten</div></div></div>');
$templateCache.put('admin/pages/slapsters/slapstersMain/item/slapsters-item.html','<div layout="column" style="width: 100%; font-size: 17px;"><section layout="row" layout-align="end center" class="m-w-es-40"><select class="form-control" ng-model="selectedUserID" ng-change="changeUser(selectedUserID)" style="margin: 0px; width: 300px; font-size: 19px" aria-label="SLAP-select"><option ng-repeat="user in accounts" ng-value="user._id">{{$index+1}} YEAR {{user.createdAt | date: \'yyyy-MM-dd\'}}</option></select><div class="md-errors-spacer"></div></section><md-card flex="100" class="p-es-30 m-es-40 slapster-at-a-glance" ng-init="showAtAGlance = false"><section layout="row" layout-align="space-between center"><h3>SLAPster At a Glance</h3><button-switch visible="showAtAGlance"></button-switch></section><section class="sample-show-hide" ng-show="showAtAGlance"><form layout="row" layout-wrap="" layout-align="center start" name="form"><section layout="column" flex="50"><md-input-container><label>Business Name</label> <input ng-model="user.businessName" required="" name="businessName"><div ng-messages="form.businessName.$error"><ng-message when="required">Business Name is required.</ng-message></div></md-input-container><md-input-container><label>First Name</label> <input ng-model="user.name" required="" name="name"><div ng-messages="form.name.$error"><ng-message when="required">First Name is required.</ng-message></div></md-input-container><md-input-container><label>Last Name</label> <input ng-model="user.lastName" required="" name="lastName"><div ng-messages="form.lastName.$error"><ng-message when="required">Last Name is required.</ng-message></div></md-input-container><md-input-container><label>Partner/Affiliate</label><md-select ng-model="partnerId" aria-label="partner-select"><md-option ng-repeat="user in userData | filter: {role: 5}" ng-value="user._id">{{user.name + \' \' + user.lastName}}</md-option></md-select><div class="md-errors-spacer"></div></md-input-container><md-input-container class="md-block"><label for="email">Email</label> <input name="email" ng-model="user.email" id="email" required="" minlength="10" maxlength="100" ng-pattern="/^.+@.+\\..+$/"><div ng-messages="form.email.$error" ng-hide="form.email.$valid"><div ng-message-exp="[\'required\', \'minlength\', \'maxlength\', \'pattern\']">Only letters and numbers are allowed (a-z,A-Z)</div></div></md-input-container><md-input-container class="md-block"><label for="phone">Phone Number</label> <input name="phone" required="" ng-model="user.phone" id="phone"><div ng-messages="form.phone.$error" ng-hide="form.phone.$valid"><ng-message when="required">Phone Number is required.</ng-message></div></md-input-container><md-input-container class="md-block"><label for="phone">Work Phone Number</label> <input name="phone" ng-model="user.extrainfo.workPhone" id="workPhone"><div ng-messages="form.workPhone.$error" ng-hide="form.workPhone.$valid"></div></md-input-container><md-input-container class="md-block"><label for="phone">Cell Phone Number</label> <input name="phone" ng-model="user.extrainfo.cellPhone" id="cellPhone"><div ng-messages="form.cellPhone.$error" ng-hide="form.cellPhone.$valid"></div></md-input-container><md-input-container class="md-block"><label for="phone">Prefered Contact Method</label> <input name="phone" ng-model="user.extrainfo.contactMethod" id="contactMethod"><div ng-messages="form.contactMethod.$error" ng-hide="form.contactMethod.$valid"></div></md-input-container><md-input-container class="md-block"><label for="phone">Text Notes</label> <input name="phone" ng-model="user.extrainfo.textNotes" id="textNotes"><div ng-messages="form.textNotes.$error" ng-hide="form.textNotes.$valid"></div></md-input-container></section><section layout="column" flex="50"><md-input-container><label>SLAP Start Date</label> <input type="text" disabled="" ng-value="user.createdAt | date: \'yyyy-MM-dd\'"></md-input-container><md-input-container><label>Original Date</label> <input type="text" disabled="" ng-value="buildData.slapMindset.slapStartDate ? (buildData.slapMindset.slapStartDate.year + \'-\' + buildData.slapMindset.slapStartDate.month) + \'-01\' : \'Not Set\'"></md-input-container><md-input-container><label>SLAPProgram</label><md-select ng-model="user.planId" aria-label="plan-select"><md-option ng-repeat="product in programData | filter: {buildType: 1}" ng-value="product._id">{{product.productName}}</md-option></md-select><div class="md-errors-spacer"></div></md-input-container><md-input-container><label>Promo Code</label><md-select ng-model="user.couponId" aria-label="coupon-select"><md-option ng-repeat="promocode in promocodeData" ng-value="promocode._id">{{promocode.name}}</md-option></md-select><div class="md-errors-spacer"></div></md-input-container><md-input-container><label>SLAPBuild</label> <input type="text" disabled="" value="YES or NO"><div ng-messages="form.businessName.$error"></div></md-input-container><md-input-container><label>SLAPexpert</label><md-select ng-model="user.expertId" aria-label="expert-select"><md-option ng-repeat="user in userData | filter: {role: 2}" ng-value="user._id">{{user.name +\' \' + user.lastName}}</md-option></md-select><div class="md-errors-spacer"></div></md-input-container><md-input-container><label>SLAPScore</label> <input type="text" disabled="" value="0"></md-input-container></section><section layout="row" layout-align="end center" flex="100"><md-button ng-click="createOrSave($event)" class="md-primary">Save</md-button></section></form></section></md-card><md-card flex="100" class="p-es-30 m-es-40 slapster-ideal-client-journey" ng-init="showJourney = false"><section layout="row" layout-align="space-between center"><h3>Ideal Client Journey</h3><button-switch visible="showJourney"></button-switch></section><section class="sample-show-hide" ng-show="showJourney">Ideal Client Journey<table class="table table-responsive"><thead><tr><td>Start</td><td>Onboard</td><td>Build</td><td>Approve</td><td>Execute Onboard</td><td>Q1</td><td>Q2</td><td>Q3</td><td>Q4</td><td>Renew</td></tr></thead><tbody><tr><td>{{isJouneyItemDone(\'start\', \'Account Created\') ? \'\u2714\' : \'\'}}Account Created<br>{{isJouneyItemDone(\'start\', \'T&C Signed\') ? \'\u2714\' : \'\'}}T&C Signed<br>{{isJouneyItemDone(\'start\', \'Payment Set Up\') ? \'\u2714\' : \'\'}}Payment Set Up<br>{{isJouneyItemDone(\'start\', \'Onboarding Call Set\') ? \'\u2714\' : \'\'}}Onboard Call Set<br>{{isJouneyItemDone(\'start\', \'SE Calls Set\') ? \'\u2714\' : \'\'}}SE Calls Set<br></td><td>{{isJouneyItemDone(\'onboard\', \'Call Happened\') ? \'\u2714\' : \'\'}}Call Happened<br>{{isJouneyItemDone(\'onboard\', \'Profile 100%\') ? \'\u2714\' : \'\'}}Profile 100%<br>{{isJouneyItemDone(\'onboard\', \'SM Calls Set\') ? \'\u2714\' : \'\'}}SM Calls Set<br></td><td>{{isJouneyItemDone(\'build\', \'Step1 Done\') ? \'\u2714\' : \'\'}}Step 1 Done<br>{{isJouneyItemDone(\'build\', \'Step2 Done\') ? \'\u2714\' : \'\'}}Step 2 Done<br>{{isJouneyItemDone(\'build\', \'Step3 Done\') ? \'\u2714\' : \'\'}}Step 3 Done<br>{{isJouneyItemDone(\'build\', \'Step4 Done\') ? \'\u2714\' : \'\'}}Step 4 Done<br></td><td>{{isJouneyItemDone(\'approve\', \'Review Done\') ? \'\u2714\' : \'\'}}Review Done<br>{{isJouneyItemDone(\'approve\', \'SLAP Updated\') ? \'\u2714\' : \'\'}}SLAP Updated<br>{{isJouneyItemDone(\'approve\', \'Full Approval\') ? \'\u2714\' : \'\'}}Full Approval<br></td><td>{{isJouneyItemDone(\'excute\', \'Execute Call Set\') ? \'\u2714\' : \'\'}}Call Happened<br></td><td>{{quaters[0].quaterProgress[\'action\']}}% of AI<br>{{quaters[0].quaterProgress[\'sales\']}}% of Sales<br>{{quaters[0].quaterProgress[\'reflextion\']}}% of P&R<br>{{isJouneyItemDone(\'q1\', \'SLAPstuff Sent\') ? \'\u2714\' : \'\'}}SLAPstuff Out<br>{{isJouneyItemDone(\'q1\', \'Quarterly Summary\') ? \'\u2714\' : \'\'}}Quarterly Summary<br>x/3 Paid</td><td>{{quaters[1].quaterProgress[\'action\']}}% of AI<br>{{quaters[1].quaterProgress[\'sales\']}}% of Sales<br>{{quaters[1].quaterProgress[\'reflextion\']}}% of P&R<br>{{isJouneyItemDone(\'q2\', \'SLAPmatch\') ? \'\u2714\' : \'\'}}SLAPmatch<br>{{isJouneyItemDone(\'q2\', \'SLAPbuddy Connected\') ? \'\u2714\' : \'\'}}SLAPbuddy Connected<br>{{isJouneyItemDone(\'q2\', \'Quarterly Summary\') ? \'\u2714\' : \'\'}}Quarterly Summary<br>x/3 Paid</td><td>{{quaters[2].quaterProgress[\'action\']}}% of AI<br>{{quaters[2].quaterProgress[\'sales\']}}% of Sales<br>{{quaters[2].quaterProgress[\'reflextion\']}}% of P&R<br>{{isJouneyItemDone(\'q3\', \'Q3 Hustle Call Set\') ? \'\u2714\' : \'\'}}Q3 Hustle Call Set<br>{{isJouneyItemDone(\'q3\', \'Quarterly Summary\') ? \'\u2714\' : \'\'}}Quarterly Summary<br>x/3 Paid</td><td>{{quaters[3].quaterProgress[\'action\']}}% of AI<br>{{quaters[3].quaterProgress[\'sales\']}}% of Sales<br>{{quaters[3].quaterProgress[\'reflextion\']}}% of P&R<br>{{isJouneyItemDone(\'q4\', \'Renewal Confirmed\') ? \'\u2714\' : \'\'}}Renewal Confirmed<br>x/3 Paid</td><td>Annual Report<br>Next Year Account Created<br></td></tr></tbody></table></section></md-card><md-card flex="100" class="p-es-30 m-es-40 slapster-success-metrics" ng-init="showSuccessMetrics = false"><section layout="row" layout-align="space-between center"><h3>Success Metrics</h3><button-switch visible="showSuccessMetrics"></button-switch></section><section class="sample-show-hide" ng-show="showSuccessMetrics"><div class="alert alert-danger" ng-if="!revenues" style="margin: 0px">This account have <strong>no revenue streams</strong> yet.</div><table class="table table-responsive table-bordered table-striped table-hover" ng-if="revenues"><thead class="thead-default"><tr><th></th><th rowspan="2" colspan="2">Anual</th><th colspan="2">Q1</th><th colspan="2">Q2</th><th colspan="2">Q3</th><th colspan="2">Q4</th></tr><tr><th></th><th colspan="2">{{quaters[0].monthsString}}</th><th colspan="2">{{quaters[1].monthsString}}</th><th colspan="2">{{quaters[2].monthsString}}</th><th colspan="2">{{quaters[3].monthsString}}</th></tr><tr><th></th><th>Goal</th><th>Actual</th><th>Goal</th><th>Actual</th><th>Goal</th><th>Actual</th><th>Goal</th><th>Actual</th><th>Goal</th><th>Actual</th></tr></thead><tbody class="table-striped"><tr ng-repeat="revenue in revenues"><td>{{revenue.name}}</td><td>{{revenue.unit}}</td><td>{{revenue.actualUnit}}</td><td>{{revenue.quaterSale[0].targetUnit}}</td><td>{{revenue.quaterSale[0].actualUnit}}</td><td>{{revenue.quaterSale[1].targetUnit}}</td><td>{{revenue.quaterSale[1].actualUnit}}</td><td>{{revenue.quaterSale[2].targetUnit}}</td><td>{{revenue.quaterSale[2].actualUnit}}</td><td>{{revenue.quaterSale[3].targetUnit}}</td><td>{{revenue.quaterSale[3].actualUnit}}</td></tr><tr><td>%</td><td></td><td>{{anualInfo.progress.toFixed(2)}}</td><td></td><td>{{anualInfo.quaterSale[0].progress.toFixed(2)}}</td><td></td><td>{{anualInfo.quaterSale[1].progress.toFixed(2)}}</td><td></td><td>{{anualInfo.quaterSale[2].progress.toFixed(2)}}</td><td></td><td>{{anualInfo.quaterSale[3].progress.toFixed(2)}}</td></tr></tbody><tfoot></tfoot></table></section></md-card><md-card flex="100" class="p-es-30 m-es-40 slapster-payments" ng-init="showPayments = false"><section layout="row" layout-align="space-between center"><h3>Payments</h3><button-switch visible="showPayments"></button-switch></section><section class="sample-show-hide" ng-show="showPayments" layout="row" layout-align="space-between center"><section><div class="alert alert-danger" ng-if="user.pausingPayment">This account was <strong>paused Payment</strong>.</div><table class="table table-responsive table-striped table-hover table-bordered"><thead><tr><td>Program</td><td>Amount</td><td>Promo Code</td><td>Amount Discount</td><td>Status</td><td>Date</td></tr></thead><tbody><tr ng-repeat="item in paymentData"><td>{{item.programName}}</td><td>{{item.costProduct | currency}}</td><td>{{item.promoCode}}</td><td>{{item.discount | currency}}</td><td ng-class="item.status ? \'\' : \'bg-danger\'">{{item.status == 0 ? \'Declined\' : \'Paid\'}}</td><td>{{item.paymentDate}}</td></tr></tbody></table></section><section layout="column"><button class="btn btn-primary" ng-click="charge(0)">Charge 1:1 Meeting</button><br><button class="btn btn-primary" ng-click="charge(1)">Charge Group Meeting</button><br><button class="btn btn-warning" ng-click="togglePayment()">{{user.pausingPayment ? \'Resume Payment\' : \'Pause Payments\'}}</button></section></section></md-card><md-card flex="100" class="p-es-30 m-es-40 slapster-slap-milestones" ng-init="showSlapMilestones = false"><section layout="row" layout-align="space-between center"><h3>SLAPmanager Milestones</h3><button-switch visible="showSlapMilestones"></button-switch></section><section class="sample-show-hide" ng-show="showSlapMilestones"><section layout="row" layout-align="center center"><table class="table table-responsive table-striped table-hover table-bordered"><thead><tr><td>Scheduled Call</td><td>Completion</td></tr></thead><tbody><tr ng-repeat="item in SMmilestones"><td>{{item.title}}</td><td ng-click="toggleSMmilestone(item)">{{isJouneyItemDone(item.journey.section, item.journey.name) ? \'\u2714\' : \'\'}}</td></tr></tbody></table></section></section></md-card><md-card flex="100" class="p-es-30 m-es-40 slapster-activity" ng-init="showActivity = true"><section layout="row" layout-align="space-between center"><h3>Activity</h3><button-switch visible="showActivity"></button-switch></section><section class="sample-show-hide" ng-show="showActivity"><section><md-button class="md-primary pull-right" ng-click="openItemDialog($event, \'add\')">Create Activity</md-button></section><div layout-gt-xs="row" layout-xs="column" layout-align="stretch center"><md-input-container class="md-icon-float md-block" flex="50" style="margin: 0px"><md-icon><i class="material-icons">search</i></md-icon><input ng-model="activitySearchKeyword" ng-keydown="buildActivityGridData()" type="text" placeholder="Search"></md-input-container></div><section layout="row"><section flex="50"></section><section layout="row" flex="50" layout-wrap=""><slap-color-switch color="#0e7cb5" name="{{type.name}}" value="type.show" static="false" ng-repeat-start="type in activityTypes" ng-click="buildActivityGridData()"></slap-color-switch><span ng-repeat-end="">&nbsp&nbsp</span></section></section><div grid-data="" class="slap-grid" id="activity-grid" grid-options="activityGridData.gridOptions" grid-actions="activityGridData.gridActions" ng-if="activityGridReady"><div layout-gt-sm="row" layout-sm="column" layout-align="center"><div flex-gt-sm="25" flex-sm="100" layout="row" layout-align="start center"><span>{{filtered.length}} activities</span></div><div flex-gt-sm="75" flex-xs="100"><div layout-xs="column" layout="row" layout-align-xs="end end" layout-align="end center"><grid-pagination max-size="5" boundary-links="true" class="pagination mdl-shadow--2dp" ng-if="paginationOptions.totalItems > paginationOptions.itemsPerPage" total-items="paginationOptions.totalItems" ng-model="paginationOptions.currentPage" ng-change="reloadGrid()" items-per-page="paginationOptions.itemsPerPage"></grid-pagination><md-input-container flex-offset-gt-xs="5" class="items-per-page"><md-select ng-init="paginationOptions.itemsPerPage = \'5\'" ng-model="paginationOptions.itemsPerPage" ng-change="reloadGrid()" aria-label="page-selector"><md-option value="5">5</md-option><md-option value="10">10</md-option><md-option value="20">20</md-option><md-option value="50">50</md-option></md-select></md-input-container></div></div></div><div><table class="mdl-data-table mdl-js-data-table mdl-data-table--selectable mdl-shadow--2dp table table-responsive table-hover"><thead><tr><th sortable="title" class="sortable"><span>Activity</span></th><th sortable="type" class="sortable"><span>Type</span></th><th sortable="updatedByUserName" class="sortable"><span>Updated By</span></th><th sortable="createdAtStr" class="sortable"><span>Date</span></th><th sortable="notes" class="sortable"><span>Notes</span></th><th></th></tr></thead><tbody><tr grid-item=""><td>{{item.title}}</td><td>{{item.type}}</td><td>{{item.updatedByUserName}}</td><td>{{item.createdAtStr}}</td><td><span style="overflow: hidden; text-overflow: ellipsis;">{{item.notes}}</span></td><td><a ng-click="openItemDialog($event, \'edit\', item)" style="margin:0px">Edit</a> <a ng-click="openDeleteItemDialog($event, item)" style="margin:0px">Delete</a></td></tr></tbody></table></div></div></section></md-card><md-card flex="100" class="p-es-30 m-es-40 slapster-expert-hours" ng-init="showExpertHours = true"><section layout="row" layout-align="space-between center"><h3>Expert Hours</h3><button-switch visible="showExpertHours"></button-switch></section><section class="sample-show-hide" ng-show="showExpertHours">Activity</section></md-card></div>');
$templateCache.put('admin/pages/slapsters/slapstersMain/list/slapsters-list.html','<div layout="column" style="width: 100%;"><md-card flex="100" class="p-es-30 m-w-es-40"><div layout-gt-xs="row" layout-xs="column" layout-align="stretch center"><md-input-container class="md-icon-float md-block" flex="50" style="margin: 0px"><md-icon><i class="material-icons">search</i></md-icon><input ng-model="searchKeyword" ng-keydown="buildGridData()" type="text" placeholder="Search"></md-input-container></div><div grid-data="" class="slap-grid" id="users-grid" grid-options="gridData.gridOptions" grid-actions="gridData.gridActions" ng-if="dataReady"><div layout-gt-sm="row" layout-sm="column" layout-align="center"><div flex-gt-sm="25" flex-sm="100" layout="row" layout-align="start center"><span>{{filtered.length}} items total</span></div><div flex-gt-sm="75" flex-xs="100"><div layout-xs="column" layout="row" layout-align-xs="end end" layout-align="end center"><grid-pagination max-size="5" boundary-links="true" class="pagination mdl-shadow--2dp" ng-if="paginationOptions.totalItems > paginationOptions.itemsPerPage" total-items="paginationOptions.totalItems" ng-model="paginationOptions.currentPage" ng-change="reloadGrid()" items-per-page="paginationOptions.itemsPerPage"></grid-pagination><md-input-container flex-offset-gt-xs="5" class="items-per-page"><md-select ng-init="paginationOptions.itemsPerPage = \'5\'" ng-model="paginationOptions.itemsPerPage" ng-change="reloadGrid()" aria-label="page-selector"><md-option value="5">5</md-option><md-option value="10">10</md-option><md-option value="20">20</md-option><md-option value="50">50</md-option></md-select></md-input-container></div></div></div><div><table class="mdl-data-table mdl-js-data-table mdl-data-table--selectable mdl-shadow--2dp table table-responsive table-hover"><thead><tr><th sortable="businessName" class="sortable"><span>Business Name</span></th><th sortable="name" class="sortable"><span>First Name</span></th><th sortable="lastName" class="sortable"><span>Last Name</span></th><th sortable="email" class="sortable"><span>Email</span></th><th sortable="countslapyear" class="sortable"><span>SLAP YEAR</span></th><th></th></tr></thead><tbody><tr grid-item=""><td>{{item.businessName}}</td><td>{{item.name}}</td><td>{{item.lastName}}</td><td>{{item.email}}</td><td>{{item.countslapyear}}</td><td><a ui-sref="slapsters.item({bizname: item.businessName, user_id:item._id, mode:\'view\'})" style="margin:0px">Show</a> <a ng-click="deleteItem($event, item)" style="margin:0px">Delete</a></td></tr></tbody></table></div></div></md-card></div>');
$templateCache.put('admin/pages/manage_data/coupon/item/coupon-item.html','<div class="container"><div class="row"><div class="col-md-12"><div class="panel panel-default"><div class="panel-body"><form name="couponForm" novalidate=""><div class="col-xs-12"><div class="text-right col-xs-12"><button type="submit" class="btn btn-primary" ng-click="save()">Save</button><a class="btn btn-danger" ui-sref="coupon.list">Cancel</a></div></div><br><hr><div class="form-group" ng-class="{\'has-error\' : !couponForm.name.$valid && couponForm.name.$dirty || couponForm.$submitted}"><label for="couponName">Coupon name *</label> <input type="text" class="form-control" id="couponName" ng-model="coupon.name" required="" name="name"><div class="help-block help-block-error" ng-show="couponForm.name.$invalid && couponForm.name.$dirty"><span ng-show="couponForm.name.$error.required">Required</span></div></div><div class="row"><div class="form-group col-xs-10" ng-class="{\'has-error\' : !couponForm.code.$valid && couponForm.code.$dirty || couponForm.$submitted}"><label for="couponCode">Coupon code *</label> <input type="text" class="form-control" id="couponCode" ng-model="coupon.code" name="code"><div class="help-block help-block-error" ng-show="errors[\'couponCode\']"><span ng-show="couponForm.code.$error.required">Required</span></div></div><div class="form-group col-xs-2 btn-margin"><button type="button" class="btn btn-success" ng-click="generate()">Generate</button></div></div><div class="row"><div class="col-md-4"><div class="form-group"><label>Coupon Type</label><br><select name="typeCoupon" id="typeCoupon" ng-model="coupon.typeCoupon" class="form-control"><option ng-value="1">Percentage</option><option ng-value="0">Fixed Amount</option></select></div></div><div class="col-md-4"><div class="form-group" ng-class="{\'has-error\' : !couponForm.amount.$valid && couponForm.amount.$dirty || couponForm.$submitted}"><label for="couponAmount">Amount *</label> <input type="text" class="form-control" id="couponAmount" name="amount" ng-model="coupon.amount" placeholder="{{ coupon.switchType ? \'%\' : \'USD\' }}" required=""><div class="help-block help-block-error" ng-show="couponForm.amount.$invalid && couponForm.amount.$dirty"><span ng-show="couponForm.amount.$error.required">Required</span></div></div></div><div class="col-md-4"><div class="form-group" ng-class="{\'has-error\' : errors[\'expertHours\']}"><label for="applyOn">Apply On*</label><select name="" id="applyOn" ng-model="coupon.plan" class="form-control" ng-options="plan.productName for plan in plans track by plan._id"></select><div class="help-block help-block-error" ng-show="errors[\'expertHours\']" ng-bind-html="errors[\'expertHours\']"></div></div></div></div><div class="row"><div class="col-md-6"><div class="form-group" ng-class="{\'has-error\' : errors[\'redemption\']}"><label for="redemption">Maximum Redemptions</label> <input type="text" class="form-control" id="redemption" ng-model="coupon.redemption"><div class="help-block help-block-error" ng-show="errors[\'redemption\']" ng-bind-html="errors[\'redemption\']"></div></div></div><div class="col-md-6"><div class="col-md-6"><popup-date label="Valid from" ng-model="coupon.dateFrom"></popup-date></div><div class="col-md-6"><popup-date label="Valid until" ng-model="coupon.dateUntil"></popup-date></div></div></div><hr><div class="row"><div class="col-md-12" ng-init="coupon.duration"><div class="form-inline"><label><input type="radio" name="optionsRadios" id="oneTime" ng-model="coupon.duration" ng-value="oneTime" ng-change="coupon.durationLimited = null"> One Time</label></div><div class="form-inline"><label><input type="radio" name="optionsRadios" id="forever" ng-model="coupon.duration" ng-value="forever" ng-change="coupon.durationLimited = null"> Forever</label></div><div class="form-inline"><label class="form-group"><input type="radio" name="optionsRadios" id="optionsRadios1" ng-model="coupon.duration" ng-value="limited"> Limited Period <input type="text" class="form-control" ng-model="coupon.durationLimited" ng-disabled="coupon.duration != limited">month(s)</label></div></div></div></form><hr><span>Fields with * are required.</span></div></div></div></div></div>');}]);
(function() {
    'use strict';

    angular
        .module('manage.coupon.module', []);
}());
(function() {
    'use strict';

    CouponItemController.$inject = ["$scope", "pageService", "productsService", "couponService", "toaster", "$stateParams", "$state"];
    angular
        .module('manage.coupon.module')
        .controller('CouponItemController', CouponItemController);

    /* @ngInject */
    function CouponItemController($scope,pageService,productsService,couponService,toaster,$stateParams,$state) {

        $scope.coupon = {
            switchType: true,
            dateFrom: null,
            dateUntil: null,
            duration: couponService.ONE_TIME,
        };

        $scope.oneTime = couponService.ONE_TIME;
        $scope.forever = couponService.FOREVER;
        $scope.limited = couponService.LIMITED;

        $scope.typeChange = function() {
            $scope.coupon.typeCoupon = $scope.coupon.switchType ? couponService.TYPE_PERCENTAGE : couponService.TYPE_FIXED;
        };

        $scope.generate = function() {
            $scope.coupon.code = couponService.generateCoupon();
        };

        productsService.getActivePlans().then(function(response) {
            $scope.plans = response.data;
        });

        $scope.save = function() {
            if(!$scope.couponForm.$valid) {
                toaster.pop({type: 'error', body: 'Please fill all fields required'});
                return;
            }

            $scope.apply().then(function () {
                $state.go('coupon.list');
            });
        };

        $scope.apply = function() {
            return $scope.update().then(
                function () {
                    toaster.pop({type: 'success', body: 'Data has been successfully saved'});
                },
                function (err) {
                    // err.data.forEach(function (item) {
                    //     $scope.errors[item.param] = item.msg;
                    // });
                    console.log(err);
                })
        };

        $scope.update = function () {
            return ($stateParams.coupon_id) ? couponService.update($scope.coupon) : couponService.add($scope.coupon);
        };

        pageService
            .reset()
            .setShowBC(true)
            .addCrumb({name: 'Coupon', path: 'coupon.list'});

        if (!$stateParams.coupon_id) {
            pageService
                .addCrumb({name: 'Add', path: 'coupon.add'})
                .setPageTitle('New product');
        } else {
            couponService.get($stateParams.coupon_id).then(function (response) {
                $scope.coupon = response.data;
                if(response.data.dateFrom ) {
                    $scope.coupon.dateFrom = new Date(response.data.dateFrom );
                }
                if(response.data.dateUntil ) {
                    $scope.coupon.dateUntil = new Date(response.data.dateUntil );
                }

                $scope.coupon.switchType = response.data.typeCoupon ? true : false;
                // $scope.product.switchStatus = response.data.product.status ? true : false;
                // $scope.product.switchProduct = response.data.product.typeProduct == productsService.TYPE_PLAN ? true : false;
                // $scope.product.switchBuildType = response.data.product.buildType == productsService.BUILD_INSTALLMENTS ? true : false;

                pageService
                    .addCrumb({name: $scope.coupon.name, path: 'coupon.list'})
                    .setPageTitle('Edit "' + $scope.coupon.name + '"');
            });
        }
    }
}());
(function() {
    'use strict';

    angular
        .module('manage.users.module', []);
}());
(function () {
    'use strict';

    AdminSlapstersListController.$inject = ["$scope", "$state", "pageService", "adminUserService", "NgTableParams", "$mdToast", "$q", "Restangular", "$mdDialog", "$timeout", "$rootScope", "commonDialogService"];
    angular
        .module('manage.users.module')
        .controller('AdminSlapstersListController', AdminSlapstersListController);

    function AdminSlapstersListController($scope, $state, pageService, adminUserService, NgTableParams, $mdToast, $q, Restangular, $mdDialog, $timeout, $rootScope, commonDialogService) {
        angular.extend($scope,  {
            gridData: {
                gridOptions: {data:[]},
                gridActions: {}
            },
            slpasters: [],
            searchKeyword: '',
            dataloaded: false,
            dataReady: false,
            ROLES: adminUserService.ROLES,
            STATUSES: adminUserService.STATUSES,

            buildGridData: buildGridData,
            deleteItem: deleteItem
        });

        pageService
            .reset()
            .addCrumb({name: 'Slpasters', path: 'slapsters.list'})
            .setPageTitle('Slapsters');


        $timeout(activate);
        function activate() {
            reloadData();
            
        }

        function reloadData() {
            $scope.dataloaded = false;
            adminUserService.list()
            .then(function (response) {
                var slapsters = response.data.filter(function(user) {
                    return user.role == 4;
                });
                var accounts = _.groupBy(slapsters, function(user) { return user.businessName; });
                $scope.slpasters = [];
                _.each(accounts, function(account){
                    $scope.slpasters.push({
                        current: account[0],  //TODO: select appropriate slapsters
                        accounts: account
                    });
                });
                
                $scope.dataloaded = true;
                buildGridData();
            });
        }

    
        function buildGridData() {
            var data = {}; 
            
            $scope.dataReady = false;
            $timeout(function(){

                var filtered = $scope.slpasters.filter(function(slapster){
                    var valid = false;
                    var user = slapster.current;
                    if ($scope.searchKeyword.trim() != ''){
                        if (user.businessName.toLowerCase().indexOf($scope.searchKeyword) != -1)
                            valid = true;
                        if (user.name.toLowerCase().indexOf($scope.searchKeyword) != -1)
                            valid = true;
                        if (user.lastName.toLowerCase().indexOf($scope.searchKeyword) != -1)
                            valid = true;
                    } else { valid = true; }
                    return valid;
                })

                data.data =  [];
                _.each(filtered, function(slapster){
                    var user = slapster.current;
                    
                    var role = _.find($scope.ROLES, {id: user.role});
                    user.displayRole = role ? role.name : '';
                    var status = _.find($scope.STATUSES, {id: user.status});
                    user.displayStatus = status ? status.name : '';


                    user.countslapyear = slapster.accounts.length;
                    
                    data.data.push(user);
                });

                data.urlSync = false;
                    $scope.gridData = {
                    gridOptions: data,
                    gridActions: {},
                };
                $scope.dataReady = true;
            })
            // $scope.$apply(function () {
            // });
            
        }

        function deleteItem(event, item) {
            var success = function(){

                item.remove().then(function() {
                    reloadData();
                })
                .catch(function(err) {
                    console.log(err);
                });
            }
            commonDialogService.openDeleteItemDialog(event, 'Do you really want to delete?', success);
        }

    }
}());
(function () {
    'use strict';

    AdminSlapstersItemController.$inject = ["$scope", "$state", "pageService", "adminUserService", "NgTableParams", "$mdToast", "$q", "Restangular", "$mdDialog", "$timeout", "$rootScope", "commonDialogService", "$stateParams", "toaster", "buildData", "productData", "promocodeData", "activityData", "excuteItems", "actionplanService", "paymentsService", "activityService", "apiService"];
    angular
        .module('manage.users.module')
        .controller('AdminSlapstersItemController', AdminSlapstersItemController);

    /* @ngInject */
    function AdminSlapstersItemController($scope, $state, pageService, adminUserService, NgTableParams, $mdToast, $q, Restangular, $mdDialog, $timeout, $rootScope, commonDialogService, $stateParams, toaster, buildData, productData, promocodeData, activityData, excuteItems,  actionplanService, paymentsService, activityService, apiService) {

        angular.extend($scope,  {
            
            user: {},
            buildData: buildData,
            programData: productData.filter(function(pro){return pro.typeProduct == 1}),
            extraProductData: productData.filter(function(pro){return pro.typeProduct == 3 }),
            promocodeData: promocodeData,
            activityData: activityData,
            paymentData: [],
            excuteItems: excuteItems,

            userData: [],

            userID: $stateParams.user_id,
            ROLES: adminUserService.ROLES,
            STATUSES: adminUserService.STATUSES,
            accounts: [],
            selectedUserID: '',
            deleteItem: deleteItem,
            createOrSave: createOrSave,

            changeUser: changeUser,

            //Journey
            isJouneyItemDone: isJouneyItemDone,
            //Success Metrics
            quaters: [{},{},{},{}],
            revenues: null,
            start: new Date(),
            end: new Date(),
            today: new Date(),
            startDate: null,
            
            anualInfo: {},
            //Payment:
            togglePayment: togglePayment,
            charge: charge,
            //Slap manager Milestones
            SMmilestones:[
                {
                    title: "Onboarding Call Set",
                    journey: {section: 'start', name: 'Onboarding Call Set'}
                },
                {
                    title: "Execute Call Set",
                    journey: {section: 'excute', name: 'Execute Call Set'}
                },
                {
                    title: "SE Calls Set",
                    journey: {section: 'start', name: 'SE Calls Set'}
                },
                {
                    title: "SM Calls Set",
                    journey: {section: 'onboard', name: 'SM Calls Set'}
                },
                {
                    title: "SLAPstuff Sent",
                    journey: {section: 'q1', name: 'SLAPstuff Sent'}
                },
                {
                    title: "SLAPbuddy Connected",
                    journey: {section: 'q2', name: 'SLAPbuddy Connected'}
                },
                {
                    title: "Q3 Hustle Call Set",
                    journey: {section: 'q3', name: 'Q3 Hustle Call Set'}
                },
            ],
            toggleSMmilestone: toggleSMmilestone,
            //Activity Grid

            activityGridData: {
                gridOptions: {data:[]},
                gridActions: {}
            },
            activityGridReady: false,
            activitySearchKeyword: '',
            buildActivityGridData: buildActivityGridData,
            activityTypes: activityService.activityTypes,
            activityFilter: {Milestone:true},

            //Activity dialog

            curMode: '',
            openItemDialog: openItemDialog,
            openDeleteItemDialog: openDeleteItemDialog,
            closeDialog: closeDialog,
            updateItem: updateItem,
            formData: {},
        });
        

        pageService
            .reset()
            .setShowBC(true)
            .addCrumb({name: 'Slapster', path: 'slapsters.list'});

        $timeout(activate);
        function activate() {
            reloadData()
            .then(function(){
                activatePayments();

                initializeIdealJourney();

                buildActivityGridData();

                var startDate = ($scope.buildData && $scope.buildData.slapMindset && $scope.buildData.slapMindset.slapStartDate) ? $scope.buildData.slapMindset.slapStartDate : null;
                $scope.startDate = startDate;
                if(!startDate)
                    return;
                angular.extend($scope.quaters[0], _.merge(actionplanService.getNthQuater(startDate, 1), $scope.buildData.actionPlan.whatsHappening[0]));
                angular.extend($scope.quaters[1], _.merge(actionplanService.getNthQuater(startDate, 2), $scope.buildData.actionPlan.whatsHappening[1]));
                angular.extend($scope.quaters[2], _.merge(actionplanService.getNthQuater(startDate, 3), $scope.buildData.actionPlan.whatsHappening[2]));
                angular.extend($scope.quaters[3], _.merge(actionplanService.getNthQuater(startDate, 4), $scope.buildData.actionPlan.whatsHappening[3]));

                $scope.startDate = $scope.quaters[0].start.toDate();
                $scope.endDate = $scope.quaters[3].end.toDate();
                $scope.today = moment.max(moment($scope.startDate), moment()).toDate(); //If the user haven't started the tracking yet.

                $scope.revenues = ($scope.buildData && $scope.buildData.yearGoal && $scope.buildData.yearGoal.revenueStreams && $scope.buildData.yearGoal.revenueStreams.revenues) ? $scope.buildData.yearGoal.revenueStreams.revenues : null;

                doCalculation();
            });
        }

        function initializeIdealJourney() {

            _.each($scope.quaters, function(quater, QID){
                quater.quaterTotal = {};
                quater.quaterClosed = {};
                quater.quaterProgress = {};

                quater.quaterProgress['action'] = quater.quaterTotal['action'] ? quater.quaterClosed['action'] / quater.quaterTotal['action'] * 100 : 0;
                quater.quaterProgress['action'] = quater.quaterProgress['action'].toFixed(2);
                quater.quaterProgress['sales'] = quater.quaterTotal['sales'] ? quater.quaterClosed['sales'] / quater.quaterTotal['sales'] * 100 : 0;
                quater.quaterProgress['sales'] = quater.quaterProgress['sales'].toFixed(2);
                quater.quaterProgress['reflextion'] = quater.quaterTotal['reflextion'] ? quater.quaterClosed['reflextion'] / quater.quaterTotal['reflextion'] * 100 : 0;
                quater.quaterProgress['reflextion'] = quater.quaterProgress['reflextion'].toFixed(2);
            });
        }

        function doCalculation() {

            _.each($scope.quaters, function(quater, QID){
                _.each($scope.excuteItems, function(item){ //Count Actions
                    
                    if (!(moment(item.dueDate).isBetween(quater.start, quater.end, 'day', '[]')))  
                        return;
                    
                    quater.quaterTotal[item.type] ++;

                    if (item.progress == 100)
                        quater.quaterClosed[item.type] ++;
                });

                quater.quaterProgress['action'] = quater.quaterTotal['action'] ? quater.quaterClosed['action'] / quater.quaterTotal['action'] * 100 : 0;
                quater.quaterProgress['action'] = quater.quaterProgress['action'].toFixed(2);
                quater.quaterProgress['sales'] = quater.quaterTotal['sales'] ? quater.quaterClosed['sales'] / quater.quaterTotal['sales'] * 100 : 0;
                quater.quaterProgress['sales'] = quater.quaterProgress['sales'].toFixed(2);
                quater.quaterProgress['reflextion'] = quater.quaterTotal['reflextion'] ? quater.quaterClosed['reflextion'] / quater.quaterTotal['reflextion'] * 100 : 0;
                quater.quaterProgress['reflextion'] = quater.quaterProgress['reflextion'].toFixed(2);
            });
            
            //For Succes Metrics

            _.each($scope.revenues, function(revenue, revenueID){
                revenue.actualUnit = 0;

                revenue.quaterSale = [];
                for(var i = 0; i < 4; i ++)
                    revenue.quaterSale.push({
                        targetUnit: 0,
                        actualUnit: 0
                    });

                _.each($scope.quaters, function(quater, QID){

                    revenue.quaterSale[QID].targetUnit = +quater.units[revenue.name]; 
                    var salesItems = $scope.excuteItems.filter(function(item){ 
                        return +item.title == +revenue.id && 
                                item.type == 'sales' &&
                                moment(item.dueDate).isBetween(quater.start, quater.end, 'day', '[]'); 
                    });
                    
                    
                    _.each(salesItems, function(item){
                        if(item.progress == 100)
                            revenue.quaterSale[QID].actualUnit += item.saleUnit;
                    });

                    revenue.actualUnit += revenue.quaterSale[QID].actualUnit;
                });    
            });
            
            $scope.anualInfo.unit = 0;
            $scope.anualInfo.actualUnit = 0;
            $scope.anualInfo.progress = 0;
            $scope.anualInfo.quaterSale = []
            for(var i = 0; i < 4; i ++)
                $scope.anualInfo.quaterSale.push({
                    targetUnit: 0,
                    actualUnit: 0,
                    progress: 0
                })

            _.each($scope.revenues, function(revenue, revenueID){
                $scope.anualInfo.unit += revenue.unit;  
                $scope.anualInfo.actualUnit += revenue.actualUnit;  

                _.each($scope.quaters, function(quater, QID){
                    $scope.anualInfo.quaterSale[QID].targetUnit += revenue.quaterSale[QID].targetUnit;
                    $scope.anualInfo.quaterSale[QID].actualUnit += revenue.quaterSale[QID].actualUnit;
                });
            });

            $scope.anualInfo.progress = $scope.anualInfo.unit ? $scope.anualInfo.actualUnit / $scope.anualInfo.unit * 100 : 0;
            _.each($scope.quaters, function(quater, QID){
                $scope.anualInfo.quaterSale[QID].progress = $scope.anualInfo.quaterSale[QID].unit ? $scope.anualInfo.quaterSale[QID].actualUnit / $scope.anualInfo.quaterSale[QID].targetUnit * 100 : 0;
            });

        }

        function reloadData() {
            $scope.dataloaded = false;
            return adminUserService.list()
            .then(function (response) {
                $scope.userData = response.data;
                $scope.accounts = [];
                $scope.user = _.find(response.data, {_id: $scope.userID});
                if (!$scope.user)
                    $state.go('slapsters.list');

                $scope.selectedUserID = $scope.user._id;
                $scope.accounts = response.data.filter(function(user){
                    return user.businessName == $scope.user.businessName;
                });

                pageService
                    .addCrumb({name: $scope.user.businessName + ' / ' + ' Created on ' + moment($scope.user.createdAt).format('YYYY-MM-DD'), path: 'users.list'})
                    .setPageTitle($scope.user.businessName);

                
                $scope.dataloaded = true;
                return response;
            });
        }


        function createOrSave(event) {
            update().then(function(){
                toaster.pop({type: 'success', body: 'Success'});
                
            }).catch(function(err){
                console.log(err);
                toaster.pop({type: 'error', body: err.message});
            });
        }

        function update() {
            // return adminUserService.update(Restangular.stripRestangular($scope.user));
            return $scope.user.save();
        }

        function deleteItem(event) {
            var success = function(){

                adminUserService.delete($scope.user).then(function() {
                    toaster.pop({type: 'success', body: 'User deleted.'});
                    $state.go('users.list');
                })
                .catch(function(err) {
                    console.log(err);
                });
            }
            commonDialogService.openDeleteItemDialog(event, 'Do you really want to delete?', success);

        }

        function changeUser(user_id) {
            $state.go('slapsters.list');
            $state.go('slapsters.item', {user_id:user_id});
        }

        function isJouneyItemDone(section, name){
            var isEx = _.find($scope.activityData, {journey : {section:section, name: name}});
            if (isEx)
                return true;
            return false;
        }



        //Payments 
        
        function activatePayments() {
            loadPayments().then(function(){
                $scope.paymentData = paymentsService.transformationData($scope.paymentData);
                _.each($scope.paymentData, function(payment){

                    var coupon = _.find($scope.promocodeData, {_id: payment.couponId });
                    if (coupon)
                        payment.promoCode = coupon.name;
                    else
                        payment.promoCode = '-';
                })
            });
        }

        function loadPayments() {
            return paymentsService.getAllPaymentsByUser($stateParams.user_id)
            .then(function (response) {
                return $scope.paymentData = response.data;
            }).catch(function(err) { console.log(err); $state.go('slapsters'); });
        }

        function togglePayment() {
            $scope.user.pausingPayment = !$scope.user.pausingPayment;
            createOrSave();
             
        }

        function charge (type) {
            
            var productName = ''
            if( type == 0 ) {// 1:! meeting
                productName = 'Missing 1:1 Meeting';
            } else if( type == 1 ) { // Group meeting 
                productName = 'Missing Group Meeting';
            }
            if(!confirm('Charging user for ' + productName))
                return;
            var product = _.find($scope.extraProductData, {productName: productName});
            if(!product) {
                alert('No Product Yet, Add meeting products. Try with seed.');
            }
            paymentsService.chargeUser(product, $scope.userID)
                .then(function(resp){
                    toaster.pop({type: 'success', body: 'Success'});
                    activatePayments();
                }).catch(function(err){
                    toaster.pop({type: 'error', body: 'Payment Failed.'});
                });
        }
        
        function toggleSMmilestone(item) {
            var activity = {
                userId: $scope.userID,
                title: item.title,
                type: 'SLAPmanager',  
                notes: item.title,
                journey: item.journey
            };
            activityService.add(activity)
                .then(function(resp){
                    $scope.activityData.push(resp.data);
                });    
        }

        function buildActivityGridData() {
            var data = {}; 
            
            $scope.activityGridReady = false;
            $timeout(function(){

                var types = $scope.activityTypes
                .filter(function(type){ return type.show == true; })
                .map(function(type){return type.name});

                var filtered = $scope.activityData.filter(function(activity){
                    var valid = false;
                    if ($scope.activitySearchKeyword.trim() != ''){
                        if (activity.title.toLowerCase().indexOf($scope.activitySearchKeyword) != -1)
                            valid = true;
                        if (activity.notes.toLowerCase().indexOf($scope.activitySearchKeyword) != -1)
                            valid = true;
                    } else { valid = true; }

                    if(types.indexOf(activity.type) == -1)
                        valid &= false;
                    else
                        valid &= true;
                    
                    return valid;
                })

                
                data.data = filtered.map(function(act){
                    // var role = _.find($scope.ROLES, {id: user.role});
                    // user.displayRole = role ? role.name : '';
                    var updateBy = _.find($scope.userData, {_id: act.updatedBy});
                    act.updatedByUserName = updateBy ? updateBy.name + ' ' + updateBy.lastName : 'Admin';
                    act.createdAtStr = moment(act.createdAt).format('ll');
                    return act;
                });

                data.urlSync = false;
                $scope.activityGridData = {
                    gridOptions: data,
                    gridActions: {},
                };
                $scope.activityGridReady = true;
            })
            
        }


        function closeDialog() {
            $mdDialog.hide();
        }

        function openItemDialog($event, mode, item) {
            $scope.curMode = mode;
            if ($scope.curMode == 'add') {
                var newForm = {
                    type: '',
                    title: '',
                    notes: '',
                    userId: $scope.userID
                };
                
                $scope.formData = newForm;
            } else if ($scope.curMode == 'edit') {
                $scope.formData = apiService.rest.copy(item);
            }
            $mdDialog.show({
                clickOutsideToClose: true,
                targetEvent: $event,
                scope: $scope, 
                preserveScope: true,
                templateUrl: 'admin/components/dialogs/activity-dialog/activity-dialog.html',
                controller: 'ActivityDialogController',
                autoWrap: true
            });
        }
        
        function updateItem($event) {
            if ($scope.curMode == 'add') {
                
                activityService.add($scope.formData)
                .then(function(response){
                    $scope.activityData.push(response.data);
                    showToast('Added Activity');
                    buildActivityGridData();
                });
            } else if($scope.curMode == 'edit') {
                
                $scope.formData.save().then(function(item){
                    var index = _.findIndex($scope.activityData, {_id: $scope.formData._id});
                    $scope.activityData[index] = $scope.formData;
                    showToast('Updated');
                    buildActivityGridData();
                });
            } 
            $mdDialog.hide($event);
        }
        

        function showToast(message) {
            var toast = $mdToast.simple()
            .textContent(message)
            .action('OK')
            .hideDelay(3000)
            .position("bottom right");

            $mdToast.show(toast).then(function(response) {
                if ( response == 'ok' ) {
                    $mdToast.hide();
                }
            });
        }

        function openDeleteItemDialog($event, item) {
            // Appending dialog to document.body to cover sidenav in docs app
            var confirm = $mdDialog.confirm()
                .title('Confirm Delete')
                .textContent('Would you like to delete?')
                .ariaLabel('Delete')
                .targetEvent($event)
                .ok('Delete')
                .cancel('No');

            $mdDialog.show(confirm).then(function() {
                item.remove().then(function(response) {
                    var index = _.findIndex($scope.activityData, {_id: item._id});
                    $scope.activityData.splice(index, 1);
                    showToast('Deleted Activity');
                    buildActivityGridData();
                    
                });
            }, function() {
                
            });
        }

    }
}());
(function() {
    'use strict';

    angular
        .module('reports.reportBuilder.module',[]);
}());
(function () {
    'use strict';

    ReportBuilderIndex.$inject = ["$scope", "pageService", "NgTableParams"];
    angular
        .module('reports.reportBuilder.module')
        .controller('ReportBuilderIndex', ReportBuilderIndex);

    /* @ngInject */
    function ReportBuilderIndex($scope, pageService, NgTableParams) {
        pageService
            .reset()
            .addCrumb({name: 'Report Builder', path: 'report-builder.index'})
            .setPageTitle('Report Builder');


        // $scope.cols = [
        //     {
        //         field: "userId",
        //         title: "Client ID",
        //         show: true,
        //         format: 'raw',
        //         getValue: getValue
        //     }, {
        //         field: "userName",
        //         title: "Clien name",
        //         show: true,
        //         format: 'raw',
        //         getValue: getValue
        //     }, {
        //         field: "business",
        //         title: "Business name",
        //         show: true,
        //         getValue: getValue
        //     }, {
        //         field: "paymentDate",
        //         title: "Payment date",
        //         show: true,
        //         format: 'raw',
        //         getValue: function (row) {
        //             return moment(row['paymentDate']).format('ll');
        //         }
        //     }, {
        //         field: "programName",
        //         title: "Price for SLAPplan/Build",
        //         show: true,
        //         getValue: getValue
        //     },
        //     {
        //         field: "discount",
        //         title: "Discount/Promo code",
        //         show: true,
        //         format: 'compile',
        //         getValue: function (row) {
        //             return '<a uib-popover="NAME/CODE ' + row['coupon']['name'] + '/' + row['coupon']['code'] + '" popover-trigger="\'mouseenter\'" href="">' + row['discount'] + '</a>';
        //         }
        //     }, {
        //         field: "amountCharges",
        //         title: "Total amount charged",
        //         show: true,
        //         format: 'raw',
        //         getValue: getValue
        //     }, {
        //         field: "amountSaved",
        //         title: "Total amount saved",
        //         show: true,
        //         format: 'raw',
        //         getValue: getValue
        //     }
        // ];

        // function getValue(row) {
        //     return row[this.field];
        // }

        // $scope.list = new NgTableParams({},
        //     {
        //         getData: function (params) {
        //             return financialTrackerService.list()
        //                 .then(function (response) {
        //                     return financialTrackerService.transformationData(response.data);
        //                 });
        //         }
        //     }
        // );

        
    }
}());
(function() {
    'use strict';

    angular
        .module('reports.financialTracker.module',[]);
}());
(function () {
    'use strict';

    FinancialTrackerList.$inject = ["$scope", "BCService", "financialTrackerService", "NgTableParams"];
    angular
        .module('reports.financialTracker.module')
        .controller('FinancialTrackerList', FinancialTrackerList);

    /* @ngInject */
    function FinancialTrackerList($scope, BCService, financialTrackerService, NgTableParams) {
        $scope.cols = [
            {
                field: "userId",
                title: "Client ID",
                show: true,
                format: 'raw',
                getValue: getValue
            }, {
                field: "userName",
                title: "Clien name",
                show: true,
                format: 'raw',
                getValue: getValue
            }, {
                field: "business",
                title: "Business name",
                show: true,
                getValue: getValue
            }, {
                field: "paymentDate",
                title: "Payment date",
                show: true,
                format: 'raw',
                getValue: function (row) {
                    return moment(row['paymentDate']).format('ll');
                }
            }, {
                field: "programName",
                title: "Price for SLAPplan/Build",
                show: true,
                getValue: getValue
            },
            {
                field: "discount",
                title: "Discount/Promo code",
                show: true,
                format: 'compile',
                getValue: function (row) {
                    return '<a uib-popover="NAME/CODE ' + row['coupon']['name'] + '/' + row['coupon']['code'] + '" popover-trigger="\'mouseenter\'" href="">' + row['discount'] + '</a>';
                }
            }, {
                field: "amountCharges",
                title: "Total amount charged",
                show: true,
                format: 'raw',
                getValue: getValue
            }, {
                field: "amountSaved",
                title: "Total amount saved",
                show: true,
                format: 'raw',
                getValue: getValue
            }
        ];

        function getValue(row) {
            return row[this.field];
        }

        $scope.list = new NgTableParams({},
            {
                getData: function (params) {
                    return financialTrackerService.list()
                        .then(function (response) {
                            return financialTrackerService.transformationData(response.data);
                        });
                }
            }
        );

        BCService
            .reset()
            .addCrumb({name: 'Financial Tracker', path: 'financialTracker.list'})
            .setPageTitle('Financial Tracker');
    }
}());
(function () {
    'use strict';

    AdminUsersManageController.$inject = ["$scope", "$state", "pageService", "adminUserService", "NgTableParams", "$mdToast", "$q", "Restangular", "$mdDialog", "$timeout", "$rootScope", "commonDialogService"];
    angular
        .module('manage.users.module')
        .controller('AdminUsersManageController', AdminUsersManageController);

    function AdminUsersManageController($scope, $state, pageService, adminUserService, NgTableParams, $mdToast, $q, Restangular, $mdDialog, $timeout, $rootScope, commonDialogService) {
        angular.extend($scope,  {
            gridData: {
                gridOptions: {data:[]},
                gridActions: {}
            },
            users: [],
            searchKeyword: '',
            dataloaded: false,
            dataReady: false,
            ROLES: adminUserService.ROLES,
            STATUSES: adminUserService.STATUSES,

            buildGridData: buildGridData,
            deleteItem: deleteItem
        });

        pageService
            .reset()
            .addCrumb({name: 'Users', path: 'users.list'})
            .setPageTitle('Manage Users');


        $timeout(activate);
        function activate() {
            reloadData();
            
        }

        function reloadData() {
            $scope.dataloaded = false;
            adminUserService.list()
            .then(function (response) {
                $scope.users = response.data;
                $scope.dataloaded = true;
                buildGridData();
            });
        }

    
        function buildGridData() {
            var data = {}; 
            
            $scope.dataReady = false;
            $timeout(function(){

                var filtered = $scope.users.filter(function(user){
                    var valid = false;
                    if ($scope.searchKeyword.trim() != ''){
                        if (user.businessName.toLowerCase().indexOf($scope.searchKeyword) != -1)
                            valid = true;
                        if (user.name.toLowerCase().indexOf($scope.searchKeyword) != -1)
                            valid = true;
                        if (user.lastName.toLowerCase().indexOf($scope.searchKeyword) != -1)
                            valid = true;
                    } else { valid = true; }
                    return valid;
                })

                data.data = filtered.map(function(user){
                    var role = _.find($scope.ROLES, {id: user.role});
                    user.displayRole = role ? role.name : '';
                    var status = _.find($scope.STATUSES, {id: user.status});
                    user.displayStatus = status ? status.name : '';
                    return user;
                });

                data.urlSync = false;
                    $scope.gridData = {
                    gridOptions: data,
                    gridActions: {},
                };
                $scope.dataReady = true;
            })
            // $scope.$apply(function () {
            // });
            
        }

        function deleteItem(event, item) {
            var success = function(){

                item.remove().then(function() {
                    reloadData();
                })
                .catch(function(err) {
                    console.log(err);
                });
            }
            commonDialogService.openDeleteItemDialog(event, 'Do you really want to delete?', success);
        }

    }
}());
(function () {
    'use strict';

    AdminUsersItemController.$inject = ["$scope", "$state", "pageService", "adminUserService", "NgTableParams", "$mdToast", "$q", "Restangular", "$mdDialog", "$timeout", "$rootScope", "commonDialogService", "$stateParams", "toaster"];
    angular
        .module('manage.users.module')
        .controller('AdminUsersItemController', AdminUsersItemController);

    /* @ngInject */
    function AdminUsersItemController($scope, $state, pageService, adminUserService, NgTableParams, $mdToast, $q, Restangular, $mdDialog, $timeout, $rootScope, commonDialogService, $stateParams, toaster) {
        angular.extend($scope,  {
            user: {},
            userID: $stateParams.user_id,
            ROLES: adminUserService.ROLES,
            STATUSES: adminUserService.STATUSES,

            deleteItem: deleteItem,
            createOrSave: createOrSave,

            showSetPasswordDialog: showSetPasswordDialog,
            password: {
                password: '',
                confirm_password: ''
            },
            setPassword: setPassword
        });


        pageService
            .reset()
            .setShowBC(true)
            .addCrumb({name: 'Users', path: 'users.list'});

        if (!$scope.userID) {
            pageService
                .addCrumb({name: 'Add', path: 'users.add'})
                .setPageTitle('Create User');
            $scope.user = {};
            $scope.user.role = adminUserService.ROLE_ADMIN;
            $scope.user.status = adminUserService.STATUS_ACTIVE;
        } else {
            adminUserService.get($scope.userID).then(function (response) {
                $scope.user = response.data;
                
                pageService
                    .addCrumb({name: $scope.user.name + ' ' + $scope.user.lastName, path: 'users.list'})
                    .setPageTitle('Edit User');
            });
        }

        function createOrSave(event) {
            
            update().then(function(){
                toaster.pop({type: 'success', body: 'User saved.'});
            }).catch(function(err){
                console.log(err);
            });
        }

        function update() {
            if($scope.userID){
                return $scope.user.save();
            } else {
                $scope.user.password="igotaslap!";
                return adminUserService.add($scope.user);
            }
        }
        function deleteItem(event) {
            var success = function(){

                adminUserService.delete($scope.user).then(function() {
                    toaster.pop({type: 'success', body: 'User deleted.'});
                    $state.go('users.list');
                })
                .catch(function(err) {
                    console.log(err);
                });
            }
            commonDialogService.openDeleteItemDialog(event, 'Do you really want to delete?', success);

        }

        function showSetPasswordDialog($event) {
            $scope.password.password = '';
            $scope.password.confirm_password = '';
            
            $mdDialog.show({
                clickOutsideToClose: true,
                targetEvent: $event,
                scope: $scope, 
                preserveScope: true,
                templateUrl: 'admin/components/dialogs/password-dialog/password-dialog.html',
                controller: 'PasswordDialogController',
                autoWrap: true
            });
        }

        function setPassword($event) {
            $scope.user.password = $scope.password.password;
            createOrSave();
            $mdDialog.hide($event);
        }

        function showToast(message) {
            var toast = $mdToast.simple()
            .textContent(message)
            .action('OK')
            .hideDelay(3000)
            .position("bottom right");

            $mdToast.show(toast).then(function(response) {
                if ( response == 'ok' ) {
                    $mdToast.hide();
                }
            });
        }
    }
}());
(function() {
    'use strict';

    angular
        .module('manage.products.module', []);
}());
(function () {
    'use strict';

    AdminProductsManageController.$inject = ["$scope", "$state", "pageService", "productsService", "NgTableParams"];
    angular
        .module('manage.products.module')
        .controller('AdminProductsManageController', AdminProductsManageController);

    // ProductsManageController.$inject = ['productsService'];

    function AdminProductsManageController($scope, $state, pageService, productsService, NgTableParams) {
        // var vm = this;

        function getValue(row) {
            return row[this.field];
        }

        $scope.cols = [
            {
                field: "productName",
                title: "Name",
                show: true,
                format: 'raw',
                getValue: function (row) {
                    return '<a href="' + $state.href('plans.item', {product_id: row['_id']}) + '">' + row['productName'] + '</a>';
                }
            }, {
                field: "productDescription",
                title: "Description",
                show: true,
                format: 'raw',
                getValue: getValue
            }, {
                field: "costProduct",
                title: "Cost Product",
                show: true,
                getValue: getValue
            }, {
                field: "billingFrequency",
                title: "# Billing Frequency",
                show: true,
                getValue: getValue
            }, {
                field: "expertHours",
                title: "Expert Hours",
                show: true,
                getValue: getValue
            }, {
                field: "amountFirstPayment",
                title: "Amount First Payment",
                show: true,
                getValue: getValue
            }, {
                field: "createdAt",
                title: "Date Created",
                show: true,
                getValue: getValue
            }, {
                field: "action",
                title: "",
                format: 'compile',
                getValue: function (row) {
                    return '<button class="btn btn-danger btn-sm" ng-click="delete(row)"><span class="glyphicon glyphicon-trash"></span></button>';
                }
            }
        ];

        $scope.list = new NgTableParams({},
            {
                getData: function (params) {
                    return productsService.list()
                        .then(function (response) {
                            return response.data;
                        });
                }
            }
        );

        $scope.delete = function(row) {
            productsService.delete(row).then(function() {
                $scope.list.reload();
            })
            .catch(function(err) {
                console.log(err);
            });
        };

        pageService
            .reset()
            .addCrumb({name: 'Plans', path: 'plans.list'})
            .setPageTitle('Manage Plans');
    }
}());
(function () {
    'use strict';

    AdminProductsItemController.$inject = ["$scope", "pageService", "productsService", "toaster", "$state", "$stateParams"];
    angular
        .module('manage.products.module')
        .controller('AdminProductsItemController', AdminProductsItemController);

    /* @ngInject */
    function AdminProductsItemController($scope, pageService, productsService, toaster, $state, $stateParams) {
        $scope.product = {
            switchProduct: true,
            switchStatus: false,
            switchBuildType: true,
            // typeProduct: productsService.TYPE_PLAN,
            // status: productsService.ACTIVE,
            billingFrequency : 1,
            // buildType : productsService.BUILD_INSTALLMENTS
        };

        $scope.typeChange = function () {
            $scope.product.typeProduct = $scope.product.switchProduct ? productsService.TYPE_PLAN : productsService.TYPE_BUILD;
            $scope.product.amountFirstPayment = $scope.product.switchProduct ? null : $scope.product.amountFirstPayment;
            // $scope.product.buildType = $scope.product.switchProduct ? null : productsService.BUILD_INSTALLMENTS;
        };

        $scope.statusChange = function () {
            $scope.product.status = $scope.product.switchStatus ? productsService.ACTIVE : productsService.INACTIVE;
        };

        $scope.buildTypeChange = function () {
            $scope.product.buildType = $scope.product.switchBuildType ? productsService.BUILD_INSTALLMENTS : productsService.BUILD_ONETIME;
            $scope.product.billingFrequency = $scope.product.switchBuildType ?  $scope.product.billingFrequency : 1;
            $scope.product.amountFirstPayment = $scope.product.switchBuildType ? $scope.product.amountFirstPayment : null;

        };

        $scope.errors = {};

        $scope.productID = $stateParams.product_id;

        $scope.select_month = productsService.getSelectMonth();

        $scope.save = function () {
            $scope.apply().then(function () {
                $state.go('plans.list');
            });
        };
        $scope.apply = function () {
            return $scope.update().then(
                function (response) {
                    toaster.pop({type: 'success', body: 'Data success saved'});
                },
                function (err) {
                    err.data.forEach(function (item) {
                        $scope.errors[item.param] = item.msg;
                    });
                })
        };

        $scope.update = function () {
            return ($stateParams.product_id) ? productsService.update($scope.product) : productsService.add($scope.product);
        };


        pageService
            .reset()
            .setShowBC(true)
            .addCrumb({name: 'Plans', path: 'plans.list'});

        if (!$stateParams.product_id) {
            pageService
                .addCrumb({name: 'Add', path: 'plans.add'})
                .setPageTitle('New plans');
        } else {
            productsService.get($stateParams.product_id).then(function (response) {
                $scope.product = response.data;
                $scope.product.switchStatus = response.data.status ? true : false;
                $scope.product.switchProduct = response.data.typeProduct == productsService.TYPE_PLAN ? true : false;
                $scope.product.switchBuildType = response.data.buildType == productsService.BUILD_INSTALLMENTS ? true : false;

                pageService
                    .addCrumb({name: $scope.product.productName, path: 'plans.list'})
                    .setPageTitle('Edit "' + $scope.product.productName + '"');
            });
        }

    }
}());
(function() {
    'use strict';

    angular
        .module('manage.emailtemplates.module', []);
}());
(function() {
    'use strict';

    EmailtemplatesManageController.$inject = ["$scope", "$state", "pageService", "NgTableParams", "emailTemplateService"];
    angular
        .module('manage.emailtemplates.module')
        .controller('EmailtemplatesManageController', EmailtemplatesManageController);

    /* @ngInject */
    function EmailtemplatesManageController($scope, $state, pageService, NgTableParams, emailTemplateService) {

        $scope.cols = [
            {
                field: "name",
                title: "Name",
                show: true,
                format: 'raw',
                getValue: function (row) {
                    return '<a href="' + $state.href('emailtemplates.item', {emailtemplate_name: row['name']}) + '">' + row['name'] + '</a>';
                }
            },{
                field: "action",
                title: "",
                format: 'compile',
                getValue: function (row) {
                    return '<a class="btn btn-primary btn-sm" ui-sref="' + $state.href('emailtemplates.item', {emailtemplate_name: row['name']}) + '"><span class="glyphicon glyphicon-edit"></span></a>';
                    // return '<button class="btn btn-danger btn-sm" ng-click="delete(row)"><span class="glyphicon glyphicon-trash"></span></button>';
                }
            }
        ];

        function getValue(row) {
            return row[this.field];
        }

        $scope.list = new NgTableParams({},
            {
                getData: function (params) {
                    return emailTemplateService.list()
                        .then(function (response) {
                            // console.log(response.data);
                            return response.data.map(function(e) { return {name: e}; });
                        });
                }
            }
        );

        // $scope.delete = function(row) {
        //     emailtemplateService.delete(row).then(function() {
        //         $scope.list.reload();
        //     });
        // };

        pageService
            .reset()
            .addCrumb({name: 'Email Templates', path: 'emailtemplates.list'})
            .setPageTitle('Manage Email Templates');
    }
}());
(function() {
    'use strict';

    EmailtemplatesItemController.$inject = ["$scope", "pageService", "toaster", "$stateParams", "$state", "emailTemplateService"];
    angular
        .module('manage.emailtemplates.module')
        .controller('EmailtemplatesItemController', EmailtemplatesItemController);

    /* @ngInject */
    function EmailtemplatesItemController($scope, pageService ,toaster,$stateParams,$state, emailTemplateService) {

        $scope.emailTemplate = {
            
        };

        $scope.froalaOptions = {
            toolbarButtons : ["bold", "italic", "underline", "|", "align", "formatOL", "formatUL"]
        }
        pageService
            .reset()
            .setShowBC(true)
            .addCrumb({name: 'Email Template', path: 'emailtemplates.list'});

        if (!$stateParams.emailtemplate_name) {
            pageService
                .addCrumb({name: 'Add', path: 'emailtemplates.add'})
                .setPageTitle('New Email Temaplate');
        } else {
            emailTemplateService.get($stateParams.emailtemplate_name).then(function (response) {
                $scope.emailTemplate = response.data;

                pageService
                    .addCrumb({name: $stateParams.emailtemplate_name, path: 'emailtemplates.list'})
                    .setPageTitle('Edit "' + $stateParams.emailtemplate_name + '"');
            });
        }

        $scope.save = function() {
            // if(!$scope.emailTemplateForm.$valid) {
            //     toaster.pop({type: 'error', body: 'Please fill all fields required'});
            //     return;
            // }

            $scope.apply().then(function () {
                $state.go('emailtemplates.list');
            });
        };

        $scope.apply = function() {
            return $scope.update().then(
                function () {
                    toaster.pop({type: 'success', body: 'Success'});
                },
                function (err) {
                    // err.data.forEach(function (item) {
                    //     $scope.errors[item.param] = item.msg;
                    // });
                    console.log(err);
                })
        };

        $scope.update = function () {
            return ($stateParams.emailtemplate_name) ? emailTemplateService.update($scope.emailTemplate) : emailTemplateService.add($scope.emailTemplate);
        };

    }
}());
(function() {
    'use strict';

    CouponManageController.$inject = ["$scope", "$state", "pageService", "couponService", "NgTableParams"];
    angular
        .module('manage.coupon.module')
        .controller('CouponManageController', CouponManageController);

    /* @ngInject */
    function CouponManageController($scope, $state, pageService, couponService, NgTableParams) {

        $scope.cols = [
            {
                field: "name",
                title: "Name",
                show: true,
                format: 'raw',
                getValue: function (row) {
                    return '<a href="' + $state.href('coupon.item', {coupon_id: row['_id']}) + '">' + row['name'] + '</a>';
                }
            },{
                field: "typeCoupon",
                title: "Type",
                show: true,
                format: 'raw',
                getValue: function(row) {
                    return row['typeCoupon'] == 1 ? '<p>Percentage</p>' : '<p>Fixed Amount</p>';
                }
            }, {
                field: "amount",
                title: "Amount",
                show: true,
                getValue: getValue
            }, {
                field: "plan",
                title: "Applied on",
                show: true,
                format: 'raw',
                getValue: function(row) {
                    return row['plan'] ? row['plan'].productName : 'all';
                }
            }, {
                field: "redemption",
                title: "Maximum Redemption",
                show: true,
                getValue: getValue
            }, {
                field: "dateFrom",
                title: "Valid From",
                show: true,
                format: 'raw',
                getValue: function(row) {
                    return row['dateFrom'] ? moment(row['dateFrom']).format('ll') : '-';
                }
            },{
                field: "dateUntil",
                title: "Valid Until",
                show: true,
                format: 'raw',
                getValue: function(row) {
                    return row['dateUntil'] ? moment(row['dateUntil']).format('ll') : '-';
                }
            },{
                field: "duration",
                title: "Duration",
                show: true,
                format: 'raw',
                getValue: function(row) {
                    switch(row['duration']) {
                        case 1 : return '1';break;
                        case 2 : return '&#8734;';break;
                        case 3 : return row['durationLimited'];break;
                    }
                }
            },{
                field: "action",
                title: "",
                format: 'compile',
                getValue: function (row) {
                    return '<button class="btn btn-danger btn-sm" ng-click="delete(row)"><span class="glyphicon glyphicon-trash"></span></button>';
                }
            }
        ];

        function getValue(row) {
            return row[this.field];
        }

        $scope.list = new NgTableParams({},
            {
                getData: function (params) {
                    return couponService.list()
                        .then(function (response) {
                            // console.log(response.data);
                            return response.data;
                        });
                }
            }
        );

        $scope.delete = function(row) {
            couponService.delete(row).then(function() {
                $scope.list.reload();
            });
        };

        pageService
            .reset()
            .addCrumb({name: 'Coupon', path: 'coupon.list'})
            .setPageTitle('Manage Coupon');
    }
}());
(function() {
    'use strict';

    angular
        .module('slapsters.main.module', []);
}());
(function () {
    'use strict';

    moduleConfig.$inject = ["$stateProvider"];
    angular
        .module('slapsters.main.module')
        .config(moduleConfig);

    function moduleConfig($stateProvider) {
        $stateProvider
            .state('slapsters', {
                abstract: true,
                data: {
                    access: 'admin',
                    isAdminPage: true
                },
                url: '/slapsters',
                parent: 'admin',
                views: {
                    content: {
                        template: '<ui-view/>'
                    }
                }

            })
            .state('slapsters.list', {
                data: {
                    access: 'admin',
                    isAdminPage: true
                },
                url: '',
                controller: 'AdminSlapstersListController',
                templateUrl: 'admin/pages/slapsters/slapstersMain/list/slapsters-list.html'
            })
            .state('slapsters.item', {
                data: {
                    access: 'admin',
                    isAdminPage: true
                },
                resolve: {
                    excuteItems: ["excuteItemService", "$stateParams", "$state", function (excuteItemService, $stateParams, $state) {
                        return excuteItemService.loadExcuteItemsByUser($stateParams.user_id)
                        .catch(function(err) { console.log(err); $state.go('slapsters'); });
                    }],
                    buildData: ["stepService", "$stateParams", "$state", function (stepService, $stateParams, $state) {
                        return stepService.getAllStepDataByUser($stateParams.user_id).then(function(response){
                            return response.data;
                        }).catch(function(err) { console.log(err); $state.go('slapsters'); });
                    }],
                    productData: ["productsService", "$state", function (productsService, $state) {
                        return productsService.getAllProducts().then(function(response) {
                            return  response.data;
                        }).catch(function(err) { console.log(err); $state.go('slapsters'); });
                    }],
                    promocodeData: ["couponService", "$state", function (couponService, $state) {
                        return couponService.list()
                        .then(function (response) {
                            return response.data;
                        }).catch(function(err) { console.log(err); $state.go('slapsters'); });
                    }],
                    activityData: ["activityService", "$stateParams", "$state", function (activityService, $stateParams, $state) {
                        return activityService.list($stateParams.user_id)
                        .then(function (response) {
                            return response.data;
                        }).catch(function(err) { console.log(err); $state.go('slapsters'); });
                    }]
                },
                url: '/{user_id}',
                controller: 'AdminSlapstersItemController',
                templateUrl: 'admin/pages/slapsters/slapstersMain/item/slapsters-item.html'
            });
    }
}());
(function() {
    'use strict';

    moduleConfig.$inject = ["$stateProvider"];
    angular
        .module('reports.reportBuilder.module')
        .config(moduleConfig);

    /* @ngInject */
    function moduleConfig($stateProvider) {
        $stateProvider
            .state('report-builder',{
                abstract: true,
                data: {
                    access: 'admin',
                    isAdminPage: true
                },
                url: '/report-builder',
                parent: 'admin',
                views: {
                    content: {
                        template: '<ui-view/>'
                    }
                }
            })
            .state('report-builder.index',{
                url: '',
                controller: 'ReportBuilderIndex',
                templateUrl: 'admin/pages/reports/report_builder/index/index.html'
            })
    }
}());

(function() {
    'use strict';

    moduleConfig.$inject = ["$stateProvider"];
    angular
        .module('reports.financialTracker.module')
        .config(moduleConfig);

    /* @ngInject */
    function moduleConfig($stateProvider) {
        // $stateProvider
        //     .state('financial_tracker',{
        //         abstract: true,
        //         data: {
        //             access: '@'
        //         },
        //         url: '/financial_tracker',
        //         parent: 'admin.default',
        //         views: {
        //             content: {
        //                 template: '<ui-view/>'
        //             }
        //         }
        //     })
        //     .state('financial_tracker.list',{
        //         url: '',
        //         controller: 'FinancialTrackerList',
        //         templateUrl: 'pages/reports/financial_tracker/list/index.html'
        //     })
    }
}());

(function () {
    'use strict';

    moduleConfig.$inject = ["$stateProvider"];
    angular
        .module('manage.users.module')
        .config(moduleConfig);

    function moduleConfig($stateProvider) {
        $stateProvider
            .state('users', {
                abstract: true,
                data: {
                    access: 'admin',
                    isAdminPage: true
                },
                url: '/users',
                parent: 'admin',
                views: {
                    content: {
                        template: '<ui-view/>'
                    }
                }

            })
            .state('users.list', {
                data: {
                    access: 'admin',
                    isAdminPage: true
                },
                url: '',
                controller: 'AdminUsersManageController',
                templateUrl: 'admin/pages/manage_data/users/list/users-manage.html'
            })
            .state('users.add', {
                data: {
                    access: 'admin',
                    isAdminPage: true
                },
                url: '/add',
                controller: 'AdminUsersItemController',
                templateUrl: 'admin/pages/manage_data/users/item/users-item.html'
            })
            .state('users.item', {
                data: {
                    access: 'admin',
                    isAdminPage: true
                },
                url: '/{user_id}',
                controller: 'AdminUsersItemController',
                templateUrl: 'admin/pages/manage_data/users/item/users-item.html'
            });
    }
}());
(function () {
    'use strict';

    moduleConfig.$inject = ["$stateProvider"];
    angular
        .module('manage.products.module')
        .config(moduleConfig);

    // moduleConfig.$inject = ['$stateProvider'];

    function moduleConfig($stateProvider) {
        $stateProvider
            .state('plans', {
                abstract: true,
                data: {
                    access: 'admin',
                    isAdminPage: true
                },
                url: '/plans',
                parent: 'admin',
                views: {
                    content: {
                        template: '<ui-view/>'
                    }
                }

            })
            .state('plans.list', {
                data: {
                    access: 'admin',
                    isAdminPage: true
                },
                url: '',
                controller: 'AdminProductsManageController',
                templateUrl: 'admin/pages/manage_data/products/list/products-manage.html'
            })
            .state('plans.add', {
                data: {
                    access: 'admin',
                    isAdminPage: true
                },
                url: '/add',
                controller: 'AdminProductsItemController',
                templateUrl: 'admin/pages/manage_data/products/item/products-item.html'
            })
            .state('plans.item', {
                data: {
                    access: 'admin',
                    isAdminPage: true
                },
                url: '/{product_id}',
                controller: 'AdminProductsItemController',
                templateUrl: 'admin/pages/manage_data/products/item/products-item.html'
            });
    }
}());
(function() {
    'use strict';

    moduleConfig.$inject = ["$stateProvider"];
    angular
        .module('manage.emailtemplates.module')
        .config(moduleConfig);

    /* @ngInject */
    function moduleConfig($stateProvider) {
        $stateProvider
            .state('emailtemplates', {
                abstract: true,
                data: {
                    access: 'admin',
                    isAdminPage: true
                },
                url: '/emailtemplates',
                parent: 'admin',
                views: {
                    content: {
                        template: '<ui-view/>'
                    }
                }

            })
            .state('emailtemplates.list', {
                data: {
                    access: 'admin',
                    isAdminPage: true
                },
                url: '',
                controller: 'EmailtemplatesManageController',
                templateUrl: 'admin/pages/manage_data/emailtemplates/list/emailtemplates-manage.html'
            })
            // .state('emailtemplates.add', {
            //     data: {
            //         access: 'admin',
            //         isAdminPage: true
            //     },
            //     url: '/add',
            //     controller: 'EmailtemplatesItemController',
            //     templateUrl: 'admin/pages/manage_data/emailtemplates/item/emailtemplates-item.html'
            // })
            .state('emailtemplates.item', {
                data: {
                    access: 'admin',
                    isAdminPage: true
                },
                url: '/{emailtemplate_name}',
                controller: 'EmailtemplatesItemController',
                templateUrl: 'admin/pages/manage_data/emailtemplates/item/emailtemplates-item.html'
            });
    }
}());
(function() {
    'use strict';

    moduleConfig.$inject = ["$stateProvider"];
    angular
        .module('manage.coupon.module')
        .config(moduleConfig);

    /* @ngInject */
    function moduleConfig($stateProvider) {
        $stateProvider
            .state('coupon', {
                abstract: true,
                data: {
                    access: 'admin',
                    isAdminPage: true
                },
                url: '/coupon',
                parent: 'admin',
                views: {
                    content: {
                        template: '<ui-view/>'
                    }
                }

            })
            .state('coupon.list', {
                data: {
                    access: 'admin',
                    isAdminPage: true
                },
                url: '',
                controller: 'CouponManageController',
                templateUrl: 'admin/pages/manage_data/coupon/list/coupon-manage.html'
            })
            .state('coupon.add', {
                data: {
                    access: 'admin',
                    isAdminPage: true
                },
                url: '/add',
                controller: 'CouponItemController',
                templateUrl: 'admin/pages/manage_data/coupon/item/coupon-item.html'
            })
            .state('coupon.item', {
                data: {
                    access: 'admin',
                    isAdminPage: true
                },
                url: '/{coupon_id}',
                controller: 'CouponItemController',
                templateUrl: 'admin/pages/manage_data/coupon/item/coupon-item.html'
            });
    }
}());
(function() {
    'use strict';

    angular
        .module('adminapp.pages.main', []);
}());
(function() {
    'use strict';

    angular
        .module('adminapp.pages.main')
        .controller('AdminMainLoginController', AdminMainLoginController);

    AdminMainLoginController.$inject = ['$auth','toaster','userService', 'adminUserService', '$state'];

    function AdminMainLoginController($auth,toaster, userService, adminUserService,$state) {
        var vm = this;
        vm.login = {
            email : '',
            password : ''
        };

        vm.errors = {};

        vm.submit = function() {
            $auth.login(vm.login)
                .then(
                    function(response) {
                        toaster.pop({type: 'success', body: 'Welcome!'});

                        // update user data
                        userService.loadUser(true)
                            .then(function () {
                                $state.go('admin.home');
                            });
                    }
                )
                .catch(function(err) {
                    toaster.pop({type: 'error', body: err.data ? err.data.message : 'Whoops, your password or email are incorrect'});
                });
        }
    }
}());
(function() {

    angular
        .module('adminapp.pages.main')
        .controller('AdminMainIndexController', AdminMainIndexController);

    AdminMainIndexController.$inject = ['pageService'];

    function AdminMainIndexController(pageService, allUsers) {
        pageService
            .reset()
            .setShowBC(true)
            .addCrumb({name: 'Dashboard', path: 'home'})
            .setPageTitle('Dashboard');






        var trendingLineChart;
        var data = {
            labels : ["Apple","Samsung","SONY","Motorola","Nokia","Microsoft","Xiaomi"],
            datasets : [
                {
                    label: "First dataset",
                    fillColor : "rgba(128, 222, 234, 0.6)",
                    strokeColor : "#ffffff",
                    pointColor : "#00bcd4",
                    pointStrokeColor : "#ffffff",
                    pointHighlightFill : "#ffffff",
                    pointHighlightStroke : "#ffffff",
                    data: [100, 50, 20, 40, 80, 50, 80]
                },
                {
                    label: "Second dataset",
                    fillColor : "rgba(128, 222, 234, 0.3)",
                    strokeColor : "#80deea",
                    pointColor : "#00bcd4",
                    pointStrokeColor : "#80deea",
                    pointHighlightFill : "#80deea",
                    pointHighlightStroke : "#80deea",
                    data: [60, 20, 90, 80, 50, 85, 40]
                }
            ]
        };


        var doughnutData = [
            {
                value: 3000,
                color:"#F7464A",
                highlight: "#FF5A5E",
                label: "Mobile"
            },
            {
                value: 500,
                color: "#46BFBD",
                highlight: "#5AD3D1",
                label: "Kitchen"
            },
            {
                value: 1000,
                color: "#FDB45C",
                highlight: "#FFC870",
                label: "Home"
            }

        ];

        /*
        Trending Bar Chart
        */

        var dataBarChart = {
            labels : ["JAN","FEB","MAR","APR","MAY","JUNE"],
            datasets: [
                {
                    label: "Bar dataset",
                    fillColor: "#46BFBD",
                    strokeColor: "#46BFBD",
                    highlightFill: "rgba(70, 191, 189, 0.4)",
                    highlightStroke: "rgba(70, 191, 189, 0.9)",
                    data: [6, 9, 8, 4, 6, 7]
                }
            ]
        };

        /*
        Trending Bar Chart
        */
        var radarChartData = {
            labels: ["Chrome", "Mozilla", "Safari", "IE10", "iPhone"],
            datasets: [
                {
                    label: "First dataset",
                    fillColor: "rgba(255,255,255,0.2)",
                    strokeColor: "#fff",
                    pointColor: "#00796b",
                    pointStrokeColor: "#fff",
                    pointHighlightFill: "#fff",
                    pointHighlightStroke: "#fff",
                    data: [5,6,7,8,6]
                }
            ],
        };
            
        /*
        Pie chart 
        */
        var pieData = [
				{
					value: 300,
					color:"#F7464A",
					highlight: "#FF5A5E",
					label: "America"
				},
				{
					value: 50,
					color: "#46BFBD",
					highlight: "#5AD3D1",
					label: "Canada"
				},
				{
					value: 100,
					color: "#FDB45C",
					highlight: "#FFC870",
					label: "UK"
				},
				{
					value: 40,
					color: "#949FB1",
					highlight: "#A8B3C5",
					label: "Europe"
				},
				{
					value: 120,
					color: "#4D5360",
					highlight: "#616774",
					label: "Australia"
				}

			];
        /*
        Line Chart
        */
        var lineChartData = {
            labels : ["USA","UK","UAE","AUS","IN","SA"],
            datasets : [
                {
                    label: "My dataset",
                    fillColor : "rgba(255,255,255,0)",
                    strokeColor : "#fff",
                    pointColor : "#00796b ",
                    pointStrokeColor : "#fff",
                    pointHighlightFill : "#fff",
                    pointHighlightStroke : "rgba(220,220,220,1)",
                    data: [65, 45, 50, 30, 63, 45]
                }
            ]

        }

        var polarData = [
            {
                value: 4800,
                color:"#f44336",
                highlight: "#FF5A5E",
                label: "USA"
            },
            {
                value: 6000,
                color: "#9c27b0",
                highlight: "#ce93d8",
                label: "UK"
            },
            {
                value: 1800,
                color: "#3f51b5",
                highlight: "#7986cb",
                label: "Canada"
            },
            {
                value: 4000,
                color: "#2196f3 ",
                highlight: "#90caf9",
                label: "Austrelia"
            },
            {
                value: 5500,
                color: "#ff9800",
                highlight: "#ffb74d",
                label: "India"
            },
            {
                value: 2100,
                color: "#009688",
                highlight: "#80cbc4",
                label: "Brazil"
            },
            {
                value: 5000,
                color: "#00acc1",
                highlight: "#4dd0e1",
                label: "China"
            },
            {
                value: 3500,
                color: "#4caf50",
                highlight: "#81c784",
                label: "Germany"
            }
        ];	
		




        var trendingLineChart = document.getElementById("trending-line-chart").getContext("2d");
        window.trendingLineChart = new Chart(trendingLineChart).Line(data, {		
            scaleShowGridLines : true,///Boolean - Whether grid lines are shown across the chart		
            scaleGridLineColor : "rgba(255,255,255,0.4)",//String - Colour of the grid lines		
            scaleGridLineWidth : 1,//Number - Width of the grid lines		
            scaleShowHorizontalLines: true,//Boolean - Whether to show horizontal lines (except X axis)		
            scaleShowVerticalLines: false,//Boolean - Whether to show vertical lines (except Y axis)		
            bezierCurve : true,//Boolean - Whether the line is curved between points		
            bezierCurveTension : 0.4,//Number - Tension of the bezier curve between points		
            pointDot : true,//Boolean - Whether to show a dot for each point		
            pointDotRadius : 5,//Number - Radius of each point dot in pixels		
            pointDotStrokeWidth : 2,//Number - Pixel width of point dot stroke		
            pointHitDetectionRadius : 20,//Number - amount extra to add to the radius to cater for hit detection outside the drawn point		
            datasetStroke : true,//Boolean - Whether to show a stroke for datasets		
            datasetStrokeWidth : 3,//Number - Pixel width of dataset stroke		
            datasetFill : true,//Boolean - Whether to fill the dataset with a colour				
            animationSteps: 15,// Number - Number of animation steps		
            animationEasing: "easeOutQuart",// String - Animation easing effect			
            tooltipTitleFontFamily: "'Roboto','Helvetica Neue', 'Helvetica', 'Arial', sans-serif",// String - Tooltip title font declaration for the scale label		
            scaleFontSize: 12,// Number - Scale label font size in pixels		
            scaleFontStyle: "normal",// String - Scale label font weight style		
            scaleFontColor: "#fff",// String - Scale label font colour
            tooltipEvents: ["mousemove", "touchstart", "touchmove"],// Array - Array of string names to attach tooltip events		
            tooltipFillColor: "rgba(255,255,255,0.8)",// String - Tooltip background colour		
            tooltipFontSize: 12,// Number - Tooltip label font size in pixels
            tooltipFontColor: "#000",// String - Tooltip label font colour		
            tooltipTitleFontSize: 14,// Number - Tooltip title font size in pixels		
            tooltipTitleFontStyle: "bold",// String - Tooltip title font weight style		
            tooltipTitleFontColor: "#000",// String - Tooltip title font colour		
            tooltipYPadding: 8,// Number - pixel width of padding around tooltip text		
            tooltipXPadding: 16,// Number - pixel width of padding around tooltip text		
            tooltipCaretSize: 10,// Number - Size of the caret on the tooltip		
            tooltipCornerRadius: 6,// Number - Pixel radius of the tooltip border		
            tooltipXOffset: 10,// Number - Pixel offset from point x to tooltip edge
            responsive: true
        });

        var doughnutChart = document.getElementById("doughnut-chart").getContext("2d");
        window.myDoughnut = new Chart(doughnutChart).Doughnut(doughnutData, {
            segmentStrokeColor : "#fff",
            tooltipTitleFontFamily: "'Roboto','Helvetica Neue', 'Helvetica', 'Arial', sans-serif",// String - Tooltip title font declaration for the scale label		
            percentageInnerCutout : 50,
            animationSteps : 15,
            segmentStrokeWidth : 4,
            animateScale: true,
            responsive : true
        });

		var trendingBarChart = document.getElementById("trending-bar-chart").getContext("2d");
		window.trendingBarChart = new Chart(trendingBarChart).Bar(dataBarChart,{
			scaleShowGridLines : false,///Boolean - Whether grid lines are shown across the chart
			showScale: true,
			animationSteps:15,
			tooltipTitleFontFamily: "'Roboto','Helvetica Neue', 'Helvetica', 'Arial', sans-serif",// String - Tooltip title font declaration for the scale label		
			responsive : true
		});

		// window.trendingRadarChart = new Chart(document.getElementById("trending-radar-chart").getContext("2d")).Radar(radarChartData, {
		    
		//     angleLineColor : "rgba(255,255,255,0.5)",//String - Colour of the angle line		    
		//     pointLabelFontFamily : "'Roboto','Helvetica Neue', 'Helvetica', 'Arial', sans-serif",// String - Tooltip title font declaration for the scale label	
		//     pointLabelFontColor : "#fff",//String - Point label font colour
		//     pointDotRadius : 4,
		//     animationSteps:15,
		//     pointDotStrokeWidth : 2,
		//     pointLabelFontSize : 12,
		// 	responsive: true
		// });

		// var pieChartArea = document.getElementById("pie-chart-area").getContext("2d");
		// window.pieChartArea = new Chart(pieChartArea).Pie(pieData,{
		// 	responsive: true		
		// });

		// var lineChart = document.getElementById("line-chart").getContext("2d");
		// window.lineChart = new Chart(lineChart).Line(lineChartData, {
		// 	scaleShowGridLines : false,
		// 	bezierCurve : false,
		// 	scaleFontSize: 12,
		// 	scaleFontStyle: "normal",
		// 	scaleFontColor: "#fff",
		// 	responsive: true,			
		// });

		
		if (typeof getContext != "undefined") {
			var polarChartCountry = document.getElementById("polar-chart-country").getContext("2d");
			window.polarChartCountry = new Chart(polarChartCountry).PolarArea(polarData, {
				segmentStrokeWidth : 1,			
				responsive:true
			});
		}






        // Bar chart ( New Clients)

        $("#clients-bar").sparkline([70, 80, 65, 78, 58, 80, 78, 80, 70, 50, 75, 65, 80, 70, 65, 90, 65, 80, 70, 65, 90], {
            type: 'bar',
            height: '25',
            barWidth: 7,
            barSpacing: 4,
            barColor: '#C7FCC9',
            negBarColor: '#81d4fa',
            zeroColor: '#81d4fa',
        });

        //clientsBar.setOptions({chartArea: {width: 100}});


        // Line chart ( New Invoice)
        $("#invoice-line").sparkline([5, 6, 7, 9, 9, 5, 3, 2, 2, 4, 6, 7, 5, 6, 7, 9, 9, 5], {
            type: 'line',
            width: '100%',
            height: '25',
            lineWidth: 2,
            lineColor: '#E1D0FF',
            fillColor: 'rgba(233, 30, 99, 0.4)',
            highlightSpotColor: '#E1D0FF',
            highlightLineColor: '#E1D0FF',
            minSpotColor: '#f44336',
            maxSpotColor: '#4caf50',
            spotColor: '#E1D0FF',
            spotRadius: 4,
            
        // //tooltipFormat: $.spformat('{{value}}', 'tooltip-class')
        });


        // Tristate chart (Today Profit)
        $("#profit-tristate").sparkline([2, 3, 0, 4, -5, -6, 7, -2, 3, 0, 2, 3, -1, 0, 2, 3, 3, -1, 0, 2, 3], {
            type: 'tristate',
            width: '100%',
            height: '25',
            posBarColor: '#B9DBEC',
            negBarColor: '#C7EBFC',
            barWidth: 7,
            barSpacing: 4,
            zeroAxis: false,
            //tooltipFormat: $.spformat('{{value}}', 'tooltip-class')
        });

        // Bar + line composite charts (Total Sales)
        $('#sales-compositebar').sparkline([4, 6, 7, 7, 4, 3, 2, 3, 1, 4, 6, 5, 9, 4, 6, 7, 7, 4, 6, 5, 9, 4, 6, 7], {
            type: 'bar',
            barColor: '#F6CAFD',
            height: '25',
            width: '100%',
            barWidth: '7',
            barSpacing: 2,
            //tooltipFormat: $.spformat('{{value}}', 'tooltip-class')
        });
        $('#sales-compositebar').sparkline([4, 1, 5, 7, 9, 9, 8, 8, 4, 2, 5, 6, 7], {
            composite: true,
            type: 'line',
            width: '100%',
            lineWidth: 2,
            lineColor: '#fff3e0',
            fillColor: 'rgba(153,114,181,0.3)',
            highlightSpotColor: '#fff3e0',
            highlightLineColor: '#fff3e0',
            minSpotColor: '#f44336',
            maxSpotColor: '#4caf50',
            spotColor: '#fff3e0',
            spotRadius: 4,
            //tooltipFormat: $.spformat('{{value}}', 'tooltip-class')
        });


        // Project Line chart ( Project Box )
        $("#project-line-1").sparkline([5, 6, 7, 9, 9, 5, 3, 2, 2, 4, 6, 7, 5, 6, 7, 9, 9, 5, 3, 2, 2, 4, 6, 7], {
            type: 'line',
            width: '100%',
            height: '30',
            lineWidth: 2,
            lineColor: '#00bcd4',
            fillColor: 'rgba(0, 188, 212, 0.5)',
        });

        $("#project-line-2").sparkline([6, 7, 5, 6, 7, 9, 9, 5, 3, 2, 2, 4, 6, 7, 5, 6, 7, 9, 9, 5, 3, 2, 2, 4], {
            type: 'line',
            width: '100%',
            height: '30',
            lineWidth: 2,
            lineColor: '#00bcd4',
            fillColor: 'rgba(0, 188, 212, 0.5)',
            //tooltipFormat: $.spformat('{{value}}', 'tooltip-class')
        });

        $("#project-line-3").sparkline([2, 4, 6, 7, 5, 6, 7, 9, 5, 6, 7, 9, 9, 5, 3, 2, 9, 5, 3, 2, 2, 4, 6, 7], {
            type: 'line',
            width: '100%',
            height: '30',
            lineWidth: 2,
            lineColor: '#00bcd4',
            fillColor: 'rgba(0, 188, 212, 0.5)',
            //tooltipFormat: $.spformat('{{value}}', 'tooltip-class')
        });

        $("#project-line-4").sparkline([9, 5, 3, 2, 2, 4, 6, 7, 5, 6, 7, 9, 5, 6, 7, 9, 9, 5, 3, 2, 2, 4, 6, 7], {
            type: 'line',
            width: '100%',
            height: '30',
            lineWidth: 2,
            lineColor: '#00bcd4',
            fillColor: 'rgba(0, 188, 212, 0.5)',
            //tooltipFormat: $.spformat('{{value}}', 'tooltip-class')
        });




        // Sales chart (Sider Bar Chat)
        $("#sales-line-1").sparkline([5, 6, 7, 9, 9, 5, 3, 2, 2, 4, 6], {
            type: 'line',
            height: '30',
            lineWidth: 2,
            lineColor: '#00bcd4',
            fillColor: 'rgba(0, 188, 212, 0.5)',
            //tooltipFormat: $.spformat('{{value}}', 'tooltip-class')
        });

        $("#sales-line-2").sparkline([6, 7, 5, 6, 7, 9, 9, 5, 3, 2, 2], {
            type: 'line',
            height: '30',
            lineWidth: 2,
            lineColor: '#00bcd4',
            fillColor: 'rgba(0, 188, 212, 0.5)',
            //tooltipFormat: $.spformat('{{value}}', 'tooltip-class')
        });

        $("#sales-bar-1").sparkline([2, 4, 6, 7, 5, 6, 7, 9, 5, 6, 7], {
            type: 'bar',
            height: '25',
            barWidth: 2,
            barSpacing: 1,
            barColor: '#4CAF50',
            //tooltipFormat: $.spformat('{{value}}', 'tooltip-class')
        });

        $("#sales-bar-2").sparkline([9, 5, 3, 2, 2, 4, 6, 7, 5, 6, 7], {
            type: 'bar',
            height: '25',
            barWidth: 2,
            barSpacing: 1,
            barColor: '#FF4081',
            //tooltipFormat: $.spformat('{{value}}', 'tooltip-class')
        });


        /*
        Sparkline sample charts
        */


        $("#bar-chart-sample").sparkline([70, 80, 65, 78, 58, 80, 78, 80, 70, 50, 75, 65, 80, 70], {
            type: 'bar',
            height: '100',
            width: '50%',
            barWidth: 20,
            barSpacing: 10,
            barColor: '#00BCD4',
            //tooltipFormat: $.spformat('{{value}}', 'tooltip-class')
        });


        $("#line-chart-sample").sparkline([5, 6, 7, 9, 9, 5, 3, 2, 2, 4, 6, 7, 5, 6, 7, 9, 9], {
            type: 'line',
            width: '50%',
            height: '100',
            lineWidth: 2,
            lineColor: '#ffcc80',
            fillColor: 'rgba(255, 152, 0, 0.5)',
            highlightSpotColor: '#ffcc80',
            highlightLineColor: '#ffcc80',
            minSpotColor: '#f44336',
            maxSpotColor: '#4caf50',
            spotColor: '#ffcc80',
            spotRadius: 4,
            //tooltipFormat: $.spformat('{{value}}', 'tooltip-class')
        });


        $("#pie-chart-sample").sparkline([50,60,80,110], {
            type: 'pie',
            width: '150',
            height: '150',
            //tooltipFormat: $.spformat('{{value}}', 'tooltip-class'),
            sliceColors: ['#f4511e','#ffea00','#c6ff00','#00e676','#1de9b6','#00e5ff','#651fff','#f50057']
        });

    }






}());
(function() {
    'use strict';

    angular
        .module('adminapp.components', []);
}());
(function() {
    'use strict';

    PasswordDialogController.$inject = ["$scope", "$state"];
    angular
        .module('adminapp.components')
        .controller('PasswordDialogController', PasswordDialogController);

    /* @ngInject */
    function PasswordDialogController($scope, $state) {

    }
}());
(function() {
    'use strict';

    ActivityDialogController.$inject = ["$scope", "$state"];
    angular
        .module('adminapp.components')
        .controller('ActivityDialogController', ActivityDialogController);

    /* @ngInject */
    function ActivityDialogController($scope, $state) {

    }
}());
(function () {
    'use strict';

    angular
        .module('app.directives', []);
})();
(function () {
    'use strict';

    lock.$inject = ["$timeout", "$window"];
    angular
        .module('app.directives')
        .directive('slimscroll', lock);

    function lock($timeout, $window) {
        return {
            restrict: 'A',
            link: function ($scope, $elem, $attr) {
                var off = [];
                var option = {};

                var refresh = function () {
                    $timeout(function () {
                        if (angular.isDefined($attr.slimscroll)) {
                            option = $scope.$eval($attr.slimscroll) || {};
                        } else if ($attr.slimscrollOption) {
                            option = $scope.$eval($attr.slimscrollOption) || {};
                        }

                        var el = angular.element($elem);

                        el.slimScroll({destroy: true});
                        el.slimScroll(option);
                    });
                };

                angular.element($window).bind('resize', function () {
                    if ($attr.slimscroll) {
                        option = $scope.$eval($attr.slimscroll);
                    } else if ($attr.slimscrollOption) {
                        option = $scope.$eval($attr.slimscrollOption);
                    }

                    $($elem).slimScroll(option);
                });

                var registerWatch = function () {
                    if (angular.isDefined($attr.slimscroll) && !option.noWatch) {
                        off.push($scope.$watchCollection($attr.slimscroll, refresh));
                    }

                    if ($attr.slimscrollWatch) {
                        off.push($scope.$watchCollection($attr.slimscrollWatch, refresh));
                    }

                    if ($attr.slimscrolllistento) {
                        off.push($scope.$on($attr.slimscrolllistento, refresh));
                    }
                };

                var destructor = function () {
                    angular.element($elem).slimScroll({destroy: true});
                    off.forEach(function (unbind) {
                        unbind();
                    });
                    off = null;
                };

                off.push($scope.$on('$destroy', destructor));

                registerWatch();
            }
        };
    }
})();
(function () {
    'use strict';

    sideBar.$inject = ["$timeout", "$window"];
    angular
        .module('app.directives')
        .directive('sidebar', sideBar);

    /*
     эффект меню - sidebar-lpanel-effect="push|overlay|shrink"
     тип меню - sidebar-navigtaion-type="vertical|vertical-compact|horizontal"
     расположение sidebar-nav-placement="left|right"
     горизонтальное компактное меню - добавить класс .compact-hmenu to wrapper
     */
    function sideBar($timeout, $window) {
        return {
            link: link,
            restrict: 'AE'
        };

        function link(scope, el, atts) {
            $timeout(function () {

                // active state menu
                el.find('.panel-list li > a').on('click', function () {
                    if ($('body').attr('sidebar-navigation-type') == 'vertical' || $('body').attr('sidebar-navigation-type') == 'vertical-compact') {
                        if ($(this).parent('li.sidebar-has-menu').length === 0) {
                            $(this).parents('.panel-list').find('li.active').removeClass('active');
                            $(this).parent().addClass('active');
                        }
                    }
                });

                // submenu
                el.find('.sidebar-has-menu > a').on('click', function () {
                    if ($(this).closest('.sidebar-minimized-lpanel').length === 0) {

                        $(this).parent('.sidebar-has-menu').parent('ul').find('ul:visible').slideUp('fast');
                        $(this).parent('.sidebar-has-menu').parent('ul').find('.opened').removeClass('opened');

                        var subMenu = $(this).parent('.sidebar-has-menu').find('>.sidebar-sub-menu');

                        if (subMenu.is(':hidden')) {
                            subMenu.slideDown('fast');
                            $(this).parent('.sidebar-has-menu').addClass('opened');
                        } else {
                            $(this).parent('.sidebar-has-menu').parent('ul').find('ul:visible').slideUp('fast');
                            $(this).parent('.sidebar-has-menu').removeClass('opened');
                        }

                    }
                });

                // toggle
                $('.sidebar-toggle a').on('click', function () {

                    if ($('#sidebar-wrapper').attr('sidebar-device-type') !== 'phone') {
                        $('#sidebar-container').toggleClass('sidebar-minimized-lpanel');
                        $('#sidebar-header').toggleClass('sidebar-minimized-lpanel');
                        if ($('body').attr('sidebar-navigation-type') !== 'vertical-compact') {
                            $('body').attr('sidebar-navigation-type', 'vertical-compact')
                        } else {
                            $('body').attr('sidebar-navigation-type', 'vertical')
                        }
                    } else {
                        if (!$('#sidebar-wrapper').hasClass('sidebar-hide-lpanel')) {
                            $('#sidebar-wrapper').addClass('sidebar-hide-lpanel')
                        } else {
                            $('#sidebar-wrapper').removeClass('sidebar-hide-lpanel')
                        }
                    }

                });

                function resizeWrapper() {
                    var windowInnerWidth = $window.innerWidth;
                    if (windowInnerWidth >= 768 && windowInnerWidth <= 1024) {
                        $('#sidebar-wrapper').attr('sidebar-device-type', 'tablet');
                        $('#sidebar-header, #sidebar-container').addClass('sidebar-minimized-lpanel');

                        $('#sidebar-container').attr('sidebar-lpanel-effect','overlay');
                    } else {
                        if (windowInnerWidth < 768) {
                            $('#sidebar-wrapper').attr('sidebar-device-type', 'phone');
                            $('#sidebar-header, #sidebar-container').removeClass('sidebar-minimized-lpanel');

                            $('#sidebar-container').attr('sidebar-lpanel-effect','overlay');
                        } else {
                            if ($('body').attr('sidebar-navigation-type') !== 'vertical-compact') {
                                $('#sidebar-wrapper').attr('sidebar-device-type', 'desktop');
                                $('#sidebar-header, #sidebar-container').removeClass('sidebar-minimized-lpanel');
                            } else {
                                $('#sidebar-wrapper').attr('sidebar-device-type', 'desktop');
                                $('#sidebar-header, #sidebar-container').addClass('sidebar-minimized-lpanel');
                            }

                            $('#sidebar-container').removeAttr('sidebar-lpanel-effect');
                        }
                    }
                }

                function resizeMainContent() {
                    $('#main-content ').css('min-height', $(window).height() - $('#sidebar-header').innerHeight() - 2);
                }

                resizeWrapper();
                resizeMainContent();

                angular.element($window).bind('resize', function () {
                    resizeWrapper();
                    resizeMainContent();
                });


            }, 0);
        }
    }
})();
(function () {
    'use strict';

    select.$inject = ["$timeout", "$window"];
    angular
        .module('app.directives')
        .directive('selectpicker', select);

    /* @ngInject */
    function select($timeout,$window) {
        // Usage:
        //
        // ```html
        // <select selectpicker></select>
        // or
        // <select selectpicker="{option:value}"></select>
        // ```
        // Creates:
        //
        return {
            restrict: 'AE',
            link: link
        };
        //return directive;

        function link($scope, $element, attrs) {
            var
                options = {
                    // noneSelectedText:'select a item',
                    mobile: /mobile/i.test($window.navigator.userAgent)
                },
                attOptions = attrs.selectpicker ? angular.fromJson(attrs.selectpicker) : {};

            function refresh(newVal) {
                $scope.$applyAsync(function () {
                    if (attrs.ngOptions && /track by/.test(attrs.ngOptions)) {
                        $element.val(newVal);
                    }
                    $element.selectpicker('refresh');
                });
            }

            if (attrs.ngModel) {
                $scope.$watch(attrs.ngModel, refresh, true);
            }

            if (attrs.ngDisabled) {
                $scope.$watch(attrs.ngDisabled, refresh, true);
            }

            $scope.$on('$destroy', function () {
                $timeout(function () {
                    $element.selectpicker('destroy');
                });
            });

            $scope.$watch(function() {
                $element.selectpicker('refresh');
            });

            $timeout(function () {

                $element.selectpicker(angular.extend(options, attOptions, $scope.selectpicker));
                $element.selectpicker('refresh');
            });
        }
    }

})();
(function() {
    'use strict';

    angular
        .module('app.directives')
        .directive('scrollTop', scrollTop);

    function scrollTop() {
        return {
            restrict: 'A',
            link: function(scope,el,attr) {
                var body = $("body, html");
                body.animate({scrollTop: 0}, 400);
            }
        }
    }
}());
(function () {
    'use strict';

    resize.$inject = ["$window"];
    angular
        .module('app.directives')
        .directive('resize', resize);

    function resize($window) {
        return {
            link: link,
            restrict: 'AE'
        };

        function link(scope, el, atts) {
            scope.onResize = function () {
                el.css('min-height', $window.innerHeight);
            };

            scope.onResize();

            angular.element($window).bind('resize', function () {
                scope.onResize();
            })
        }
    }
})();
(function() {
    'use strict';

    angular
        .module('app.directives')
        .directive('passCompare', passCompare);

    function passCompare() {
        return {
            require: "ngModel",
            scope: {
                pass: "=passCompare"
            },
            link: function(scope,el,attr,ngModel) {
                ngModel.$validators.passCompare = function(modelValue) {
                    return modelValue == scope.pass;
                };

                scope.$watch("pass", function() {
                    ngModel.$validate();
                });
            }
        }
    }
}());
(function () {
  'use strict';

if (typeof define === "function" && define.amd) {
  // AMD. Register as an anonymous module.
  define(["bootbox"], function (bootbox) {
    window.bootbox = bootbox;
  });
}



angular.module('app.directives')
  /* @ngInject */
  .provider('$ngBootboxConfig', function() {
    
    var defaultLocale = '';
    
    return {
      setDefaultLocale: function(name) {
        defaultLocale = name;
        window.bootbox.setLocale(name);
      },
      addLocale: function (name, values) {
        window.bootbox.addLocale(name, values);
      },
      removeLocale: function (name) {
        window.bootbox.removeLocale(name);
      },
      $get: function() {
        return ({
          getDefaultLocale: function() {
            return defaultLocale;
          }
        });
      }
    };
  })
  
  /* @ngInject */
  .directive('ngBootboxAlert', ["$ngBootbox", function ($ngBootbox) {
    return {
      restrict: 'A',
      scope: false,
      link: function (scope, element, attr) {
        var msg = attr.ngBootboxAlert || "Yo!";
        element.bind('click', function () {
          $ngBootbox.alert(msg);
        });
      }
    };
  }])
  /* @ngInject */
  .directive('ngBootboxConfirm', ["$ngBootbox", function ($ngBootbox) {
    return {
      restrict: 'A',
      scope: {
        actionOK: '&ngBootboxConfirmAction',
        actionCancel: '&ngBootboxConfirmActionCancel'
      },
      link: function (scope, element, attr) {
        var msg = attr.ngBootboxConfirm || "Are you sure?";
        element.bind('click', function () {
          $ngBootbox.confirm(msg).then(function () {
            scope.actionOK();
          }, function () {
            scope.actionCancel();
          });
        });
      }
    };
  }])
  /* @ngInject */
  .directive('ngBootboxPrompt', ["$ngBootbox", function ($ngBootbox) {
    return {
      restrict: 'A',
      scope: {
        actionOK: '&ngBootboxPromptAction',
        actionCancel: '&ngBootboxPromptActionCancel',
        value: '@ngBootboxPromptDefaultValue',
        selectAllOnFocus: '@ngBootboxPromptSelectAllOnFocus'
      },
      link: function (scope, element, attr) {
        var msg = attr.ngBootboxPrompt || "Are you sure?";
        var value = attr.ngBootboxPromptDefaultValue || "";
        var selectAllOnFocus = scope.$eval(attr.ngBootboxPromptSelectAllOnFocus) || false;
        element.bind('click', function () {
          $ngBootbox.prompt(msg, value, selectAllOnFocus).then(function (result) {
            scope.actionOK({ result: result });
          }, function () {
            scope.actionCancel();
          });
        });
      }
    };
  }])
  /* @ngInject */
  .directive('ngBootboxCustomDialog', ["$ngBootbox", function ($ngBootbox) {
  
    return {
      restrict: 'A',
      scope: {
        title: '@ngBootboxTitle',
        buttons: '=ngBootboxButtons',
        className: '@ngBootboxClassName',
        data: '=ngBootboxData',
        options: '=ngBootboxOptions'
      },
      link: function (scope, element, attr) {

        var options = {},
          templateUrl = attr.ngBootboxCustomDialogTemplate;
  
        if (scope.options) {
          options = scope.options;
        }
        if (scope.title) options.title = scope.title;
        if (scope.buttons) options.buttons = scope.buttons;
        if (scope.className) options.className = scope.className;
        if (scope.data) options.data = scope.data;
        if (templateUrl) {
          options.templateUrl = templateUrl;
        } else {
          if (!options.message) {
            options.message = attr.ngBootboxCustomDialog;
          }
        }
  
        element.bind('click', function () {
          $ngBootbox.customDialog(options);
        });
      }
    };
  }])
  /* @ngInject */
  .factory('$ngBootbox', ["$q", "$templateCache", "$compile", "$rootScope", "$http", "$window",'$controller', function ($q, $templateCache, $compile, $rootScope, $http, $window,$controller) {
    return {
      alert: function (msg) {
        var deferred = $q.defer();
        $window.bootbox.alert(msg, function () {
          deferred.resolve();
        });
        return deferred.promise;
      },
      confirm: function (msg) {
        var deferred = $q.defer();
        $window.bootbox.confirm(msg, function (result) {
          if (result) {
            deferred.resolve();
          }
          else {
            deferred.reject();
          }
        });
        return deferred.promise;
      },
      prompt: function (msg, value, selectAllOnFocus) {
        var deferred = $q.defer();
        $window.bootbox.prompt({
          title: msg,
          value: value || '',
          selectAllOnFocus: selectAllOnFocus || false,
          callback: function(result) {
            if (result !== null) {
              deferred.resolve(result);
            }
            else {
              deferred.reject();
            }
          }
        });
        return deferred.promise;
      },
      customDialog: function (options) {
        if (options.templateUrl) {
          getTemplate(options.templateUrl)
            .then(function (template) {
              options.scope = options.scope || $rootScope;
              if (angular.isString(options.controller)) {
                options.controller = $controller(options.controller, {$scope: options.scope}) || undefined;
              }
              // console.log(options);
              options.message = $compile(template)(options.scope,undefined, {transcludeControllers: options.controller});
              $window.bootbox.dialog(options);
            }, function () { //Show default dialog if no template could be found
              $window.bootbox.dialog(options);
            });
        }
        else {
          $window.bootbox.dialog(options);
        }
      },
      setDefaults: function (options) {
        $window.bootbox.setDefaults(options);
      },
      hideAll: function () {
        $window.bootbox.hideAll();
      },
      setLocale: function (name) {
        $window.bootbox.setLocale(name);
      },
      addLocale: function (name, values) {
        $window.bootbox.addLocale(name, values);
      },
      removeLocale: function (name) {
        $window.bootbox.removeLocale(name);
      }
    };
  
    function getTemplate(templateId) {
      var def = $q.defer();
  
      var template = $templateCache.get(templateId);
      if (typeof template === "undefined") {
        $http.get(templateId)
          .success(function (data) {
            $templateCache.put(templateId, data);
            def.resolve(data);
          });
      } else {
        def.resolve(template);
      }
      return def.promise;
    }
  }]);

})();
(function () {
    'use strict';

    formGroup.$inject = ["$rootScope", "$timeout", "$filter"];
    angular
        .module('app.directives')
        .directive('formGroup', formGroup);

    /* @ngInject */
    function formGroup($rootScope, $timeout, $filter) {
        return {
            restrict: 'AE',
            require: '^form',
            transclude: true,
            replace: true,
            link: link,
            template: template,
            scope: {
                validate: '='
            }
        };

        function link($scope, element, attrs, ctrl) {
            var input = attrs.field;

            $scope.input = input;
            $scope.label = attrs.label;

            $scope.error = $filter('value')($scope,'validate.'+input);//$scope.errors[input];
            $scope.$watch('validate', function (value) {
                $scope.error = $filter('value')($scope,'validate.'+input);//$scope.errors[input]
            });
        }

        function template($element, attrs) {
            if ((attrs.horizontal && angular.fromJson(attrs.horizontal) == true) || (attrs.horizontal === undefined && $element.closest('form').hasClass('form-horizontal'))) {
                return '<div class="form-group" ng-class="{\'has-error\':error}">' +
                    '<label class="control-label col-sm-3" for="{{input}}">{{label}}</label>' +
                    '<div class="col-sm-7">' +
                    '<div ng-transclude></div>' +
                    '<div class="help-block help-block-error" ng-show="error" ng-bind-html="error | joinBr"></div>' +
                    '</div>' +
                    '</div>';
            } else {
                return '<div class="form-group" ng-class="{\'has-error\':error}">' +
                    '<label class="control-label" for="{{input}}">{{label}}</label>' +
                    '<div ng-transclude></div>' +
                    '<div class="help-block help-block-error" ng-show="error" ng-bind-html="error | joinBr"></div>' +
                    '</div>';
            }
        }
    }

})();
(function () {
    'use strict';

    editableText.$inject = ["$timeout"];
    angular
        .module('app.directives')
        .directive('editableText', editableText);

    function editableText($timeout) {

        var template = [
            '<span class="aqua-green editable outline-0" ng-hide="showInput" ng-dblclick="edit($event)">{{modelValue}}</span>',
            '<input type="text" class="editable-input outline-0" ng-show="showInput" ng-blur="hideInput()" ng-keydown="$event.keyCode === 27 && hideInput()" ng-model="modelValue">'
        ].join(' ');

        return {
            restrict: 'A',
            scope: {
                modelValue: "="
            },
            link: function (scope, el, attr) {

                scope.showInput = false;
                scope.edit = edit;
                scope.hideInput = hideInput;


                function edit(e) {
                    scope.showInput = true;
                    var inputEl = $(e.target).next();
                    inputEl.css('width', e.target.offsetWidth + 20 + 'px');

                    $timeout( function () {
                        inputEl.focus();
                    });
                }

                function hideInput() {
                    scope.showInput = false;
                }
            },
            template: template
        }
    }
}());
(function () {
    'use strict';

    editableSelect.$inject = ["$timeout"];
    angular
        .module('app.directives')
        .directive('editableSelect', editableSelect);

    function editableSelect($timeout) {

        var template = [
            '<span class="editable outline-0" ng-hide="showField" ng-dblclick="edit($event)">{{valuesList[+modelValue]}}</span>',
            '<select class="editable-select outline-0" ng-show="showField" ng-blur="hideField()" ng-keydown="$event.keyCode === 27 && hideField()" ng-model="modelValue">',
            '<option ng-repeat="item in valuesList" value="{{$index}}">{{item}}</option>',
            '</select>'
        ].join(' ');

        return {
            restrict: 'A',
            scope: {
                modelValue: "=",
                valuesList: "="       // list of all select tag options
            },
            link: function (scope, el, attr) {

                scope.showField = false;
                scope.edit = edit;
                scope.hideField = hideField;


                function edit(e) {
                    scope.showField = true;
                    var inputEl = $(e.target).next();
                    inputEl.css('width', e.target.offsetWidth + 45 + 'px');

                    $timeout( function () {
                        inputEl.focus();
                    });
                }

                function hideField() {
                    scope.showField = false;
                }
            },
            template: template
        }
    }
}());

(function () {
    'use strict';

    checkAsideSection.$inject = ["stepService"];
    angular
        .module('app.directives')
        .directive('checkAsideSection', checkAsideSection);

    function checkAsideSection(stepService) {
        return {
            restrict: 'A',
            scope: {
                stepsGroup: "=checkAsideSection",
                checkSection: "="
            },
            link: function (scope) {
                scope.$on('$stateChangeSuccess', function (event, toState, toParams, fromState, fromParams, options) {
                    if (stepService.checkStepsIsFinishedSection(scope.stepsGroup, fromState.name)) {
                        scope.checkSection = true;
                    }
                });
            }
        }
    }
}());

(function() {
    'use strict';

    angular
        .module('app.directives')
        .directive('asideCollapse', asideCollapse);

    function asideCollapse() {
        return {
            restrict: 'A',
            link: function(scope,el,attr) {
                el.on('click', function() {
                    var parent = el.parent();
                    if(!$(parent).find('.in').length) {
                        $('.in').removeClass('in');
                    }
                });
            }
        }
    }
}());
(function () {
    'use strict';

    angular
        .module('app.services', []);
})();
(function() {
    'use strict';

    financialTrackerService.$inject = ["adminApiService"];
    angular
        .module('app.services')
        .service('financialTrackerService', financialTrackerService);

    function financialTrackerService(adminApiService) {

        this.list = list;
        this.transformationData = transformationData;

        ////////////////

        function list() {
            return adminApiService.rest.all('financialTracker').getList();
        }

        function transformationData(data) {
            var dataTable = [];

            data.forEach(function(item) {
                var row = {coupon:{}};
                row.userId = item.user._id;
                row.userName = item.user.name + " " +  item.user.lastName;
                row.business = item.user.businessName;
                row.paymentDate = item.payment.paymentDate;
                row.programName = item.payment.products.map(function(item) {
                    return item.name;
                }).join('/');
                row.amountCharges = item.payment.amountCharges;
                row.amountSaved = item.payment.amountSaved;
                row.discount = null;
                item.payment.products.forEach(function(product) {
                    if(product.cost) row.discount = product.cost - product.amount;
                });
                row.status = item.payment.status;
                row.coupon.name = item.coupon ? item.coupon.name : '-';
                row.coupon.code = item.coupon ? item.coupon.code : '-';

                dataTable.push(row);
            });

            return dataTable;
        }
    }
}());
(function () {
    'use strict';

    productsService.$inject = ["adminApiService", "apiService"];
    angular
        .module('app.services')
        .service('productsService', productsService);

    /* @ngInject */
    function productsService(adminApiService, apiService) {
        var self = this;

        var SELECT_MONTH = [
            {
                id:1,
            },{
                id:2,
            },{
                id:3,
            },{
                id:4,
            },{
                id:5,
            },{
                id:6,
            },{
                id:7,
            },{
                id:8,
            },{
                id:9,
            },{
                id:10,
            },{
                id:11,
            },{
                id:12,
            }
        ];

        self.TYPE_PLAN = 1;
        self.TYPE_BUILD = 2;
        self.ACTIVE = 1;
        self.INACTIVE = 0;
        self.BUILD_INSTALLMENTS = 1;
        self.BUILD_ONETIME = 2;

        // self.baseProducts = adminApiService.rest.all('products');

        self.getSelectMonth = function () {
            return SELECT_MONTH;
        };

        self.get = function (id) {
            // console.log(product);
            return adminApiService.rest.all('products').one(id).get();
        };

        self.add = function (product) {
            return adminApiService.rest.all('products').post(product);
        };

        self.update = function (product) {
            return adminApiService.rest.all('products').one(product._id).put(product);
        };

        self.list = function () {
            return adminApiService.rest.all('products').getList();
        };

        self.delete = function(product) {
            return adminApiService.rest.all('products').one(product._id).post();
        };

        self.getActivePlans = function() {
            return adminApiService.rest.all('plans').getList();
        };

        self.all = function() {
            return apiService.rest.all('products');
        };

        self.getPlans = function() {
            return self.all().one('plans').getList();
        };

        self.getBuilds = function() {
            return self.all().one('builds').getList();
        }

        self.getAllProducts = function() {
            return self.all().one('all').getList();
        }
    }

}());
(function() {
    'use strict';

    emailTemplateService.$inject = ["adminApiService", "apiService"];
    angular
        .module('app.services')
        .service('emailTemplateService', emailTemplateService);

    /* @ngInject */
    function emailTemplateService(adminApiService, apiService) {
       

        this.list = function() {
            return adminApiService.rest.all('emailtemplates').getList();
        };

        this.get = function(id) {
            return adminApiService.rest.all('emailtemplates').one(id).get();
        };

        this.update = function(emailtemplate) {
            return emailtemplate.save();
        };

        this.delete = function(emailtemplate) {
            return emailtemplate.remove();
        }

    }
}());
(function() {
    'use strict';

    couponService.$inject = ["adminApiService", "apiService"];
    angular
        .module('app.services')
        .service('couponService', couponService);

    /* @ngInject */
    function couponService(adminApiService, apiService) {
        this.TYPE_PERCENTAGE = 1;
        this.TYPE_FIXED = 0;
        this.ONE_TIME = 1;
        this.FOREVER = 2;
        this.LIMITED = 3;

        /**
         * Generate random string
         * @returns {string}
         */
        this.generateCoupon = function() {
            var text = "";
            var string = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";

            for( var i=0; i < 10; i++ )
                text += string.charAt(Math.floor(Math.random() * string.length));

            return text;
        };

        this.add = function(coupon) {
            return adminApiService.rest.all('coupon').post(coupon);
        };

        this.list = function() {
            return adminApiService.rest.all('coupon').getList();
        };

        this.get = function(id) {
            return adminApiService.rest.all('coupon').one(id).get();
        };

        this.update = function(coupon) {
            return coupon.save();
        };

        this.delete = function(coupon) {
            return coupon.remove();
        }

        this.validCoupon = function(code,planId) {
            return apiService.rest.all('coupon').one(code).one(planId).get();
        }
    }
}());
(function() {
    'use strict';

    activityService.$inject = ["adminApiService", "apiService"];
    angular
        .module('app.services')
        .service('activityService', activityService);

    /* @ngInject */
    function activityService(adminApiService, apiService) {
        this.TYPE_PERCENTAGE = 1;
        this.TYPE_FIXED = 0;
        this.ONE_TIME = 1;
        this.FOREVER = 2;
        this.LIMITED = 3;

        this.activityTypes = [
            { id: "Milestone", name: "Milestone", show: true },
            { id: "ActionItem", name: "ActionItem", show: true },
            { id: "Pause & Reflect", name: "Pause & Reflect", show: true },
            { id: "Sales", name: "Sales", show: true },
            { id: "Communication", name: "Communication", show: true },
            { id: "SLAPexpert", name: "SLAPexpert", show: true },
            { id: "SLAPassistant", name: "SLAPassistant", show: true },
            { id: "SLAPworld", name: "SLAPworld", show: true },
            { id: "SLAPschool", name: "SLAPschool", show: true },
            { id: "SLAPmanager", name: "SLAPmanager", show: true }
        ];

        this.add = function(activity) {
            return apiService.rest.all('acitivites').all(activity.userId).post(activity);
        };

        this.list = function(userId) {
            return apiService.rest.all('acitivites').all(userId).getList();
        };

        this.get = function(id,userId) {
            return apiService.rest.all('acitivites').all(userId).one(id).get();
        };

        this.update = function(activity) {
            return activity.save();
        };

        this.delete = function(activity) {
            return activity.remove();
        }

    }
}());
(function() {
    'use strict';

    angular
        .module('app.pages.yearGoal', []);
}());
(function () {
    'use strict';

    YourYearGoalController.$inject = ["$scope", "pageService", "activeStep", "stepService", "$state"];
    angular
        .module('app.pages.yearGoal')
        .controller('YourYearGoalController', YourYearGoalController);

    function YourYearGoalController($scope, pageService, activeStep, stepService, $state) {

        angular.extend($scope, activeStep.model, {
            forward: true,
            sendData: sendData,
            model: {
                first: 'Dropdown Label'
            }
        });

        pageService
            .reset()
            .setShowBC(false)
            .addCrumb({name: 'Dashboard', path: 'home'})
            .setPageTitle('Year Goal');

        function sendData(direction) {
            stepService.updateActiveModel($scope);
            stepService.setFinishActiveStep();

            var nextprevStep = stepService.getNextAndPrevStep();

            if(direction == 'forward')  
				$state.go(nextprevStep.nextStep.sref); 
            else if(direction == 'backward')
				$state.go(nextprevStep.prevStep.sref);
        }
        $scope.$on('$stateChangeStart', function (event, toState, toStateParams) {
            sendData();
        });
    }
}());
(function () {
    'use strict';

    YearGoalQAController.$inject = ["$scope", "pageService", "activeStep", "stepService", "$state"];
    angular
        .module('app.pages.yearGoal')
        .controller('YearGoalQAController', YearGoalQAController);

    /* @ngInject */
    function YearGoalQAController($scope, pageService, activeStep, stepService, $state) {

        angular.extend($scope, activeStep.model, {
            forward: true,
            sendData: sendData
        });

        pageService
            .reset()
            .setShowBC(false)
            .addCrumb({name: 'Dashboard', path: 'home'})
            .setPageTitle('SLAPstatement Q&A');

        function sendData(direction) {
            stepService.updateActiveModel($scope);
            stepService.setFinishActiveStep();

            var nextprevStep = stepService.getNextAndPrevStep();

            if(direction == 'forward')  
				$state.go(nextprevStep.nextStep.sref); 
            else if(direction == 'backward')
				$state.go(nextprevStep.prevStep.sref);
        }
    }

}());
(function () {
    'use strict';

    YearGoalOverviewController.$inject = ["$scope", "pageService", "activeStep", "stepService", "$state"];
    angular
        .module('app.pages.yearGoal')
        .controller('YearGoalOverviewController', YearGoalOverviewController);

    /* @ngInject */
    function YearGoalOverviewController($scope, pageService, activeStep, stepService, $state) {

        angular.extend($scope, activeStep.model, {
            forward: true,
            sendData: sendData
        });

        pageService
            .reset()
            .setShowBC(false)
            .addCrumb({name: 'Dashboard', path: 'home'})
            .setPageTitle('SLAPstatement Q&A');

        function sendData(direction) {
            stepService.updateActiveModel($scope);
            stepService.setFinishActiveStep();

            var nextprevStep = stepService.getNextAndPrevStep();

            if(direction == 'forward')  
				$state.go(nextprevStep.nextStep.sref); 
            else if(direction == 'backward')
				$state.go(nextprevStep.prevStep.sref);
        }
    }

}());
(function () {
    'use strict';

    VariableBusinessExpensesController.$inject = ["$scope", "pageService", "activeStep", "stepService", "$state"];
    angular
        .module('app.pages.yearGoal')
        .controller('VariableBusinessExpensesController', VariableBusinessExpensesController);

    function VariableBusinessExpensesController($scope, pageService, activeStep, stepService,$state) {

        angular.extend($scope, activeStep.model,{
            forward: true,
            sendData:sendData,
            model: {
                first: 'Dropdown Label'
            }
        });

        pageService
            .reset()
            .setShowBC(false)
            .addCrumb({name: 'Dashboard', path: 'home'})
            .setPageTitle('Year Goal');

        function sendData(direction) {
            stepService.updateActiveModel($scope);
            stepService.setFinishActiveStep();

            var nextprevStep = stepService.getNextAndPrevStep();

            if(direction == 'forward')  
				$state.go(nextprevStep.nextStep.sref); 
            else if(direction == 'backward')
				$state.go(nextprevStep.prevStep.sref);
        }
        $scope.$on('$stateChangeStart', function (event, toState, toStateParams) {
            sendData();
        });
    }
}());
(function () {
    'use strict';

    TotalFixedExpensesRevenueController.$inject = ["$scope", "pageService", "activeStep", "stepService", "$state"];
    angular
        .module('app.pages.yearGoal')
        .controller('TotalFixedExpensesRevenueController', TotalFixedExpensesRevenueController);

    function TotalFixedExpensesRevenueController($scope, pageService, activeStep, stepService,$state) {

        angular.extend($scope, activeStep.model,{
            forward: true,
            sendData: sendData,
            total: 0,
            model: {
                first: 'Dropdown Label'
            }
        });

        getData();
        pageService
            .reset()
            .setShowBC(false)
            .addCrumb({name: 'Dashboard', path: 'home'})
            .setPageTitle('Year Goal');

        function getData() {
            // var urls = _.get($state.current, 'params.prev.sref').split('.');
            var url = 'fixedBusinessExpenses';

            // return stepService.getApiData(urls[urls.length - 1])
            return stepService.getApiData(url) //TODO: Think over the dynamics url
                .then(function (response) {
                    if (response && response.status === 200) {
                        // data.personalExpenses.sum hold totla president salary
                        $scope.total = (response.data.fixedBusinessExpenses.expensesSum + response.data.fixedBusinessExpenses.incidentals * 0.01 * response.data.fixedBusinessExpenses.expensesSum) * 12  + (+response.data.fixedBusinessExpenses.profit);
                    }
                });
        }

        function sendData(direction) {
            stepService.updateActiveModel($scope);
            stepService.setFinishActiveStep();

            var nextprevStep = stepService.getNextAndPrevStep();

            if(direction == 'forward')  
				$state.go(nextprevStep.nextStep.sref); 
            else if(direction == 'backward')
				$state.go(nextprevStep.prevStep.sref);
        }
    }
}());
(function () {
    'use strict';

    Step3SummaryController.$inject = ["$scope", "activeStep", "pageService", "stepService", "$state", "userService", "idealclientService", "activityService"];
    angular
        .module('app.pages.yearGoal')
        .controller('Step3SummaryController', Step3SummaryController);

    function Step3SummaryController($scope, activeStep, pageService,stepService, $state, userService, idealclientService, activityService) {

        angular.extend($scope, activeStep.model,{
            model: {
                clients: []
            },
            data: {},
            privilegesData: {
                second: ['providing', 'creating', 'giving', 'helping']
            },
            fifth: ['Market size', 'Local', 'Regional', 'National', 'Global'],
            gender: ['Empty', 'Male', 'Female'],
            maritalStatus: ['Empty', 'Single', 'Married', 'Divorced', 'Widowed'],
            kids: ['Empty', 'None', 'Young', 'Teens',' Adults'],
            employment: ['Empty', 'Doesn’t Work Established Entrepreneur', 'Small Entrepreneur', 'Senior Employed', 'Mid Level Employed', 'Junior Employed'],
            location: ['Empty', 'City', 'Suburbs', 'Rural', 'Other'],
            home: ['Empty', 'Condo', 'Apartment', 'House', 'Farm', 'Other'],
            transit: ['Empty', 'Car', 'Bike', 'Train', 'Walking', 'Planes', 'Other'],
            forward: true,
            sendData: sendData,

            age: ['Age','11-20','21-30','31-40','41-50','51-60','61-70','71-80','81-90'],
            hobbies: ['Hobbies', 'Volunteering',  'Working Out', 'Shopping',  'Traveling',   'Sports',  'Reading',  'Arts & Culture'],
            reads: ['Reads', 'Business Book', 'Self Help Book', 'Magazine', 'Novel', 'Blog Posts',  'Newspaper'],
            
            months: ['','January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],
            monthsShort: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'June', 'July', 'Aug', 'Sept', 'Oct', 'Nov', 'Dec'],
            totalFixedExpenses: '0.00',
            totalTarget: '0.00'
        });

        getData();

        pageService
            .reset()
            .setShowBC(false)
            .addCrumb({name: 'Dashboard', path: 'home'})
            .setPageTitle('Ideal Client');

        function sendData(direction) {
            stepService.updateActiveModel($scope);
            if(stepService.setFinishActiveStep())
                userService.loadUser().then(function(me){
                    activityService.add({
                        userId: me._id,
                        title: 'Step3 Done',
                        type: 'Milestone',  
                        notes: me.businessName + ' finished building Step3.',
                        journey: {section: 'build', name: 'Step3 Done'}})
                        .then(function(){});    
                });
            

            var nextprevStep = stepService.getNextAndPrevStep();

            if(direction == 'forward')  
				$state.go(nextprevStep.nextStep.sref); 
            else if(direction == 'backward')
				$state.go(nextprevStep.prevStep.sref);
        }


        function getData() {

            stepService.getApiData('yourStatement')  //TODO: request api? data service
                .then(function (response) {
                    if (response && response.status === 200) {

                        angular.extend($scope.model, {
                            stepOneSummary: _.get(response, 'data.yourStatement', {})
                        });
                        
                        userService.getUser().then(function (user) {
                            $scope.data.businessName = user.businessName;
                        });
                    }
                });

            stepService.getApiData('allMindsetUser') //TODO: Think over the dynamics url
                .then(function (response) {
                    if (response && response.status === 200) {
                        angular.extend($scope.data, {
                            privilegeInfo: _.get(response, 'data.privilegeAndResponsibility', {})
                        });

                        $scope.slapStartDate = _.get(response, 'data.slapStartDate', []);
                    }
                });

            stepService.getApiData('whoAreYouIdealClient')  //TODO: request api? data service
                .then(function (response) {
                    if (response && response.status === 200) {
                        $scope.model.clients = _.get(response, 'data.whoAreYouIdealClient', []);
                        $scope.client = idealclientService.calcIdealClient($scope.model.clients);
                    }
                });
                
            stepService.getApiData('revenueStreams')  //TODO: request api? data service
                .then(function (response) {
                    if (response && response.status === 200) {
                        $scope.model.revenues = _.get(response, 'data.revenueStreams.revenues', []);
                        $scope.totalTarget = 0;
                        _.each($scope.model.revenues, function(revenue){
                             $scope.totalTarget += (+revenue.sellingPrice * +revenue.unit);
                        })

                    }
                });


            stepService.getApiData('fixedBusinessExpenses')  //TODO: request api? data service
                .then(function (response) {
                    if (response && response.status === 200) {
                        $scope.totalFixedExpenses = (response.data.fixedBusinessExpenses.expensesSum + response.data.fixedBusinessExpenses.incidentals * 0.01 * response.data.fixedBusinessExpenses.expensesSum) * 12  + (+response.data.fixedBusinessExpenses.profit);

                        $scope.profit = response.data.fixedBusinessExpenses.profit;
                    }
                });
        }
        $scope.$on('$stateChangeStart', function (event, toState, toStateParams) {
            sendData();
        });
    }
}());
(function () {
    'use strict';

    SellingPriceController.$inject = ["$scope", "pageService", "activeStep", "stepService", "$state"];
    angular
        .module('app.pages.yearGoal')
        .controller('SellingPriceController', SellingPriceController);
    
    function SellingPriceController($scope, pageService,activeStep,stepService,$state) {

        angular.extend($scope, activeStep.model,{
            forward:true,
            sendData: sendData,
            model: {
                first: 'Dropdown Label'
            }

        });

        pageService
            .reset()
            .setShowBC(false)
            .addCrumb({name: 'Dashboard', path: 'home'})
            .setPageTitle('Year Goal');

        function sendData(direction) {
            stepService.updateActiveModel($scope);
            stepService.setFinishActiveStep();

            var nextprevStep = stepService.getNextAndPrevStep();

            if(direction == 'forward')  
				$state.go(nextprevStep.nextStep.sref); 
            else if(direction == 'backward')
				$state.go(nextprevStep.prevStep.sref);
        }
        $scope.$on('$stateChangeStart', function (event, toState, toStateParams) {
            sendData();
        });
    }
}());
(function () {
    'use strict';

    RevenueStreamsController.$inject = ["$scope", "pageService", "activeStep", "stepService", "$state", "$timeout"];
    angular
        .module('app.pages.yearGoal')
        .controller('RevenueStreamsController', RevenueStreamsController);
    
    function RevenueStreamsController($scope, pageService,activeStep,stepService,$state, $timeout) {

        angular.extend($scope, activeStep.model,{
            forward:true,
            sendData: sendData,
            emptyRevenue: {
                name: '',
                sellingPrice: '0.00',
                variableExpenses: [{
                    expense: '',
                    cost: '0.00'
                }],
                margin: '0.00',
                breakdown: '0.00',
                unit: 0,
                totalVExp: 0,
                deleted: false,
            },
            emptyVariableExpense: {
                expense: '',
                cost: '0.00'
            },
            notifications: [],
            checkRevenueCompleted: checkRevenueCompleted,
            checkVariableExpenseCompleted: checkVariableExpenseCompleted,
            checkValidity: checkValidity,
            deleteRevenue: deleteRevenue,
            deleteVariableExpense: deleteVariableExpense,
            calcHeight: calcHeight,
            doCalculation: doCalculation,
            saved: false
        });
        
        getData();
        
        var nextprevStep = stepService.getNextAndPrevStep();
        var urls = activeStep.sref.split('.');
        $scope.pageName = urls[urls.length - 1];

        if (($scope.pageName == 'revenueStreams') || ($scope.pageName == 'adjustYourYearGoal'))
            $timeout(addNewRevenue);
        pageService
            .reset()
            .setShowBC(false)
            .addCrumb({name: 'Dashboard', path: 'home'})
            .setPageTitle('Year Goal');

        function getData() {
            // var urls = _.get($state.current, 'params.prev.sref').split('.');
            var url = 'fixedBusinessExpenses';

            // return stepService.getApiData(urls[urls.length - 1])
            return stepService.getApiData(url) //TODO: Think over the dynamics url
                .then(function (response) {
                    if (response && response.status === 200) {

                        $scope.totalFixedExpenses = (response.data.fixedBusinessExpenses.expensesSum + response.data.fixedBusinessExpenses.incidentals * 0.01 * response.data.fixedBusinessExpenses.expensesSum) * 12  + (+response.data.fixedBusinessExpenses.profit);
                        doCalculation();
                    }
                });
        }

        function addNewRevenue(model) {
            var index;

            if (model) {
                index = _.findIndex($scope.data.revenues, model);
            }

            var force = false;
            if ($scope.data.revenues.length > 0) {
                
                var lastItem = $scope.data.revenues[$scope.data.revenues.length - 1];
                if (lastItem.id != $scope.data.revenues.length + 1) {  //If no empty item is added
                    force = true;
                }
            }
            if ($scope.data.revenues.length === 0 || $scope.data.revenues.length === index + 1 || force) {
                var revenueModel = _.cloneDeep($scope.emptyRevenue);
                revenueModel.id = $scope.data.revenues.length + 1;
                $scope.data.revenues.push(revenueModel);
            }
        }

        function addNewVariableExpense(revenue, variableExpense) {

            var index;

            if (variableExpense) {
                index = _.findIndex(revenue.variableExpenses, variableExpense);
            }

            var force = false;
            if (revenue.variableExpenses.length > 0) {
                var lastItem = revenue.variableExpenses[revenue.variableExpenses.length - 1];
                if (!angular.equals(lastItem, $scope.emptyVariableExpense)) {
                    force = true;
                }
            }
            if (revenue.variableExpenses.length === 0 || revenue.variableExpenses.length === index + 1 || force) {

                var variableExpense = _.cloneDeep($scope.emptyVariableExpense);
                revenue.variableExpenses.push(variableExpense);
            }
            
        }

        function checkRevenueCompleted(revenue, evt) {
            if ($scope.pageName == 'revenueStreams') {
                if (!_.isEmpty(revenue.name)) {
                    $scope.forward = true;
                    addNewRevenue(revenue);
                    doCalculation();
                } else {
                    $scope.forward = false;
                }
            } else {
                if (!_.isEmpty(revenue.name) && !(+revenue.sellingPrice == 0) && !(+revenue.breakdown == 0)) {
                    if ((revenue.sellingPrice != '') &&
                        (revenue.breakdown != '') &&
                        (revenue.sellingPrice.match(/^\d+(\.)*\d*$/)) &&
                        (revenue.breakdown.match(/^\d+(\.)*\d*$/))) {
                        $scope.forward = true;
                        
                        addNewRevenue(revenue);
                        doCalculation();
                    } else {
                        $scope.forward = false;
                    }
                }
            }
        }
        

        function checkVariableExpenseCompleted(variableExpense, revenue, evt) {
            if (!_.isEmpty(variableExpense.expense) && !(+variableExpense.cost == 0)) { 
                if ((variableExpense.cost != '') &&
                    (variableExpense.cost.match(/^\d+(\.)*\d*$/))) {
                    addNewVariableExpense(revenue, variableExpense);
                    doCalculation();
                    $scope.forward = true;
                }
            } else {
                $scope.$forward = false;
            }
        }

        function checkValidity(value, evt) {
            if (value != '' && !value.match(/^\d+(\.)*\d*$/)) {
                $(evt.target).addClass('invalid');
                addNotification($scope.notifications, {name: 'Invalid Price', type: 'error', message:'Please provide valid Price.', show: true});
                
                $scope.forward = false;
            } else {
                removeNotificaton($scope.notifications, 'Invalid Price');
                $(evt.target).removeClass('invalid');
                $scope.forward = true;
            }
            return value.match(/^\d+(\.)*\d*$/);
        }

        function isExpensesValid() {
            var nonDeleted  = [];
            _.each($scope.data.revenues, function(revenue) {
                if (revenue.deleted == false) 
                    nonDeleted.push(revenue);
            });
            if ($scope.pageName == 'revenueStreams') {
                if ($scope.data.revenues.length == 1) {

                    addNotification($scope.notifications, {name: 'Revenue Length Invalid', type: 'error', message:'Please Fill at least 1 Revenue.', show: true});
                    return false;
                } else {
                    removeNotificaton($scope.notifications, 'Revenue Length Invalid');
                    return true;
                }
            }
            if (($scope.pageName == 'revenueStreams') || ($scope.pageName == 'sellingPrice') ) {
                return true;
            } else if ($scope.pageName == 'variableBusinessExpenses') {
                var valid = true;

                // Validable Expenses valid
                _.each(nonDeleted, function(revenue) {
                    var totalVariableExpenses = 0;
                    _.each(revenue.variableExpenses, function(variableExpense) {
                        totalVariableExpenses += +variableExpense.cost;
                    });

                    revenue.totalVExp = totalVariableExpenses;
                    if (+revenue.sellingPrice != 0) {
                        if (+revenue.sellingPrice <= totalVariableExpenses) {
                            $scope.forward = false;
                            addNotification($scope.notifications, {name: 'Variable Expenses Invalid', type: 'error', message:'Total sum of Variable Expenses should be smaller than Selling Price.', show: true});
                            valid = false;
                        } else {
                            removeNotificaton($scope.notifications, 'Variable Expnses Invalid');
                        }
                    }   
                });
                
                return valid;

            } else {
                var valid = true;

                // Validable Expenses valid
                _.each(nonDeleted, function(revenue) {
                    var totalVariableExpenses = 0;
                    _.each(revenue.variableExpenses, function(variableExpense) {
                        totalVariableExpenses += +variableExpense.cost;
                    });

                    revenue.totalVExp = totalVariableExpenses;
                    if (+revenue.sellingPrice != 0) {
                        if (+revenue.sellingPrice <= totalVariableExpenses) {
                            $scope.forward = false;
                            addNotification($scope.notifications, {name: 'Variable Expenses Invalid', type: 'error', message:'Total sum of Variable Expenses should be smaller than Selling Price.', show: true});
                            valid = false;
                        } else {
                            removeNotificaton($scope.notifications, 'Variable Expnses Invalid');
                        }
                    }   

                    // if (+revenue.sellingPrice == totalVariableExpenses) {
                    //     $scope.forward = false;
                    //     addNotification($scope.notifications, {name: 'Profit None Invalid', type: 'error', message:'Total sum of Variable Expenses should be smaller than Selling Price', show: true});
                    //     valid = false;
                    // } else {
                    //     removeNotificaton($scope.notifications, 'Profit None Invalid');
                    // }
                });
                

                // revenue breakdown should sum 100
                var totalBreakdown = 0;
                _.each(nonDeleted, function(revenue) {
                    totalBreakdown += +revenue.breakdown;
                });
                if (totalBreakdown != 100) {
                    addNotification($scope.notifications, {name: 'Breakdown Invalid', type: 'error', message:'Total Breakdown should be exactly 100.', show: true});
                    valid = false;
                } else {
                    removeNotificaton($scope.notifications, 'Breakdown Invalid');
                }

                $scope.data.totalBreakdown = totalBreakdown.toFixed(2);


                return valid;
            }

        }

        function doCalculation() {
            //Profit margin
            var nonDeleted  = [];
            _.each($scope.data.revenues, function(revenue) {
                if (revenue.deleted == false) 
                    nonDeleted.push(revenue);
            });
            _.each(nonDeleted, function(revenue) {
                var totalVariableExpenses = 0;
                _.each(revenue.variableExpenses, function(variableExpense) {
                    totalVariableExpenses += +variableExpense.cost;
                });
                if (+revenue.sellingPrice != 0) {
                    revenue.margin = (+revenue.sellingPrice - totalVariableExpenses) / +revenue.sellingPrice * 100;
                    revenue.totalVExp = totalVariableExpenses;
                    revenue.margin = revenue.margin.toFixed(2);
                }
            });

            // Breakdown

            var totalBreakdown = 0;
            _.each(nonDeleted, function(revenue) {
                totalBreakdown += +revenue.breakdown;
            });
            $scope.data.totalBreakdown = totalBreakdown.toFixed(2);

            // Unit of Sales

            _.each(nonDeleted, function(revenue) {
                var C = $scope.totalFixedExpenses * +revenue.breakdown * 0.01;
                var A = +revenue.sellingPrice - +revenue.totalVExp;
                if (A != 0){
                    revenue.unit = Math.ceil(C / A);
                }
            });
            

        }

        function deleteRevenue(revenue) {
            revenue.deleted = true;
            doCalculation();
        }


        function deleteVariableExpense(revenue, variableExpense) {
            if (revenue.variableExpenses.length > 1) {
                _.remove(revenue.variableExpenses, function (n) {
                    return n === variableExpense;
                });
                doCalculation();
            }
        }

        function addNotification(notifications, newNotification) {
            var existing = _.find(notifications, {name: newNotification.name});
            if (_.isUndefined(existing)) {
                notifications.push(newNotification);
            } else {
                existing.show = true;
            }
            
        }

        function removeNotificaton(notifications, name) {
            _.remove(notifications, function(notification) {
                return notification.name == name;
            });
        }
        
        function sendData(direction) {
            if (!($scope.pageName == 'profitMargin')) {
                if (!isExpensesValid()){
                    $('body').animate({
                        scrollTop: $("slap-notifications").offset().top
                    }, 400);
                    return false;
                }
            }
            
            stepService.updateActiveModel($scope);
            stepService.setFinishActiveStep();

            var nextprevStep = stepService.getNextAndPrevStep();
            var urls = activeStep.sref.split('.');

            var data = {};

            var revenues = [];
            _.forEach($scope.data.revenues, function (value) {

                if (value.name.trim() != '') {
                    revenues.push(value);
                }

            });
            data.revenues = revenues;


            return stepService.sendApiData('revenueStreams', data)
                .then(function () {
                    $scope.saved = true;
                    stepService.setRequestApiFlag();
                    if(direction == 'forward')  
                        $state.go(nextprevStep.nextStep.sref); 
                    else if(direction == 'backward')
                        $state.go(nextprevStep.prevStep.sref);
                });
        }

        function calcHeight(revenue, $index) {
            if (($scope.pageName == 'profitMargin') || ($scope.pageName == 'revenueBreakdown')){
                return $scope.data.revenues[$index].variableExpenses.length - 1;
            } else {
                return $scope.data.revenues[$index].variableExpenses.length;
            }
            
        }
        $scope.$on('$stateChangeStart', function (event, toState, toStateParams) {
            if ($scope.saved != true) {
                sendData();
            }
        });
    }
}());
(function() {
    'use strict';

    RevenueBreakdownController.$inject = ["$scope", "pageService", "activeStep", "stepService", "$state"];
    angular
        .module('app.pages.yearGoal')
        .controller('RevenueBreakdownController', RevenueBreakdownController);

    function RevenueBreakdownController($scope, pageService, activeStep, stepService,$state) {

        angular.extend($scope, activeStep.model,{
            forward: true,
            sendData:sendData,
            model: {
                first: 'Dropdown Label'
            }
        });

        pageService
            .reset()
            .setShowBC(false)
            .addCrumb({name: 'Dashboard', path: 'home'})
            .setPageTitle('Year Goal');

        function sendData(direction) {
            stepService.updateActiveModel($scope);
            stepService.setFinishActiveStep();

            var nextprevStep = stepService.getNextAndPrevStep();

            if(direction == 'forward')  
				$state.go(nextprevStep.nextStep.sref); 
            else if(direction == 'backward')
				$state.go(nextprevStep.prevStep.sref);
        }
        $scope.$on('$stateChangeStart', function (event, toState, toStateParams) {
            sendData();
        });
    }
}());
(function() {
    'use strict';
    
    ProfitMarginController.$inject = ["$scope", "pageService", "activeStep", "stepService", "$state"];
    angular
        .module('app.pages.yearGoal')
        .controller('ProfitMarginController', ProfitMarginController);
    
    function ProfitMarginController($scope, pageService, activeStep, stepService,$state) {

        angular.extend($scope, activeStep.model,{
            forward: true,
            sendData:sendData,
            model: {
                first: 'Dropdown Label'
            }
        });

        pageService
            .reset()
            .setShowBC(false)
            .addCrumb({name: 'Dashboard', path: 'home'})
            .setPageTitle('Year Goal');

        function sendData(direction) {
            stepService.updateActiveModel($scope);
            stepService.setFinishActiveStep();

            var nextprevStep = stepService.getNextAndPrevStep();

            if(direction == 'forward')  
				$state.go(nextprevStep.nextStep.sref); 
            else if(direction == 'backward')
				$state.go(nextprevStep.prevStep.sref);
        }
        $scope.$on('$stateChangeStart', function (event, toState, toStateParams) {
            sendData();
        });
    }
}());
(function () {
    'use strict';

    PersonalExpensesController.$inject = ["$scope", "$timeout", "pageService", "activeStep", "stepService", "$state"];
    angular
        .module('app.pages.yearGoal')
        .controller('PersonalExpensesController', PersonalExpensesController);

    function PersonalExpensesController($scope,$timeout, pageService, activeStep,stepService, $state) {

        angular.extend($scope, activeStep.model, {
            forward: true,
            sendData: sendData,
            emptyExpense: {
                expense: '',
                monthlyCost: ''
            },
            saved: false

        });
        $scope.notifications = [];
        $scope.checkFormElements = checkFormElements;
        $scope.deleteItem = deleteItem;
        $scope.checkNumberValid = checkNumberValid;

        $timeout(addNewExpense);

        pageService
            .reset()
            .setShowBC(false)
            .addCrumb({name: 'Dashboard', path: 'home'})
            .setPageTitle('SLAP | Personal Expenses');

        function addNewExpense(model) {

            var index;

            if (model) {
                index = _.findIndex($scope.data.expenses, model);
            }

            var force = false;
            if ($scope.data.expenses.length > 0) {
                var lastItem = $scope.data.expenses[$scope.data.expenses.length - 1];
                if (!angular.equals(lastItem, $scope.emptyExpense)) {
                    force = true;
                }
            }
            if ($scope.data.expenses.length === 0 || $scope.data.expenses.length === index + 1 || force) {
                var expenseModel = _.cloneDeep($scope.emptyExpense);
                $scope.data.expenses.push(expenseModel);
            }
        }

        function checkFormElements(model, evt) {

            if (!_.isEmpty(model.expense) && !_.isEmpty(model.monthlyCost)) {
                if ($scope.checkNumberValid(model.monthlyCost, evt)) {
                    addNewExpense(model);
                    expensesSum();
                }
            }
        }
        
        function checkNumberValid(value, evt) {
            if (!value.match(/^\d+(\.)*\d*$/)) {
                $(evt.target).addClass('invalid');
                $scope.forward = false;
                $scope.notifications = [{name: 'Invlide Price', type: 'error', message:'Please provide valid Price.', show: true}];
            } else {
                $(evt.target).removeClass('invalid');
                $scope.forward = true;
                $scope.notifications = [];
            }
            return value.match(/^\d+(\.)*\d*$/);
        }

        function expensesSum() {
            if ($scope.data.expenses.length > 0) {
                $scope.data.expensesSum = 0;
                _.each($scope.data.expenses, function (item) {
                    $scope.data.expensesSum += +item.monthlyCost
                })
            }
        }

        function deleteItem(model) {
            if ($scope.data.expenses.length > 1) {
                _.remove($scope.data.expenses, function (n) {
                    return n === model;
                });
                expensesSum();
            }
        }


        function sendData(direction) {
            stepService.updateActiveModel($scope);
            stepService.setFinishActiveStep();

            var nextprevStep = stepService.getNextAndPrevStep();
            var urls = activeStep.sref.split('.');

            var data = angular.copy($scope.data);

            if ($scope.data.expenses.length > 1) {
                var expenses = [];
                _.forEach($scope.data.expenses, function (value) {

                    if (!angular.equals(value, $scope.emptyExpense)) {
                        expenses.push(value);
                    }

                });
                data.expenses = expenses;
            }


            return stepService.sendApiData(urls[urls.length - 1], data)
                .then(function () {
                    if(direction == 'forward')  
                        $state.go(nextprevStep.nextStep.sref); 
                    else if(direction == 'backward')
                        $state.go(nextprevStep.prevStep.sref);
                    
                    $scope.saved = true;
                });
        }
        $scope.$on('$stateChangeStart', function (event, toState, toStateParams) {
            if ($scope.saved != true) {
                sendData();
            }
        });
    }
}());
(function() {
    'use strict';
    
    FixedBusinessExpensesController.$inject = ["$scope", "$timeout", "pageService", "activeStep", "stepService", "$state"];
    angular
        .module('app.pages.yearGoal')
        .controller('FixedBusinessExpensesController', FixedBusinessExpensesController);
    
    function FixedBusinessExpensesController($scope,$timeout, pageService,activeStep,stepService,$state) {

        angular.extend($scope, activeStep.model, {
            forward: true,
            sendData: sendData,
            emptyExpense: {
                expense: '',
                monthlyCost: ''
            },
            saved: false

        });

        $scope.notifications = [];
        $scope.checkFormElements = checkFormElements;
        $scope.deleteItem = deleteItem;
        $scope.checkNumberValid = checkNumberValid;

        $timeout(addNewExpense);
        getData();

        pageService
            .reset()
            .setShowBC(false)
            .addCrumb({name: 'Dashboard', path: 'home'})
            .setPageTitle('Year Goal');
            
        function getData() {
            // var urls = _.get($state.current, 'params.prev.sref').split('.');
            var url = 'personalExpenses';

            // return stepService.getApiData(urls[urls.length - 1])
            return stepService.getApiData(url) //TODO: Think over the dynamics url
                .then(function (response) {
                    if (response && response.status === 200) {
                        // data.personalExpenses.sum hold totla president salary
                        var presidentSalary = (response.data.personalExpenses.incidentals * 0.01) * response.data.personalExpenses.expensesSum + response.data.personalExpenses.expensesSum;
                        if ($scope.data.expenses[0].expense != "President Salary") {
                            $scope.data.expenses.unshift({expense: "President Salary", monthlyCost: presidentSalary});
                        } else {
                            $scope.data.expenses[0].monthlyCost = presidentSalary;
                        }
                        expensesSum();
                    }
                });
        }

        function addNewExpense(model) {

            var index;

            if (model) {
                index = _.findIndex($scope.data.expenses, model);
            }

            var force = false;
            if ($scope.data.expenses.length > 0) {
                var lastItem = $scope.data.expenses[$scope.data.expenses.length - 1];
                if (!angular.equals(lastItem, $scope.emptyExpense)) {
                    force = true;
                }
            }
            if ($scope.data.expenses.length === 0 || $scope.data.expenses.length === index + 1 || force) {
                var expenseModel = _.cloneDeep($scope.emptyExpense);
                $scope.data.expenses.push(expenseModel);
            }
        }

        function checkFormElements(model, evt) {

            if (!_.isEmpty(model.expense) && !_.isEmpty(model.monthlyCost)) {
                if ($scope.checkNumberValid(model.monthlyCost, evt)) {
                    addNewExpense(model);
                    expensesSum();
                }
            }
        }
        
        function checkNumberValid(value, evt) {
            if (!value.match(/^\d+(\.)*\d*$/)) {
                $(evt.target).addClass('invalid');
                $scope.forward = false;
                $scope.notifications = [{name: 'Invlide Price', type: 'error', message:'Please provide valid Price.', show: true}];
            } else {
                $(evt.target).removeClass('invalid');
                $scope.forward = true;
                $scope.notifications = [];
            }
            return value.match(/^\d+(\.)*\d*$/);
        }

        function expensesSum() {
            if ($scope.data.expenses.length > 0) {
                $scope.data.expensesSum = 0;
                _.each($scope.data.expenses, function (item) {
                    $scope.data.expensesSum += +item.monthlyCost
                })
            }
        }

        function deleteItem(model) {
            if ($scope.data.expenses.length > 1) {
                _.remove($scope.data.expenses, function (n) {
                    return n === model;
                });
                expensesSum();
            }
        }


        function sendData(direction) {
            stepService.updateActiveModel($scope);
            stepService.setFinishActiveStep();

            var nextprevStep = stepService.getNextAndPrevStep();
            var urls = activeStep.sref.split('.');

            var data = angular.copy($scope.data);

            if ($scope.data.expenses.length > 1) {
                var expenses = [];
                _.forEach($scope.data.expenses, function (value) {

                    if (!angular.equals(value, $scope.emptyExpense)) {
                        expenses.push(value);
                    }

                });
                data.expenses = expenses;
            }


            return stepService.sendApiData(urls[urls.length - 1], data)
                .then(function () {
                    $scope.saved = true;
                    if(direction == 'forward')  
                        $state.go(nextprevStep.nextStep.sref); 
                    else if(direction == 'backward')
                        $state.go(nextprevStep.prevStep.sref);
                });
        }
        $scope.$on('$stateChangeStart', function (event, toState, toStateParams) {
            if ($scope.saved != true) {
                sendData();
            }
        });
    }
}());
(function() {
    'use strict';

    CommitYourYearGoalController.$inject = ["$scope", "pageService", "activeStep", "stepService", "$state"];
    angular
        .module('app.pages.yearGoal')
        .controller('CommitYourYearGoalController', CommitYourYearGoalController);

    function CommitYourYearGoalController($scope, pageService, activeStep, stepService, $state) {

        angular.extend($scope, activeStep.model, {
            forward: true,
            sendData: sendData,
            model: {
                first: 'Dropdown Label'
            }
        });

        pageService
            .reset()
            .setShowBC(false)
            .addCrumb({name: 'Dashboard', path: 'home'})
            .setPageTitle('Year Goal');

        function sendData(direction) {
            stepService.updateActiveModel($scope);
            stepService.setFinishActiveStep();

            var nextprevStep = stepService.getNextAndPrevStep();

            if(direction == 'forward')  
				$state.go(nextprevStep.nextStep.sref); 
            else if(direction == 'backward')
				$state.go(nextprevStep.prevStep.sref);
        }
    }
}());
(function () {
    'use strict';

    AdjustYourYearGoalController.$inject = ["$scope", "pageService", "activeStep", "stepService", "$state", "$timeout"];
    angular
        .module('app.pages.yearGoal')
        .controller('AdjustYourYearGoalController', AdjustYourYearGoalController);

    function AdjustYourYearGoalController($scope, pageService, activeStep, stepService, $state, $timeout) {

        angular.extend($scope, activeStep.model,{
            forward:true,
            sendData: sendData,
            emptyRevenue: {
                name: '',
                sellingPrice: '0.00',
                variableExpenses: [{
                    expense: '',
                    cost: '0.00'
                }],
                margin: '0.00',
                breakdown: '0.00',
                unit: 0,
                totalVExp: 0
            },
            emptyVariableExpense: {
                expense: '',
                cost: '0.00'
            },
            notifications: [],
            checkRevenueCompleted: checkRevenueCompleted,
            checkVariableExpenseCompleted: checkVariableExpenseCompleted,
            checkValidity: checkValidity,
            deleteRevenue: deleteRevenue,
            deleteVariableExpense: deleteVariableExpense,
            calcHeight: calcHeight
        });
        getData();
        
        $timeout(addNewRevenue);
        pageService
            .reset()
            .setShowBC(false)
            .addCrumb({name: 'Dashboard', path: 'home'})
            .setPageTitle('Year Goal');

        function getData() {
            // var urls = _.get($state.current, 'params.prev.sref').split('.');
            var url = 'fixedBusinessExpenses';

            // return stepService.getApiData(urls[urls.length - 1])
            return stepService.getApiData(url) //TODO: Think over the dynamics url
                .then(function (response) {
                    if (response && response.status === 200) {

                        $scope.totalFixedExpenses = (response.data.fixedBusinessExpenses.expensesSum + response.data.fixedBusinessExpenses.incidentals * 0.01 * response.data.fixedBusinessExpenses.expensesSum + (+response.data.fixedBusinessExpenses.profit)) * 12
                        doCalculation();
                    }
                });
        }

        function addNewRevenue(model) {
            var index;

            if (model) {
                index = _.findIndex($scope.data.revenues, model);
            }

            var force = false;
            if ($scope.data.revenues.length > 0) {
                var lastItem = $scope.data.revenues[$scope.data.revenues.length - 1];
                if (!angular.equals(lastItem, $scope.emptyRevenue)) {
                    force = true;
                }
            }
            if ($scope.data.revenues.length === 0 || $scope.data.revenues.length === index + 1 || force) {
                var revenueModel = _.cloneDeep($scope.emptyRevenue);
                $scope.data.revenues.push(revenueModel);
            }
        }

        function addNewVariableExpense(revenue, variableExpense) {

            var index;

            if (variableExpense) {
                index = _.findIndex(revenue.variableExpenses, variableExpense);
            }

            var force = false;
            if (revenue.variableExpenses.length > 0) {
                var lastItem = revenue.variableExpenses[revenue.variableExpenses.length - 1];
                if (!angular.equals(lastItem, $scope.emptyVariableExpense)) {
                    force = true;
                }
            }
            if (revenue.variableExpenses.length === 0 || revenue.variableExpenses.length === index + 1 || force) {

                var variableExpense = _.cloneDeep($scope.emptyVariableExpense);
                revenue.variableExpenses.push(variableExpense);
            }
            
        }

        function checkRevenueCompleted(revenue, evt) {
            if (!_.isEmpty(revenue.name) && !(+revenue.sellingPrice == 0) && !(+revenue.breakdown == 0)) {
                if ((revenue.sellingPrice != '') &&
                    (revenue.breakdown != '') &&
                    (revenue.sellingPrice.match(/^\d+(\.)*\d*$/)) &&
                    (revenue.breakdown.match(/^\d+(\.)*\d*$/))) {
                    $scope.forward = true;
                    
                    addNewRevenue(revenue);
                    doCalculation();
                } else {
                    $scope.forward = false;
                }
            }
        }
        

        function checkVariableExpenseCompleted(variableExpense, revenue, evt) {
            if (!_.isEmpty(variableExpense.expense) && !(+variableExpense.cost == 0)) { 
                if ((variableExpense.cost != '') &&
                    (variableExpense.cost.match(/^\d+(\.)*\d*$/))) {
                    addNewVariableExpense(revenue, variableExpense);
                    doCalculation();
                    $scope.forward = true;
                }
            } else {
                $scope.$forward = false;
            }
        }

        function checkValidity(value, evt) {
            if (value != '' && !value.match(/^\d+(\.)*\d*$/)) {
                $(evt.target).addClass('invalid');
                addNotification($scope.notifications, {name: 'Invalid Price', type: 'error', message:'Please provide valid Price.', show: true});
                
                $scope.forward = false;
            } else {
                removeNotificaton($scope.notifications, 'Invalid Price');
                $(evt.target).removeClass('invalid');
                $scope.forward = true;
            }
            return value.match(/^\d+(\.)*\d*$/);
        }

        function isExpensesValid() {
            var valid = true;

            // Validable Expenses valid
            _.each($scope.data.revenues, function(revenue) {
                var totalVariableExpenses = 0;
                _.each(revenue.variableExpenses, function(variableExpense) {
                    totalVariableExpenses += +variableExpense.cost;
                });

                revenue.totalVExp = totalVariableExpenses;
                if (+revenue.sellingPrice != 0) {
                    if (+revenue.sellingPrice <= totalVariableExpenses) {
                        $scope.forward = false;
                        addNotification($scope.notifications, {name: 'Variable Expenses Invalid', type: 'error', message:'Total sum of Variable Expenses should be smaller than Selling Price.', show: true});
                        valid = false;
                    } else {
                        removeNotificaton($scope.notifications, 'Variable Expnses Invalid');
                    }
                }   

                // if (+revenue.sellingPrice == totalVariableExpenses) {
                //     $scope.forward = false;
                //     addNotification($scope.notifications, {name: 'Profit None Invalid', type: 'error', message:'Total sum of Variable Expenses should be smaller than Selling Price', show: true});
                //     valid = false;
                // } else {
                //     removeNotificaton($scope.notifications, 'Profit None Invalid');
                // }
            });
            

            // revenue breakdown should sum 100
            var totalBreakdown = 0;
            _.each($scope.data.revenues, function(revenue) {
                totalBreakdown += +revenue.breakdown;
            });
            if (totalBreakdown != 100) {
                addNotification($scope.notifications, {name: 'Breakdown Invalid', type: 'error', message:'Total Breakdown should be exactly 100.', show: true});
                valid = false;
            } else {
                removeNotificaton($scope.notifications, 'Breakdown Invalid');
            }

            $scope.data.totalBreakdown = totalBreakdown.toFixed(2);


            return valid;
        }

        function doCalculation() {
            //Profit margin
            _.each($scope.data.revenues, function(revenue) {
                var totalVariableExpenses = 0;
                _.each(revenue.variableExpenses, function(variableExpense) {
                    totalVariableExpenses += +variableExpense.cost;
                });
                if (+revenue.sellingPrice != 0) {
                    revenue.margin = (+revenue.sellingPrice - totalVariableExpenses) / +revenue.sellingPrice * 100;
                    revenue.totalVExp = totalVariableExpenses;
                    revenue.margin = revenue.margin.toFixed(2);
                }
            });

            // Breakdown

            var totalBreakdown = 0;
            _.each($scope.data.revenues, function(revenue) {
                totalBreakdown += +revenue.breakdown;
            });
            $scope.data.totalBreakdown = totalBreakdown.toFixed(2);

            // Unit of Sales

            _.each($scope.data.revenues, function(revenue) {
                var C = $scope.totalFixedExpenses * +revenue.breakdown * 0.01;
                var A = +revenue.sellingPrice - +revenue.totalVExp;
                if (A != 0){
                    revenue.unit = Math.ceil(C / A);
                }
            });
            

        }

        function deleteRevenue(revenue) {
            if ($scope.data.revenues.length > 1) {
                _.remove($scope.data.revenues, function (n) {
                    return n === revenue;
                });
                doCalculation();
            }
        }


        function deleteVariableExpense(revenue, variableExpense) {
            if (revenue.variableExpenses.length > 1) {
                _.remove(revenue.variableExpenses, function (n) {
                    return n === variableExpense;
                });
                doCalculation();
            }
        }

        function addNotification(notifications, newNotification) {
            var existing = _.find(notifications, {name: newNotification.name});
            if (_.isUndefined(existing)) {
                notifications.push(newNotification);
            } else {
                existing.show = true;
            }
            
        }

        function removeNotificaton(notifications, name) {
            _.remove(notifications, function(notification) {
                return notification.name == name;
            });
        }
        function sendData(direction) {
            if (!isExpensesValid())
                return false;
            
            stepService.updateActiveModel($scope);
            stepService.setFinishActiveStep();
            stepService.setRequestApiFlag();
            var nextprevStep = stepService.getNextAndPrevStep();
            var urls = activeStep.sref.split('.');

            var data = {};

            if ($scope.data.revenues.length > 1) {
                var revenues = [];
                _.forEach($scope.data.revenues, function (value) {

                    if (!angular.equals(value, $scope.emptyRevenue)) {
                        revenues.push(value);
                    }

                });
                data.revenues = revenues;
            }


            return stepService.sendApiData(urls[urls.length - 1], data)
                .then(function () {
                    if(direction == 'forward')  
                        $state.go(nextprevStep.nextStep.sref); 
                    else
                        $state.go(nextprevStep.prevStep.sref);
                });
        }

        function calcHeight(revenue, $index) {
            return $scope.data.revenues[$index].variableExpenses.length;
        }
        $scope.$on('$stateChangeStart', function (event, toState, toStateParams) {
            sendData();
        });
    }
}());
(function() {
    'use strict';

    angular
        .module('app.pages.statement', []);
}());
(function () {
    'use strict';

    YourStatementController.$inject = ["$scope", "activeStep", "$state", "pageService", "userService", "stepService"];
    angular
        .module('app.pages.statement')
        .controller('YourStatementController', YourStatementController);

    /* @ngInject */
    function YourStatementController($scope, activeStep, $state, pageService, userService, stepService) {

        angular.extend($scope, activeStep.model, {
            privilegesData: {
                second: ['providing', 'creating', 'giving', 'helping']
            },
            forward: true,
            sendData: sendData,
            saved: false
        });

        getData();

        pageService
            .reset()
            .setShowBC(false)
            .addCrumb({name: 'Dashboard', path: 'home'})
            .setPageTitle('SLAP | Your SLAPstatement');

        function sendData(direction) {
            stepService.updateActiveModel($scope);
            stepService.setFinishActiveStep();

            var nextprevStep = stepService.getNextAndPrevStep();
            var urls = activeStep.sref.split('.');

            return stepService.sendApiData(urls[urls.length - 1], $scope.data)
                .then(function () {
                    if(direction == 'forward')  
                        $state.go(nextprevStep.nextStep.sref); 
                    else if(direction == 'backward')
                        $state.go(nextprevStep.prevStep.sref);
                    $state.saved = true;
                });
        }

        function getData() {
            // var urls = _.get($state.current, 'params.prev.sref').split('.');
            var url = 'allMindsetUser';

            userService.loadUser().then(function (user) {
                $scope.data.businessName = user.businessName;
            });

            // return stepService.getApiData(urls[urls.length - 1])
            return stepService.getApiData(url) //TODO: Think over the dynamics url
                .then(function (response) {
                    if (response && response.status === 200) {
                        angular.extend($scope.data, {
                            privilegeInfo: _.get(response, 'data.privilegeAndResponsibility', {})
                        });
                    }
                });
        }
        $scope.$on('$stateChangeStart', function (event, toState, toStateParams) {
            if ($scope.saved != true) {
                sendData();
            }
        });
    }
}());
(function () {
    'use strict';

    Step1SummaryController.$inject = ["$scope", "$state", "pageService", "userService", "stepService", "activeStep", "activityService"];
    angular
        .module('app.pages.statement')
        .controller('Step1SummaryController', Step1SummaryController);

    function Step1SummaryController($scope, $state, pageService, userService, stepService, activeStep, activityService) {

        angular.extend($scope, activeStep.model, {
            privilegesData: {
                second: ['providing', 'creating', 'giving', 'helping']
            },
            data: {},
            forward: true,
            sendData: sendData,
            saved: false
        });

        getData();


        pageService
            .reset()
            .setShowBC(false)
            .addCrumb({name: 'Dashboard', path: 'home'})
            .setPageTitle('Statement')
            .setPageTitle('SLAP | Step 1 SLAPsummary');

        function sendData(direction) {
            stepService.updateActiveModel($scope);
            if(stepService.setFinishActiveStep())

                userService.loadUser().then(function(me){
                    activityService.add({
                        userId: me._id,
                        title: 'Step1 Done',
                        type: 'Milestone',  
                        notes: me.businessName + ' finished building Step1.',
                        journey: {section: 'build', name: 'Step1 Done'}})
                        .then(function(){});    
                });
            
            var nextprevStep = stepService.getNextAndPrevStep();
            var urls = activeStep.sref.split('.');

            return stepService.sendApiData(urls[urls.length - 1], $scope.data)
                .then(function () {
                    if(direction == 'forward')  
                        $state.go(nextprevStep.nextStep.sref); 
                    else if(direction == 'backward')
                        $state.go(nextprevStep.prevStep.sref);
                    $scope.saved = true;
                });
        }

        function getData() {

            stepService.getApiData('allMindsetUser') //TODO: Think over the dynamics url
                .then(function (response) {
                    if (response && response.status === 200) {
                        angular.extend($scope.data, {
                            privilegeInfo: _.get(response, 'data.privilegeAndResponsibility', {})
                        });
                    }
                });

            stepService.getApiData('yourStatement')  //TODO: request api? data service
                .then(function (response) {
                    if (response && response.status === 200) {

                        $scope.data = _.get(response, 'data.yourStatement', {});
                        userService.getUser().then(function (user) {
                            $scope.data.businessName = user.businessName;
                        });
                    }
                });

        }
        $scope.$on('$stateChangeStart', function (event, toState, toStateParams) {
            if ($scope.saved != true) {
                sendData();
            }
        });
    }
}());
(function () {
    'use strict';

    StatementQAController.$inject = ["$scope", "activeStep", "pageService", "stepService", "$state"];
    angular
        .module('app.pages.statement')
        .controller('StatementQAController', StatementQAController);

    /* @ngInject */
    function StatementQAController($scope, activeStep, pageService,stepService, $state) {

        angular.extend($scope, activeStep.model, {
            forward: true,
            sendData: sendData
        });

        pageService
            .reset()
            .setShowBC(false)
            .addCrumb({name: 'Dashboard', path: 'home'})
            .setPageTitle('SLAPstatement Q&A');

        function sendData(direction) {
            stepService.updateActiveModel($scope);
            stepService.setFinishActiveStep();

            var nextprevStep = stepService.getNextAndPrevStep();

            if(direction == 'forward')  
				$state.go(nextprevStep.nextStep.sref); 
            else if(direction == 'backward')
				$state.go(nextprevStep.prevStep.sref);
        }
    }
}());
(function () {
    'use strict';

    StatementOverviewController.$inject = ["$scope", "activeStep", "pageService", "stepService", "$state"];
    angular
        .module('app.pages.statement')
        .controller('StatementOverviewController', StatementOverviewController);

    /* @ngInject */
    function StatementOverviewController($scope, activeStep, pageService, stepService, $state) {

        angular.extend($scope, activeStep.model, {
            forward: true,
            sendData: sendData
        });

        pageService
            .reset()
            .setShowBC(false)
            .addCrumb({name: 'Dashboard', path: 'home'})
            .setPageTitle('SLAPstatement Overview');

        function sendData(direction) {
            stepService.updateActiveModel($scope);
            stepService.setFinishActiveStep();

            var nextprevStep = stepService.getNextAndPrevStep();

            if(direction == 'forward')  
				$state.go(nextprevStep.nextStep.sref); 
            else if(direction == 'backward')
				$state.go(nextprevStep.prevStep.sref);
        }
    }
}());
(function () {
    'use strict';

    StatementController.$inject = ["$scope", "pageService"];
    angular
        .module('app.pages.statement')
        .controller('StatementController', StatementController);

    function StatementController($scope, pageService) {

        angular.extend($scope, {
            model: {
                first: 'Dropdown Label'
            },
            showContent: false,
            showVideoBlock: false,
            showStaticTextBlock: false
        });

        pageService
            .reset()
            .setShowBC(false)
            .addCrumb({name: 'Dashboard', path: 'home'})
            .setPageTitle('Statement');
    }
}());
(function () {
    'use strict';

    CommitToYourController.$inject = ["$scope", "$state", "pageService", "stepService", "userService", "activeStep"];
    angular
        .module('app.pages.statement')
        .controller('CommitToYourController', CommitToYourController);

    function CommitToYourController($scope, $state, pageService, stepService, userService, activeStep) {

        angular.extend($scope, activeStep.model, {
            first: ['does', 'provides', 'sells'],
            third: ['for', 'to'],
            fifth: ['Market size', 'Local', 'Regional', 'National', 'Global'],
            privilegesData: {
                resultList: ['provide for my family', 'create jobs', 'give more to my community', 'helping the economy'],
                second: ['providing', 'creating', 'giving', 'helping']
            },
            showWhatInput: false,
            forward: true,
            sendData: sendData,
            saved: false
        });

        var originalData, originalPrivilagesData;

        userService.getUser().then(function (user) {
            $scope.businessName = user.businessName;
        });

        getData();  // TODO: request api? data service no reload

        function getData() {

            stepService.getApiData('allMindsetUser') //TODO: Think over the dynamics url
                .then(function (response) {
                    if (response && response.status === 200) {
                        angular.extend($scope, {
                            privilegeInfo: _.get(response, 'data.privilegeAndResponsibility', {})
                        });

                        originalPrivilagesData = _.clone($scope.privilegeInfo);
                    }
                });

            return stepService.getApiData('yourStatement') //TODO: Think over the dynamics url
                .then(function (response) {
                    if (response && response.status === 200) {
                        $scope.data = _.get(response, 'data.yourStatement', []);
                        originalData = _.clone($scope.data);
                    }
                });
        }

        pageService
            .reset()
            .setShowBC(false)
            .addCrumb({name: 'Dashboard', path: 'home'})
            .setPageTitle('Statement');

        function sendData(direction) {
            stepService.updateActiveModel($scope);
            stepService.setFinishActiveStep();

            var nextprevStep = stepService.getNextAndPrevStep();

            if (angular.equals($scope.data, originalData) && angular.equals($scope.privilegeInfo, originalPrivilagesData)) {
                if(direction == 'forward')
                    $state.go(nextprevStep.nextStep.sref);
                else if(direction == 'backward')
                    $state.go(nextprevStep.prevStep.sref);
            } else {
                updateData().then(function () {
                    stepService.setRequestApiFlag();
                    if(direction == 'forward')
                        $state.go(nextprevStep.nextStep.sref);
                    else if(direction == 'backward')
                        $state.go(nextprevStep.prevStep.sref);
                });
            }
        }

        function updateData() {
            return new Promise(function (resolve, reject) {

                var statementResolve = true;
                var privilegesResolve = true;

                if (!angular.equals($scope.data, originalData)) {

                    statementResolve = false;

                    stepService.sendApiData('yourStatement', $scope.data)
                        .then(function () {
                            statementResolve = true;
                            if (privilegesResolve) {
                                resolve();
                            }
                        })
                        .catch(function () {
                            reject();
                        });
                }

                if (!angular.equals($scope.privilegeInfo, originalPrivilagesData)) {

                    privilegesResolve = false;

                    if ($scope.privilegeInfo.resultId !== originalPrivilagesData.resultId) {
                        var oldKey = getKeyById(originalPrivilagesData.resultId); // field in which the 'primary driver' was stored
                        var newKey = getKeyById($scope.privilegeInfo.resultId);   // field in which it is now
                        var temp = _.clone($scope.privilegeInfo[newKey]);
                        $scope.privilegeInfo[newKey] = 'My primary driver';
                        $scope.privilegeInfo[oldKey] = temp;
                    }

                    // update result label value for privileges and responsibility
                    $scope.privilegeInfo.result = $scope.privilegesData.resultList[+$scope.privilegeInfo.resultId];

                    stepService.sendApiData('privilegeAndResponsibility', $scope.privilegeInfo)
                        .then(function () {
                            privilegesResolve = true;
                            if (statementResolve) {
                                resolve();
                            }
                        })
                        .catch(function () {
                            reject();
                        });
                }
            });
        }

        function getKeyById(id) {

            var res;

            switch (id) {

                case '0':
                    res = 'first';
                    break;

                case '1':
                    res = 'second';
                    break;

                case '2':
                    res = 'third';
                    break;

                case '3':
                    res = 'fourth';
                    break;

                default:
                    res = 'first';
                    break;
            }

            return res;
        }
        $scope.$on('$stateChangeStart', function (event, toState, toStateParams) {
            if ($scope.saved != true) {
                sendData();
            }
        });
    }
}());
(function() {
    'use strict';

    angular
        .module('app.pages.slapExcute', []);
}());


(function () {
    'use strict';

    SlapExcuteResultsController.$inject = ["$scope", "$rootScope", "pageService", "stepService", "$state", "$timeout", "actionplanService", "$mdDialog", "excuteItems", "excuteItemService", "userAllData", "$mdToast", "$q", "Restangular", "apiService"];
    angular
        .module('app.pages.slapExcute')
        .controller('SlapExcuteResultsController', SlapExcuteResultsController);

    function SlapExcuteResultsController($scope, $rootScope, pageService,stepService, $state, $timeout, actionplanService,  $mdDialog, excuteItems, excuteItemService, userAllData, $mdToast, $q,Restangular, apiService) {

        angular.extend($scope,  {
            userAllData: userAllData, //All user data from finishedsteps api
            excuteItems: excuteItems,
            startDate: moment().toDate(), //Plan start Date
            endDate: moment().toDate(), // Plan Ends Date
            today: moment().toDate(), // 

            resultPage: false,
            quaters: [], // quaters with `start` `end` date and months included in the quater
            currentQuater: {}, //item of quaters to indicate current quater
            progress: {
                delay: 0,
                animation: 'easeInOutQuart',
                duration: 2000,
                stroke: 10,
                radius: 90,
                bgcolor: '#eaeaea' 
            },
            filter: {
                showQ: 1
            },
            filtered: filtered,
            colorAction: '#2778f5',
            colorSales: '#38b636',
            colorReflextion: '#f8d144',
            
            curMode: '',
            openItemDialog: openItemDialog,
            openDeleteItemDialog: openDeleteItemDialog,
            closeDialog: closeDialog,
            updateItem: updateItem,
            formData: {}
        });
        pageService
            .reset()
            .setShowBC(false)
            .addCrumb({name: 'SLAPexcute', path: 'results'})
            .setPageTitle("SLAPExcute - Results");
        
        $timeout(activate);
        function activate() {
            var startDate = $scope.userAllData.slapMindset.slapStartDate;
            $scope.quaters.push( actionplanService.getNthQuater(startDate, 1));
            $scope.quaters.push( actionplanService.getNthQuater(startDate, 2));
            $scope.quaters.push( actionplanService.getNthQuater(startDate, 3));
            $scope.quaters.push( actionplanService.getNthQuater(startDate, 4));

            $scope.currentQuater = $scope.quaters[0];
            _.each($scope.quaters, function (qut){
                if(moment().isBetween(qut.start, qut.end, 'day', '[]')) {
                    $scope.currentQuater = qut;
                }
            });

            $scope.startDate = $scope.quaters[0].start.toDate();
            $scope.endDate = $scope.quaters[3].end.toDate();
            $scope.today = moment.max(moment($scope.startDate), moment()).toDate(); //If the user haven't started the tracking yet.

            $scope.revenues = $scope.userAllData.yearGoal.revenueStreams.revenues;

        }

        function filtered(sectionName, completeStatus) {
            var results = [];
            _.each($scope.excuteItems, function(item){
                var isValid = true;
                if ((completeStatus == 'upcoming') && (item.progress == 100)|| 
                (completeStatus == 'done') && (item.progress != 100)) {
                    isValid = false;
                }
                if (!(($scope.filter.showActions && item.type == 'action') ||
                    ($scope.filter.showSales && item.type == 'sales') ||
                    ($scope.filter.showReflextion && item.type == 'reflextion')))
                        isValid = false;
                var dateRange = {};
                if(sectionName == 'today') {
                    dateRange.end = dateRange.start = moment();
                } else if(sectionName == 'week') {
                    dateRange.start = moment().day(0);
                    dateRange.end = moment().day(6);
                } else if(sectionName == 'month') {
                    dateRange.start = moment().startOf('month');
                    dateRange.end = moment().endOf('month');
                } else if(sectionName == 'quater') {
                    dateRange.start = moment($scope.currentQuater.start);
                    dateRange.end = moment($scope.currentQuater.end);
                } else if(sectionName == 'year') {
                    dateRange.start = moment($scope.startDate);
                    dateRange.end = moment($scope.endDate);
                }
                
                if (!(moment(item.dueDate).isBetween(dateRange.start, dateRange.end, 'day', '[]'))) {
                    isValid = false;
                }

                if(isValid)
                    results.push(item);
            });
            return results;
            
        }
        function closeDialog() {
            $mdDialog.hide();
        }

        function openItemDialog($event, mode, type, item) {
            $scope.curMode = mode;
            if (type == 'action') {
                if ($scope.curMode == 'add') {
                    var newForm = {
                        type: 'action',
                        title: '',
                        notes: '',
                        dueDate: moment().format($rootScope.dateFormat),
                        progress: 0,
                        recurrency: 'No Recurrency',
                        setRecurDeadline: false,
                        recurDeadline: moment().format($rootScope.dateFormat)
                    };
                    
                    newForm.recurDeadline = $scope.endDate;
                    newForm.dueDate = $scope.today;

                    $scope.formData = newForm;
                } else if ($scope.curMode == 'edit') {
                    $scope.formData = apiService.rest.copy(item);
                }
                $mdDialog.show({
                    clickOutsideToClose: true,
                    targetEvent: $event,
                    scope: $scope, 
                    preserveScope: true,
                    templateUrl: 'components/dialogs/item-dialog/item-dialog.html',
                    controller: 'ItemDialogController',
                    autoWrap: true
                });
            } else if (type == 'sales') {
                if ($scope.curMode == 'add') {
                    var newForm = {
                        type: 'sales',
                        title: 1,
                        notes: '',
                        dueDate: moment().format($rootScope.dateFormat),
                        progress: 0,
                        salesUnit: 1
                    };
                    $scope.formData = newForm;
                } else if ($scope.curMode == 'edit') {
                    $scope.formData = apiService.rest.copy(item);
                }
                $mdDialog.show({
                    clickOutsideToClose: true,
                    targetEvent: $event,
                    scope: $scope, 
                    preserveScope: true,
                    templateUrl: 'components/dialogs/item-dialog/item-dialog.html',
                    controller: 'ItemDialogController',
                    autoWrap: true
                });

            } else if (type == 'reflextion') {

            } 
        }
        
        function updateItem($event) {
            if ($scope.curMode == 'add') {
                if ($scope.formData.type == 'action') {
                    // formData holds the data now.
                    if ($scope.formData.recurrency == 'No Recurrency') {
                        $scope.excuteItems.post({
                            type: 'action',
                            title: $scope.formData.title,
                            notes: $scope.formData.notes,
                            dueDate: $scope.formData.dueDate,
                            progress: $scope.formData.progress
                        }).then(function(item){
                            $scope.excuteItems.push(item.data);
                            showToast('Added Successfully');
                        });
                    } else {

                        var datesList = [];
                        var endDate = moment($scope.endDate);
                        var current = moment($scope.startDate);

                        if ($scope.formData.recurrency == 'Weekly') 
                            current = current.day(5);   //Which means Friday
                        if ($scope.formData.recurrency == 'Monthly') 
                            current = current.endOf('month');  
                        if ($scope.formData.recurrency == 'Quaterly')
                            current = $scope.currentQuater.end.clone();

                        while (current.isSameOrBefore(moment($scope.formData.recurDeadline))) {

                            datesList.push(current.clone().toDate());
                            switch ($scope.formData.recurrency) {
                                case 'Daily':
                                    current.add(1, 'days');
                                    break;
                                case 'Weekly':
                                    current.add(7, 'days');
                                    break;
                                case 'Monthly':
                                    current.startOf('month').add(1, 'months').endOf('month');
                                    break;
                                case 'Quaterly':
                                    current.startOf('month').add(3, 'months').endOf('month');
                                    break;
                            }

                        }
                        var items = datesList.map(function(date){
                            return {
                                type: 'action',
                                title: $scope.formData.title,
                                notes: $scope.formData.notes,
                                dueDate: date,
                                progress: $scope.formData.progress
                            };
                        });
                        $q.all(items.map(function (item){
                            return $scope.excuteItems.post(item);
                        })).then(function(responses){

                            responses.map(function(resp){ return $scope.excuteItems.push(resp.data); });
                            showToast('Added ' + responses.length + ' ' + $scope.formData.recurrency + ' Action(s).');
                        });
                    }
                } else if ($scope.formData.type == 'sales') {
                    $scope.excuteItems.post($scope.formData).then(function(item){
                        $scope.excuteItems.push(item.data);
                        showToast('Added Successfully');
                    });
                }
            } else if($scope.curMode == 'edit') {
                if ($scope.formData.type == 'action') {
                    $scope.formData.save()
                    .then(function(response){
                        var index = _.findIndex($scope.excuteItems, {_id: $scope.formData._id});
                        $scope.excuteItems[index] = $scope.formData;
                        showToast('Updated ' + capitalize($scope.formData.type) + ' ' + $scope.formData.title);
                    });
                } else if ($scope.formData.type == 'sales') {
                }
            } 
            $mdDialog.hide($event);
        }
        

        function openDeleteItemDialog($event, item) {
            // Appending dialog to document.body to cover sidenav in docs app
            var confirm = $mdDialog.confirm()
                .title('Confirm Delete')
                .textContent('Would you like to delete ' + capitalize(item.type) + ' ' + item.title +'?')
                .ariaLabel('Delete')
                .targetEvent($event)
                .ok('Delete')
                .cancel('No');

            $mdDialog.show(confirm).then(function() {
                item.remove().then(function(response) {
                    var index = _.findIndex($scope.excuteItems, {_id: item._id});
                    $scope.excuteItems.splice(index, 1);
                    showToast('Deleted ' + capitalize(item.type) + ' ' + item.title);
                });
            }, function() {
                
            });
        }

        function deleteItem(item) {

        }

        function showToast(message) {
            var toast = $mdToast.simple()
            .textContent(message)
            .action('OK')
            .hideDelay(3000)
            .position("bottom right");

            $mdToast.show(toast).then(function(response) {
                if ( response == 'ok' ) {
                    $mdToast.hide();
                }
            });
        }

        function capitalize(s) {
            return s[0].toUpperCase() + s.slice(1);;
        }
    }
}());
(function () {
    'use strict';

    SlapExcuteMainController.$inject = ["$scope", "$rootScope", "pageService", "stepService", "$state", "$timeout", "actionplanService", "$mdDialog", "excuteItems", "excuteItemService", "userAllData", "$mdToast", "$q", "Restangular", "apiService"];
    angular
        .module('app.pages.slapExcute')
        .controller('SlapExcuteMainController', SlapExcuteMainController);

    function SlapExcuteMainController($scope, $rootScope, pageService,stepService, $state, $timeout, actionplanService,  $mdDialog, excuteItems, excuteItemService, userAllData, $mdToast, $q, Restangular, apiService) {

        angular.extend($scope,  {
            userAllData: userAllData, //All user data from finishedsteps api
            excuteItems: excuteItems,
            reflextionData: excuteItemService.reflextionData,
            startDate: moment().toDate(), //Plan start Date
            endDate: moment().toDate(), // Plan Ends Date
            today: moment().toDate(), // 
            mainView: 'list',

            resultPage: false,
            changeView: function() { 
                $scope.resultPage = !$scope.resultPage; 
                $scope.filterSales();     //Main function to redraw grid
            },

            quaters: [], // quaters with `start` `end` date and months included in the quater
            currentQuater: {}, //item of quaters to indicate current quater,

            dashData: {
                quaterTotalActions: 0,
                quaterClosedActions: 0,
                daysLeft: 0,
                cQRevenueGoalPercent: 0,
                daysPassed: 0,
                daysReflected: 0,


                TRevenueGoalPercent: 0,

            },
            gridData: [],
            filteredSalesItems: [],
            gridActions: {},
            
            progress: {
                delay: 0,
                animation: 'easeInOutQuart',
                duration: 2000,
                stroke: 10,
                radius: 100,
                bgcolor: '#eaeaea' 
            },
            filter: {
                showActions: true,
                showSales: true,
                showReflextion: true,

                showQ: 1,

                period: 'week',
                status: 'upcoming',

                periodStr: ''
            },
            filteredForTabView: filteredForTabView,
            filteredForListView: filteredForListView,
            filterSales: filterSales,
            colorAction: '#2778f5',
            colorSales: '#38b636',
            colorReflextion: '#f8d144',
            
            curMode: '',
            openItemDialog: openItemDialog,
            openDeleteItemDialog: openDeleteItemDialog,
            closeDialog: closeDialog,
            updateItem: updateItem,
            formData: {},

            selectEmotion: selectEmotion,
            selectReflextWhat: selectReflextWhat,
            tempReflextWhat: '',
            capitalize: capitalize
        });
        pageService
            .reset()
            .setShowBC(false)
            .addCrumb({name: 'SLAPexcute', path: 'main'})
            .setPageTitle("SLAPExcute");
        
        $timeout(activate);
        function activate() {
            var startDate = $scope.userAllData.slapMindset.slapStartDate;
            $scope.quaters.push( _.merge(actionplanService.getNthQuater(startDate, 1), $scope.userAllData.actionPlan.connectingStrategyStrategizing[0]));
            $scope.quaters.push( _.merge(actionplanService.getNthQuater(startDate, 2), $scope.userAllData.actionPlan.connectingStrategyStrategizing[1]));
            $scope.quaters.push( _.merge(actionplanService.getNthQuater(startDate, 3), $scope.userAllData.actionPlan.connectingStrategyStrategizing[2]));
            $scope.quaters.push( _.merge(actionplanService.getNthQuater(startDate, 4), $scope.userAllData.actionPlan.connectingStrategyStrategizing[3]));

            $scope.currentQuater = $scope.quaters[0];
            _.each($scope.quaters, function (qut){
                if(!$scope.currentQuater && moment().isBetween(qut.start, qut.end, 'day', '[]')) {
                    $scope.currentQuater = qut;
                    
                }
            });

            $scope.filter.showQ = $scope.currentQuater.nth;   //set by current quater

            $scope.startDate = $scope.quaters[0].start.toDate();
            $scope.endDate = $scope.quaters[3].end.toDate();
            $scope.today = moment.max(moment($scope.startDate), moment()).toDate(); //If the user haven't started the tracking yet.

            if(moment().isBefore(moment($scope.startDate), 'day')) { //If startdate is after today
                //Add default 3 actions
                //Check if prior action exists
                var isExist = _.find($scope.excuteItems, {isPriorItem: 1});
                if( _.isUndefined(isExist)) {

                    //ADD 3 action ITEMS
                    $q.all(excuteItemService.defaultActionsBeforeStart.map(function(itemTitle){

                        return $scope.excuteItems.post({
                            type: 'action',
                            title: itemTitle,
                            notes: '',
                            dueDate: moment().format('YYYY-MM-DD'),
                            progress: 0,
                            isPriorItem: 1
                        });

                    })).then(function(responses){
                        responses.map(function(resp){ return $scope.excuteItems.push(resp.data); });
                        showToast('Added Default Action(s).');
                    });

                    //ADD ALL
                    addAllReflextion();
                }

            } 

            ///========For now all reflections are added when the user enter excute first time =====//////
            // else if(moment().isBetween(moment($scope.startDate), moment($scope.endDate), 'day', '[]')) {
            //     //If current date is between start and end date
            //     //Check if it's Monday, it then add reflextion


            //     /*-----------so here's the problem
            //                 Should user always reflex the week or month on friday or end or month?
            //                 Or any day in that month or week?
            //     -------------------------*/
            //     if (moment().day() == 1) {
            //         var hasReflexted = false;
            //         _.each($scope.excuteItems, function(item){
            //             if ((item.type == 'reflextion') 
            //                 && (moment(item.dueDate).isSame( moment().day(-2), 'day' ))
            //                 && ((item.reflextWhat == 'week')))
            //                 hasReflexted = true;
            //         })
            //         if(!hasReflexted) {

            //             var newForm = {
            //                 type: 'reflextion',
            //                 title: '',
            //                 notes: '',
            //                 dueDate: moment().day(-2).format($rootScope.dateFormat),
            //                 progress: 0,
            //                 feeling: {},
            //                 reflextWhat: 'week'
            //             };

            //             $scope.excuteItems.post(newForm).then(function(item){
            //                 $scope.excuteItems.push(item.data);
            //                 showToast('You didn\'t reflext last week');
            //                 dataUpdated();
            //             });
            //         }

            //     }

            //     //Check if it's 1th of each day, if then add reflextion
            //     if (moment().date() == 1) {
            //         var hasReflexted = false;
            //         _.each($scope.excuteItems, function(item){
            //             if ((item.type == 'reflextion') 
            //                 && (moment(item.dueDate).isSame( moment().subtract(1, 'month').endOf('month'), 'day' ))
            //                 && ((item.reflextWhat == 'month') || (item.reflextWhat == 'quater')))
            //                 hasReflexted = true;
            //         })
            //         if(!hasReflexted) {
            //             var reflextWhat = 'month';
            //             _each($scope.quaters, function(quater){
            //                 if(moment(quater.end).isSame( moment().subtract(1, 'month').endOf('month'), 'day' ))
            //                     reflextWhat = 'quater';
            //             })
            //             var newForm = {
            //                 type: 'reflextion',
            //                 title: '',
            //                 notes: '',
            //                 dueDate: moment().subtract(1, 'month').endOf('month').format($rootScope.dateFormat),
            //                 progress: 0,
            //                 feeling: {},
            //                 reflextWhat: reflextWhat
            //             };

            //             $scope.excuteItems.post(newForm).then(function(item){
            //                 $scope.excuteItems.push(item.data);
            //                 showToast('You didn\'t reflext last ' + reflextWhat);
            //                 dataUpdated();
            //             });
            //         }

            //     }

            // }

            $scope.revenues = $scope.userAllData.yearGoal.revenueStreams.revenues;
            //Initialize Grid data
            filterSales();
            doCalculation();
        }

        function filteredForTabView(sectionName, completeStatus, quaterID) {
            var results = [];
            _.each($scope.excuteItems, function(item){
                var isValid = true;
                if ((completeStatus == 'upcoming') && (item.progress == 100)|| 
                (completeStatus == 'done') && (item.progress != 100)) {
                    isValid = false;
                }
                if (!(($scope.filter.showActions && item.type == 'action') ||
                    ($scope.filter.showSales && item.type == 'sales') ||
                    ($scope.filter.showReflextion && item.type == 'reflextion')))
                        isValid = false;
                var dateRange = {};
                if(sectionName == 'today') {
                    dateRange.end = dateRange.start = moment();
                } else if(sectionName == 'week') {
                    dateRange.start = moment().day(0);
                    dateRange.end = moment().day(6);
                } else if(sectionName == 'month') {
                    dateRange.start = moment().startOf('month');
                    dateRange.end = moment().endOf('month');
                } else if(sectionName == 'quater') {
                    dateRange.start = moment($scope.currentQuater.start);
                    dateRange.end = moment($scope.currentQuater.end);
                } else if(sectionName == 'year') {
                    dateRange.start = moment($scope.startDate);
                    dateRange.end = moment($scope.endDate);
                }
                
                if (!(moment(item.dueDate).isBetween(dateRange.start, dateRange.end, 'day', '[]'))) {
                    isValid = false;
                }
                if(isValid)
                    results.push(item);
            });
            return results;
            
        }

        function filteredForListView(){
            var results = [];
            _.each($scope.excuteItems, function(item){
                var isValid = true;


                if (($scope.filter.status == 'upcoming') && (item.progress == 100)|| 
                ($scope.filter.status == 'done') && (item.progress != 100)) {
                    isValid = false;
                }
                if (!(($scope.filter.showActions && item.type == 'action') ||
                    ($scope.filter.showSales && item.type == 'sales') ||
                    ($scope.filter.showReflextion && item.type == 'reflextion')))
                        isValid = false;
                var dateRange = {};
                if($scope.filter.period == 'today') {
                    dateRange.end = dateRange.start = moment().startOf('day');
                } else if($scope.filter.period == 'week') {
                    dateRange.start = moment().day(1).startOf('day');
                    dateRange.end = moment().day(6).startOf('day');
                } else if($scope.filter.period == 'month') {
                    dateRange.start = moment().startOf('month').startOf('day');
                    dateRange.end = moment().endOf('month');
                } else if($scope.filter.period.indexOf('quater') != -1) {
                    var quaterID = parseInt($scope.filter.period.slice(6));
                    dateRange.start = moment($scope.quaters[quaterID].start).startOf('day');
                    dateRange.end = moment($scope.quaters[quaterID].end).startOf('day');
                } 

                var now = moment($scope.today); 
                if(moment().isBefore(moment($scope.startDate), 'day')) //If before starting tracking, set now as now not first day.
                    now = moment().startOf('day');

                if ($scope.filter.status == 'overdue') {

                    if (!(moment(item.dueDate).isBetween(dateRange.start, moment.min(now, dateRange.end), 'day', '[)'))) {
                        isValid = false;
                    }

                } else {
                    // if (dateRange.start.isBefore($scope.today)) {
                    if (!(moment(item.dueDate).isBetween( moment.max(now, dateRange.start), dateRange.end, 'day', '[]'))) {
                        isValid = false;
                    }
                }

                $scope.filter.periodStr = 'From ' + dateRange.start.format('YYYY-MM-DD') + '  To ' + dateRange.end.format('YYYY-MM-DD');
                

                if(isValid)
                    results.push(item);
            });
            return _.sortBy(results, ['type', 'dueDate']);
             
            
        }

        function filterSales() {
            $scope.filteredSalesItems = [];
            _.each($scope.excuteItems, function(item){
                if(item.type != 'sales')   //filter out only sales items
                    return;
                if ($scope.filter.showQ != 5) {  // This measn to show full YEAR sales items.
                    if (!(moment(item.dueDate).isBetween($scope.quaters[$scope.filter.showQ - 1].start, $scope.quaters[$scope.filter.showQ - 1].end, 'day', '[]')))  //filter out only in filtering quater
                        return;    
                }
                
                $scope.filteredSalesItems.push(item);
            });
            buildGridData();
        }

        function dataUpdated() {
            filterSales();
            buildGridData();   
            doCalculation();
        }

        function buildGridData() {
            $scope.gridData = [];
            _.each($scope.revenues, function(revenue){
                var data = {}; 
                var salesItems = $scope.filteredSalesItems.filter(function(item){ return +item.title == +revenue.id; });

                var totalSalesItemCount = 0;
                if ($scope.filter.showQ != 5) {  //Quater
                    totalSalesItemCount = $scope.quaters[$scope.filter.showQ - 1].units[revenue.name];
                } else if ($scope.filter.showQ == 5) {  //YEAR 
                    totalSalesItemCount = +revenue.unit;
                }

                var actualSalesItemCount = 0;
                var projectedSalesItemCount = 0;
                _.each(salesItems, function(item) { 
                    if (item.progress != 100) 
                        projectedSalesItemCount += item.saleUnit;
                    else 
                        actualSalesItemCount += item.saleUnit;
                });

                _.each(salesItems, function(item) {
                    item.typeStr = item.progress == 100 ? 'Closed Sale' : 'Projected Sale';
                    item.salesGoalShare = totalSalesItemCount / item.saleUnit;
                    item.amount = +revenue.sellingPrice * item.saleUnit;
                    item.salesGoalShare = item.salesGoalShare.toFixed(2);
                });

                data.data = salesItems;
                data.urlSync = false;


                $scope.gridData.push({
                    gridOptions: data,
                    gridActions: {},
                    revenue: revenue,
                    showDetail: false,
                    totalSalesItemCount: totalSalesItemCount,
                    actualSalesItemCount: actualSalesItemCount,
                    projectedSalesItemCount: projectedSalesItemCount
                });
            });

        }

        function closeDialog() {
            $mdDialog.hide();
        }

        function openItemDialog($event, mode, type, item) {
            $scope.curMode = mode;
            if (type == 'action') {
                if ($scope.curMode == 'add') {
                    var newForm = {
                        type: 'action',
                        title: '',
                        notes: '',
                        dueDate: moment().format($rootScope.dateFormat),
                        progress: 0,
                        recurrency: 'No Recurrency',
                        setRecurDeadline: false,
                        recurDeadline: moment().format($rootScope.dateFormat)
                    };
                    
                    newForm.recurDeadline = $scope.endDate;
                    newForm.dueDate = $scope.today;

                    $scope.formData = newForm;
                } else if ($scope.curMode == 'edit') {
                    $scope.formData = apiService.rest.copy(item);
                }
                $mdDialog.show({
                    clickOutsideToClose: true,
                    targetEvent: $event,
                    scope: $scope, 
                    preserveScope: true,
                    templateUrl: 'components/dialogs/item-dialog/item-dialog.html',
                    controller: 'ItemDialogController',
                    autoWrap: true
                });
            } else if (type == 'sales') {
                if ($scope.curMode == 'add') {
                    var newForm = {
                        type: 'sales',
                        title: 1,
                        notes: '',
                        dueDate: moment($scope.today).format($rootScope.dateFormat),
                        progress: 0,
                        saleUnit: 1
                    };
                    $scope.formData = newForm;
                } else if ($scope.curMode == 'edit') {
                    $scope.formData = apiService.rest.copy(item);
                }
                $mdDialog.show({
                    clickOutsideToClose: true,
                    targetEvent: $event,
                    scope: $scope, 
                    preserveScope: true,
                    templateUrl: 'components/dialogs/item-dialog/item-dialog.html',
                    controller: 'ItemDialogController',
                    autoWrap: true
                });

            } else if (type == 'reflextion') {

                if ($scope.curMode == 'add') {
                    $scope.tempReflextWhat = '';
                    var newForm = {
                        type: 'reflextion',
                        title: '',
                        notes: '',
                        dueDate: moment($scope.today).format($rootScope.dateFormat),
                        progress: 0,
                        feeling: {},
                        reflextWhat: ''
                    };
                    $scope.formData = newForm;

                } else if ($scope.curMode == 'edit') {
                    $scope.formData = apiService.rest.copy(item);
                    $scope.reflextionData = excuteItemService.reflextionData[item.reflextWhat];
                }

                $mdDialog.show({
                    clickOutsideToClose: true,
                    targetEvent: $event,
                    scope: $scope, 
                    preserveScope: true,
                    templateUrl: 'components/dialogs/item-dialog/item-dialog.html',
                    controller: 'ItemDialogController',
                    autoWrap: true
                });
            } 
        }
        
        function updateItem($event) {
            if ($scope.curMode == 'add') {
                if ($scope.formData.type == 'action') {
                    // formData holds the data now.
                    if ($scope.formData.recurrency == 'No Recurrency') {
                        $scope.excuteItems.post({
                            type: 'action',
                            title: $scope.formData.title,
                            notes: $scope.formData.notes,
                            dueDate: $scope.formData.dueDate,
                            progress: $scope.formData.progress
                        }).then(function(item){
                            $scope.excuteItems.push(item.data);
                            showToast('Added Successfully');
                            dataUpdated();
                        });
                    } else {

                        var datesList = [];
                        var endDate = moment($scope.endDate);
                        var current = moment($scope.today);

                        if ($scope.formData.recurrency == 'Weekly') 
                            current = current.day(5);   //Which means Friday
                        if ($scope.formData.recurrency == 'Monthly') 
                            current = current.endOf('month');
                        if ($scope.formData.recurrency == 'Quaterly')
                            current = $scope.currentQuater.end.clone();

                        while (current.isSameOrBefore(moment($scope.formData.recurDeadline))) {

                            datesList.push(current.clone().toDate());
                            switch ($scope.formData.recurrency) {
                                case 'Daily':
                                    current.add(1, 'days');
                                    break;
                                case 'Weekly':
                                    current.add(7, 'days');
                                    break;
                                case 'Monthly':
                                    current.startOf('month').add(1, 'months').endOf('month');
                                    break;
                                case 'Quaterly':
                                    current.startOf('month').add(3, 'months').endOf('month');
                                    break;
                            }

                        }
                        var items = datesList.map(function(date){
                            return {
                                type: 'action',
                                title: $scope.formData.title,
                                notes: $scope.formData.notes,
                                dueDate: date,
                                progress: $scope.formData.progress
                            };
                        });
                        $q.all(items.map(function (item){
                            return $scope.excuteItems.post(item);
                        })).then(function(responses){

                            responses.map(function(resp){ return $scope.excuteItems.push(resp.data); });
                            showToast('Added ' + responses.length + ' ' + $scope.formData.recurrency + ' Action(s).');
                            dataUpdated();
                        });
                    }
                } else if ($scope.formData.type == 'sales') {
                    $scope.excuteItems.post($scope.formData).then(function(item){
                        $scope.excuteItems.push(item.data);
                        showToast('Added Successfully');
                        dataUpdated();
                    });
                } else if ($scope.formData.type == 'reflextion') {
                    $scope.formData.progress = 100;
                    $scope.excuteItems.post($scope.formData).then(function(item){
                        $q.all($scope.formData.feeling.actions.filter(function(item) { return item.added == true;})
                        .map(function(item){
                            return $scope.excuteItems.post({
                                type: 'action',
                                title: item.title,
                                notes: '',
                                dueDate: $scope.formData.dueDate,
                                progress: 0
                            });
                        })).then(function(responses){

                            responses.map(function(resp){ return $scope.excuteItems.push(resp.data); });
                            showToast('Added ' + responses.length + ' Action(s).');
                            dataUpdated();
                        })
                        $scope.excuteItems.push(item.data);
                        showToast('Added Successfully');
                    });
                }
            } else if($scope.curMode == 'edit') {
                if ($scope.formData.type == 'action') {
                    $scope.formData.save()
                    .then(function(response){
                        var index = _.findIndex($scope.excuteItems, {_id: $scope.formData._id});
                        $scope.excuteItems[index] = $scope.formData;
                        showToast('Updated ' + capitalize($scope.formData.type) + ' ' + $scope.formData.title);
                        dataUpdated();
                    });
                } else if ($scope.formData.type == 'sales') {
                    $scope.formData.save()
                    .then(function(response){
                        var index = _.findIndex($scope.excuteItems, {_id: $scope.formData._id});
                        $scope.excuteItems[index] = $scope.formData;
                        // showToast('Updated ' + capitalize($scope.formData.type) + ' ' + $scope.revenues[formData.title].name);
                        showToast('Updated ' + capitalize($scope.formData.type) + ' ' + 'Item');
                        dataUpdated();
                    });
                } else if ($scope.formData.type == 'reflextion') {
                    $scope.formData.progress = 100;
                    $scope.formData.save()
                    .then(function(response){
                        var index = _.findIndex($scope.excuteItems, {_id: $scope.formData._id});
                        $scope.excuteItems[index] = $scope.formData;
                        // showToast('Updated ' + capitalize($scope.formData.type) + ' ' + $scope.revenues[formData.title].name);
                        showToast('Reflected ' + capitalize($scope.formData.reflextWhat));
                        dataUpdated();
                    });
                }
            } 
            $mdDialog.hide($event);
        }
        

        function openDeleteItemDialog($event, item) {
            // Appending dialog to document.body to cover sidenav in docs app
            var confirm = $mdDialog.confirm()
                .title('Confirm Delete')
                .textContent('Would you like to delete ' + capitalize(item.type) +'?')
                .ariaLabel('Delete')
                .targetEvent($event)
                .ok('Delete')
                .cancel('No');

            $mdDialog.show(confirm).then(function() {
                item.remove().then(function(response) {
                    var index = _.findIndex($scope.excuteItems, {_id: item._id});
                    $scope.excuteItems.splice(index, 1);
                    showToast('Deleted ' + capitalize(item.type));
                    dataUpdated();
                });
            }, function() {
                
            });
        }

        function doCalculation() {

            //Calcaluation for BOX1 in main page
            $scope.dashData.quaterTotalActions = 0;
            $scope.dashData.quaterClosedActions = 0;
            _.each($scope.excuteItems, function(item){ //Count Actions
                if(item.type != 'action')
                    return;
                if (!(moment(item.dueDate).isBetween($scope.quaters[$scope.filter.showQ - 1].start, $scope.quaters[$scope.filter.showQ - 1].end, 'day', '[]')))  
                    return;
                $scope.dashData.quaterTotalActions ++;

                if (item.progress == 100)
                    $scope.dashData.quaterClosedActions ++;
            });
            
            //Calcaluation for BOX2 in main page & BOX1 BOX2 in result page
            $scope.dashData.daysLeft = 0; 
            $scope.dashData.cQRevenueGoalPercent = 0; 
            $scope.dashData.TRevenueGoalPercent = 0; 
            $scope.dashData.totalQuaterRevenue = 0;
            $scope.dashData.closedQuaterRevenue = 0;
            $scope.dashData.totalYearRevenue = 0;
            $scope.dashData.closedYearRevenue = 0;

            var tempTotalQuaterRevenue = 0;
            var tempClosedQuaterRevenue = 0;
            var tempTotalYearRevenue = 0;
            var tempClosedYearRevenue = 0;
            $scope.dashData.daysLeft  = Math.round(moment.duration($scope.quaters[$scope.filter.showQ - 1].end.diff(moment($scope.today))).asDays());

            _.each($scope.excuteItems, function(item){ //Count Actions
                if(item.type != 'sales')
                    return;
                if (item.progress == 100)
                    tempClosedYearRevenue += item.saleUnit * +$scope.revenues[+item.title - 1].sellingPrice;
                
                if (!(moment(item.dueDate).isBetween($scope.quaters[$scope.filter.showQ - 1].start, $scope.quaters[$scope.filter.showQ - 1].end, 'day', '[]')))  
                    return;
                
                // /tempTotalQuaterRevenue += item.saleUnit * +$scope.revenues[+item.title - 1].sellingPrice;
                if (item.progress == 100)
                    tempClosedQuaterRevenue += item.saleUnit * +$scope.revenues[+item.title - 1].sellingPrice;
            });

            _.each($scope.quaters, function(quater){

                for(var key in quater.units) {
                    var revenue = _.find($scope.revenues, {name: key});
                    if(revenue  && revenue.deleted == false) {
                        tempTotalYearRevenue += +revenue.sellingPrice * +$scope.currentQuater.units[key];
                    }
                }  
            })

            for(var key in $scope.currentQuater.units) {
                var revenue = _.find($scope.revenues, {name: key});
                if(revenue  && revenue.deleted == false) {
                    tempTotalQuaterRevenue += +revenue.sellingPrice * +$scope.currentQuater.units[key];
                }
            }

            if (tempTotalQuaterRevenue != 0)
                $scope.dashData.cQRevenueGoalPercent = Math.round((tempClosedQuaterRevenue / tempTotalQuaterRevenue) * 100);
            else
                $scope.dashData.cQRevenueGoalPercent = 0;

            if (tempTotalYearRevenue != 0)
                $scope.dashData.TRevenueGoalPercent = Math.round((tempClosedYearRevenue / tempTotalYearRevenue) * 100);
            else
                $scope.dashData.TRevenueGoalPercent = 0;


            $scope.dashData.totalQuaterRevenue = tempTotalQuaterRevenue;
            $scope.dashData.closedQuaterRevenue = tempClosedQuaterRevenue;

            $scope.dashData.totalYearRevenue = tempTotalYearRevenue;
            $scope.dashData.closedYearRevenue = tempClosedYearRevenue;

            //Calcaluation for BOX3 in main page
            // $scope.dashData.daysPassed = Math.round(moment.duration(moment($scope.today).diff($scope.quaters[0].start)).asDays());
            $scope.dashData.daysPassed = _.filter($scope.excuteItems, function(item){ return item.type == 'reflextion'; }).length;
            $scope.dashData.daysReflected = _.filter($scope.excuteItems, function(item){ return item.type == 'reflextion' && item.progress == 100; }).length;

        }
        function deleteItem(item) {

        }

        function showToast(message) {
            var toast = $mdToast.simple()
            .textContent(message)
            .action('OK')
            .hideDelay(3000)
            .position("bottom right");

            $mdToast.show(toast).then(function(response) {
                if ( response == 'ok' ) {
                    $mdToast.hide();
                }
            });
        }

        function capitalize(s) {
            return s[0].toUpperCase() + s.slice(1);
        }

        function selectEmotion(emotion) {
            $scope.formData.title = emotion.id;
            $scope.formData.feeling = angular.copy(emotion);
        }

        function selectReflextWhat(tempReflext) {
            $scope.formData.reflextWhat = tempReflext;
            $scope.reflextionData = excuteItemService.reflextionData[tempReflext];
            //TODO : should check if the reflextion was already added
            $scope.tempReflextWhat = tempReflext;
            var endDate = moment($scope.endDate);
            var startDate = moment($scope.startDate);

            if (tempReflext == 'week') {
                $scope.dueDate = moment().day(-2).format('YYYY-MM-DD'); //last friday;
                if(!( moment($scope.dueDate).isBetween(moment($scope.startDate), moment($scope.endDate), 'day', '[]') )){
                    showToast('Can\'t reflext last week');
                    $mdDialog.hide();
                }
            } else if (tempReflext == 'month') {
                $scope.dueDate = moment().subtract(1, 'month').endOf('month').format('YYYY-MM-DD');
                if(!( moment($scope.dueDate).isBetween(moment($scope.startDate), moment($scope.endDate), 'day', '[]') )){
                    showToast('Can\'t reflext last month');
                    $mdDialog.hide();
                }
            } else if (tempReflext == 'quater') {
                var index = ($scope.currentQuater.nth - 1 -1);
                if ((index >= 0) && (index < 4))
                    $scope.dueDate = $scope.quaters[$scope.currentQuater.nth - 1 -1].end;
                else {
                    showToast('Can\'t reflext last month');
                    $mdDialog.hide();
                }
            }
        }

        function addAllReflextion(type) {
            var datesList = [];
            var endDate = moment($scope.endDate);
            var current = moment($scope.startDate);

            current = current.day(5);   //Which means Friday

            while (current.isSameOrBefore(endDate)) {
                datesList.push(current.clone().toDate());
                current.add(7, 'days');
            }

            var items = datesList.map(function(date){
                return {
                    type: 'reflextion',
                    title: '',
                    notes: '',
                    dueDate: moment(date).format($rootScope.dateFormat),
                    progress: 0,
                    feeling: {},
                    reflextWhat: 'week'
                };

            });

            current = moment($scope.startDate).endOf('month');
            for (var i = 0; i < 12; i++) {
                var type = 'month';
                if ((i+1) % 3 == 0) 
                    type = 'quater';
                items.push({
                    type: 'reflextion',
                    title: '',
                    notes: '',
                    dueDate: current.clone().format($rootScope.dateFormat),
                    progress: 0,
                    feeling: {},
                    reflextWhat: type
                })
                current.startOf('month').add(1, 'months').endOf('month');
            }

            $q.all(items.map(function (item){
                return $scope.excuteItems.post(item);
            })).then(function(responses){

                responses.map(function(resp){ return $scope.excuteItems.push(resp.data); });
                showToast('Added Reflection(s).');
                dataUpdated();
            });
        }
    }
}());
(function() {
    'use strict';

    angular
        .module('app.pages.settingsUser', []);
}());
(function () {
    'use strict';

    PaymentsController.$inject = ["$scope", "paymentsService", "NgTableParams"];
    angular
        .module('app.pages.settingsUser')
        .controller('PaymentsController', PaymentsController);

    /* @ngInject */
    function PaymentsController($scope,paymentsService,NgTableParams) {

        function getValue(row) {
            return row[this.field];
        }

        $scope.cols = [
            {
                field: "paymentDate",
                title: "Payment Date",
                show: true,
                format: 'raw',
                getValue: function (row) {
                    return row['paymentDate'] ? moment(row['paymentDate']).format('ll') : '-'
                }
            }, {
                field: "programName",
                title: "SLAProgram Name",
                show: true,
                format: 'raw',
                getValue: getValue
            }, {
                field: "costProduct",
                title: "Price for SLAProgram/Build",
                show: true,
                getValue: getValue
            }, {
                field: "discount",
                title: "Discount/Promo code",
                show: true,
                getValue: getValue
            }, {
                field: "amountCharges",
                title: "Total amount charged",
                show: true,
                getValue: getValue
            }
        ];

        $scope.list = new NgTableParams({},
            {
                getData: function (params) {
                    return paymentsService.getAllPayments()
                        .then(function (response) {
                            return paymentsService.transformationData(response.data);
                        });
                }
            }
        );
    }
}());
(function () {
    'use strict';

    MyaccountsController.$inject = ["$scope", "pageService", "productStorage", "$state", "userService", "$auth", "toaster"];
    angular
        .module('app.pages.settingsUser')
        .controller('MyaccountsController', MyaccountsController);

    /* @ngInject */
    function MyaccountsController($scope, pageService, productStorage, $state, userService, $auth, toaster) {
        $scope.renewAccount = renewAccount;
        $scope.user = {};
        $scope.saveBasic = saveBasic;
        $scope.changePassword = changePassword;
        $scope.changeCreditCard = changeCreditCard;
        $scope.getCreditCard = getCreditCard;
        $scope.stateData = $state.current.data;


        pageService
            .reset()
            .setShowBC(false)
            .addCrumb({name: 'Dashboard', path: 'home'})
            .setPageTitle('My accounts');

        activate();
        function activate() {
            userService.loadUser().then(function(user){    
                $scope.user = user;
            });
        }

        function saveBasic() {
            userService.updateMe($scope.user).then(function(user){
                $scope.user = user;
                toaster.pop({type: 'success', body: 'Basic info saved.'});
            }).catch(function(err){
                toaster.pop({type: 'error', body: 'Error.'});
            });     
        }


        function changePassword() {
            userService.updateMe($scope.user).then(function(user){
                $scope.user = user;
                toaster.pop({type: 'success', body: 'Password Changed.'});
            }).catch(function(err){
                toaster.pop({type: 'success', body: 'Error.'});
            });     
        }

        function getCreditCard() {
            userService.getCreditCard().then(function(user){
                $scope.user = user;
            }).catch(function(err){
                toaster.pop({type: 'success', body: 'Error.'});
            });     
        }
        function changeCreditCard() {
            userService.changeCreditCard($scope.user).then(function(user){
                $scope.user = user;
                $scope.user.card = null;
                
                $scope.creditform.$setPristine();
                toaster.pop({type: 'success', body: 'Credit Card Changed to ****-****-****-.' + $scope.user.last4});
            }).catch(function(err){
                toaster.pop({type: 'success', body: 'Error.'});
            });     
        }

        function renewAccount() {
            productStorage.resetStorage();
            productStorage.setRenew();
            
            
            var renewuser = {
                businessName: $scope.user.businessName,
                email: $scope.user.email,
                lastName: $scope.user.lastName,
                name: $scope.user.name,
                phone: $scope.user.phone,
                role: 4,
                status: 'active'
            };
            productStorage.setRenewFrom($scope.user._id);
            productStorage.setUser(renewuser);
            $auth.logout();
            $state.go('step1');
        
        }
    }
}());
(function() {
    'use strict';

    angular
        .module('app.pages.mindset',[]);
}());
(function () {
    'use strict';

    YourCommitmentController.$inject = ["$scope", "activeStep", "pageService", "stepService", "mindsetService", "$state"];
    angular
        .module('app.pages.mindset')
        .controller('YourCommitmentController', YourCommitmentController);

    /* @ngInject */
    function YourCommitmentController($scope, activeStep, pageService, stepService, mindsetService, $state) {

        angular.extend($scope, activeStep.model, {
            forward: true,
            sendData: sendData,
            saved: false
        });

        if($scope.data === null) {
            $scope.data = mindsetService.getSliders();
        }

        pageService
            .reset()
            .setShowBC(false)
            .addCrumb({name: 'Dashboard', path: 'home'})
            .setPageTitle('Your Commitment To Us');

        function sendData(direction) {
            stepService.updateActiveModel($scope);
            stepService.setFinishActiveStep();

            var nextprevStep = stepService.getNextAndPrevStep();
            var urls = activeStep.sref.split('.');

            return stepService.sendApiData(urls[urls.length - 1], $scope.data)
                .then(function () {
                    if(direction == 'forward')  
				        $state.go(nextprevStep.nextStep.sref); 
                    else if(direction == 'backward')
                        $state.go(nextprevStep.prevStep.sref);
                });
            $scope.saved = true;
        }

        $scope.$on('$stateChangeStart', function (event, toState, toStateParams) {
            if ($scope.saved != true) {
                sendData();
            }
        });
    }
}());
(function() {
    'use strict';

    YourBusinessController.$inject = ["$scope", "pageService", "activeStep", "stepService", "$state"];
    angular
        .module('app.pages.mindset')
        .controller('YourBusinessController', YourBusinessController);

    function YourBusinessController($scope, pageService,activeStep, stepService,$state) {

        angular.extend($scope, activeStep.model, {
            forward: true,
            sendData: sendData,
            saved: false
        });

        pageService
            .reset()
            .setShowBC(false)
            .addCrumb({name: 'Dashboard', path: 'home'})
            .setPageTitle('Your Business With/Without a SLAP');

        function sendData(direction) {
            stepService.updateActiveModel($scope);
            stepService.setFinishActiveStep();
            var nextprevStep = stepService.getNextAndPrevStep();
            if(direction == 'forward')  
				$state.go(nextprevStep.nextStep.sref); 
            else if(direction == 'backward')
				$state.go(nextprevStep.prevStep.sref);
            $scope.saved = true;
        }

        $scope.$on('$stateChangeStart', function (event, toState, toStateParams) {
            if ($scope.saved != true) {
                sendData();
            }
        });
    }
}());
(function() {
    'use strict';

    TopDownBottomUpController.$inject = ["$scope", "pageService", "activeStep", "stepService", "$state"];
    angular
        .module('app.pages.mindset')
        .controller('TopDownBottomUpController', TopDownBottomUpController);

    function TopDownBottomUpController($scope, pageService, activeStep, stepService,$state) {

        angular.extend($scope, activeStep.model, {
            forward: true,
            sendData: sendData,
            saved: false
        });

        pageService
            .reset()
            .setShowBC(false)
            .addCrumb({name: 'Dashboard', path: 'home'})
            .setPageTitle('Top Down, Bottom Up');

        function sendData(direction) {
            stepService.updateActiveModel($scope);
            stepService.setFinishActiveStep();
            var nextprevStep = stepService.getNextAndPrevStep();
            if(direction == 'forward')  
				$state.go(nextprevStep.nextStep.sref); 
            else if(direction == 'backward')
				$state.go(nextprevStep.prevStep.sref);
            $scope.saved = true;
        }

        $scope.$on('$stateChangeStart', function (event, toState, toStateParams) {
            if ($scope.saved != true) {
                sendData();
            }
        });
    }
}());
(function () {
    'use strict';

    StartSlapnController.$inject = ["$scope", "pageService", "activeStep", "stepService", "$state"];
    angular
        .module('app.pages.mindset')
        .controller('StartSlapnController', StartSlapnController);

    /* @ngInject */
    function StartSlapnController($scope, pageService,activeStep, stepService,$state) {

        angular.extend($scope, activeStep.model, {
            forward: true,
            sendData: sendData,
            saved: false
        });

        pageService
            .reset()
            .setShowBC(false)
            .addCrumb({name: 'Dashboard', path: 'home'})
            .setPageTitle('Start SLAPn!');

        function sendData(direction) {
            stepService.updateActiveModel($scope);
            stepService.setFinishActiveStep();
            var nextprevStep = stepService.getNextAndPrevStep();
            if(direction == 'forward')  
				$state.go(nextprevStep.nextStep.sref); 
            else if(direction == 'backward')
				$state.go(nextprevStep.prevStep.sref);
            $scope.saved = true;
        }

        $scope.$on('$stateChangeStart', function (event, toState, toStateParams) {
            if ($scope.saved != true) {
                sendData();
            }
        });
    }
}());
(function () {
    'use strict';

    SlapStartDateController.$inject = ["$scope", "$state", "pageService", "stepService", "activeStep", "excuteItemService", "excuteItems", "$q"];
    angular
        .module('app.pages.mindset')
        .controller('SlapStartDateController', SlapStartDateController);

    /* @ngInject */
    function SlapStartDateController($scope, $state, pageService, stepService, activeStep, excuteItemService, excuteItems, $q) {

        $scope.visible = true;
        $scope.changed = false;

        var date = new Date();
        var currentMonth = (date.getMonth()+1).toString();
        var currentYear = date.getFullYear();
        var excuteItems = excuteItems;

        $scope.notifications = [];

        angular.extend($scope, activeStep.model, {
            forward: true,
            sendData: sendData,
            saved: false,

            valueChanged: false
        });

        var beforeSave = moment({year: $scope.data.year, month: +$scope.data.month - 1, day:1});
        
        if ($scope.data.year === null) {
            $scope.data.year = currentYear
        }

        if ($scope.data.month === null) {
            $scope.data.month = currentMonth
        }


        $scope.$watch('data.month', function (value) {
            if (value !== undefined) {
                if (+value < +currentMonth) {
                    $scope.data.year = currentYear + 1;
                } else {
                    $scope.data.year = currentYear;
                }
                $scope.changed = true;
            }
        });

        pageService
            .reset()
            .setShowBC(false)
            .addCrumb({name: 'Dashboard', path: 'home'})
            .setPageTitle(stepService.getActiveStep().name);

        function sendData(direction) {
            stepService.updateActiveModel($scope);
            stepService.setFinishActiveStep();

            var nextprevStep = stepService.getNextAndPrevStep();
            var urls = activeStep.sref.split('.');
            //If user changed the date and have excute items.
            if ($scope.data.month != (beforeSave.month() + 1))  {
                //As a matter of fact, the new startdate cannot be a past of now because of $scope.$watch('data.month', function (value) { line codes
                var newStartDate = moment({year: $scope.data.year, month: +$scope.data.month - 1, day:1});
                if (newStartDate.isBefore(moment(), 'day')) {
                    $scope.notifications = [{name: 'Wrong Start Date', type: 'error', message: 'You cannot set SLAP Start Date to past.', show: true}];
                } else {
                    $scope.notifications = [];

                    /// Now move all excute items according to its start date
                    var deltaMonths = Math.ceil(moment.duration(newStartDate - beforeSave).asMonths());

                    _.each(excuteItems, function(item){
                        item.dueDate = moment(item.dueDate).add(deltaMonths, 'months').format('YYYY-MM-DD');
                        if ([28, 29, 30, 31].indexOf(moment(item.dueDate).date()) != -1){
                            item.dueDate = moment(item.dueDate).date(28).format('YYYY-MM-DD');
                        }

                    });

                    $q.all(excuteItems.map(function(item){ return item.save();}))
                    .then(function(responses){
                        return stepService.sendApiData(urls[urls.length - 1], $scope.data)
                        .then(function () {
                            stepService.setRequestApiFlag();
                            $scope.saved = true;
                            if(direction == 'forward')  
                                $state.go(nextprevStep.nextStep.sref); 
                            else if(direction == 'backward')
                                $state.go(nextprevStep.prevStep.sref);
                        });
                    });
                }
            } else {

                if(direction == 'forward')  
                    $state.go(nextprevStep.nextStep.sref); 
                else if(direction == 'backward')
                    $state.go(nextprevStep.prevStep.sref);
            }
            
        }

        $scope.$on('$stateChangeStart', function (event, toState, toStateParams) {
            if ($scope.saved != true) {
                sendData();
            }
        });
    }

}());
(function () {
    'use strict';

    PrivilegeAndResponsibilityController.$inject = ["$scope", "$state", "$timeout", "pageService", "userService", "stepService", "activeStep"];
    angular
        .module('app.pages.mindset')
        .controller('PrivilegeAndResponsibilityController', PrivilegeAndResponsibilityController);

    /* @ngInject */
    function PrivilegeAndResponsibilityController($scope, $state, $timeout, pageService, userService, stepService, activeStep) {

        var answersList = [];

        angular.extend($scope, activeStep.model, {
            options: [
                {
                    code: 1,
                    label: 'My primary driver'
                },
                {
                    code: 2,
                    label: 'Very important to me'
                },
                {
                    code: 3,
                    label: 'Neutral'
                },
                {
                    code: 4,
                    label: 'Not important to me'
                }
            ],
            forward: false,
            sendData:sendData,
            saved: false
        });

        $scope.availableOptions = [
            {
                code: 2,
                label: 'Very important to me'
            },
            {
                code: 3,
                label: 'Neutral'
            },
            {
                code: 4,
                label: 'Not important to me'
        }];
        $scope.notifications = [];
        if ($scope.businessName === null) {
            $scope.businessName = _.get(userService, 'user.businessName');
        }

        $scope.checkDropdownModels = checkDropdownModels;

        $timeout(checkShowBlockStatus);

        // --- vars ---

        pageService
            .reset()
            .setShowBC(false)
            .addCrumb({name: 'Dashboard', path: 'home'})
            .setPageTitle('Privilege and Responsibility');

        userService.getUser().then(function (user) {
            if (!_.isEmpty(user)) {
                $scope.data.businessName = user.businessName;
            }
        });

        function checkShowBlockStatus(){
            if (!_.isEmpty($scope.data.first) && !_.isEmpty($scope.data.second) && !_.isEmpty($scope.data.third) && !_.isEmpty($scope.data.fourth)) 
            {
                $scope.showInfoBlock = true;
                $scope.notifications = [];
                findPrimaryLabel();
                $scope.forward = true;
            }
            if(($scope.data.first == 'My primary driver')
                || ($scope.data.second == 'My primary driver')
                || ($scope.data.third == 'My primary driver')
                || ($scope.data.fourth == 'My primary driver')){
                    
                $scope.showInfoBlock = true;
                $scope.forward = true;
            }
            else{
                $scope.notifications = [{name: 'Missing Primary Driver', type: 'error', message: 'Please select at least one Primary Driver', show: true}];
                $scope.showInfoBlock = false;
                $scope.forward = false;
            }
        }
        function sendData(direction) {

            if (_.isEmpty($scope.data.text)) {
                return false;
            }

            var urls = activeStep.sref.split('.');
            stepService.updateActiveModel($scope);
            stepService.setFinishActiveStep();

            var nextprevStep = stepService.getNextAndPrevStep();

            var data = angular.extend({}, {
                first: $scope.data.first,
                second: $scope.data.second,
                third: $scope.data.third,
                fourth: $scope.data.fourth,
                text: $scope.data.text,
                additionalText: $scope.data.additionalText,
                result: $scope.data.result,
                resultId: $scope.data.resultId
            });

            return stepService.sendApiData(urls[urls.length - 1], data)
                .then(function () {
                    $scope.saved = true;
                    if(direction == 'forward')  
                        $state.go(nextprevStep.nextStep.sref); 
                    else if(direction == 'backward')
                        $state.go(nextprevStep.prevStep.sref);
                });
        }


        function checkDropdownModels(model, result, changedItem) {
            checkShowBlockStatus();
        }

        function findPrimaryLabel() {
            var resultList = _.cloneDeep($scope.options);
            resultList = _.reverse(resultList);

            _.each(resultList, function (value) {

                if ($scope.data.first === value.label) {
                    $scope.data.result = 'provide for my family';
                    $scope.data.resultId = '0';
                    return true;
                }

                if ($scope.data.second === value.label) {
                    $scope.data.result = 'create jobs';
                    $scope.data.resultId = '1';
                    return true;
                }

                if ($scope.data.third === value.label) {
                    $scope.data.result = 'give more to my community';
                    $scope.data.resultId = '2';
                    return true;
                }

                if ($scope.data.fourth === value.label) {
                    $scope.data.result = 'helping the economy';
                    $scope.data.resultId = '3';
                    return true;
                }
            });
        }


        $scope.$on('$stateChangeStart', function (event, toState, toStateParams) {
            if ($scope.saved != true) {
                sendData();
            }
        });
    }


})();

(function () {
    'use strict';

    OurCommitmentController.$inject = ["$scope", "pageService", "activeStep", "stepService", "$state", "$rootScope"];
    angular
        .module('app.pages.mindset')
        .controller('OurCommitmentController', OurCommitmentController);

    /* @ngInject */
    function OurCommitmentController($scope, pageService, activeStep, stepService,$state, $rootScope) {

        angular.extend($scope, activeStep.model, {
            forward: true,
            sendData: sendData,
            saved: false
        });

        pageService
            .reset()
            .setShowBC(false)
            .addCrumb({name: 'Dashboard', path: 'home'})
            .setPageTitle('Our Commitment To You');

        function sendData(direction) {
            stepService.updateActiveModel($scope);
            stepService.setFinishActiveStep();
            var nextprevStep = stepService.getNextAndPrevStep();
            if(direction == 'forward')  
				$state.go(nextprevStep.nextStep.sref); 
            else if(direction == 'backward')
				$state.go(nextprevStep.prevStep.sref);
            $scope.saved = true;
            
        }

        $scope.$on('$stateChangeStart', function (event, toState, toStateParams) {
            if ($scope.saved != true) {
                sendData();
            }
        });

    }
}());
(function () {
    'use strict';

    SlapMindsetController.$inject = ["$scope", "pageService", "activeStep", "stepService", "$state"];
    angular
        .module('app.pages.mindset')
        .controller('SlapMindsetController', SlapMindsetController);

    /* @ngInject */
    function SlapMindsetController($scope,pageService,activeStep,stepService,$state) {
        angular.extend($scope, activeStep.model, {
            forward: true,
            sendData: sendData,
            saved: false
        });

        pageService
            .reset()
            .setShowBC(false)
            .addCrumb({name: 'Dashboard', path: 'home'})
            .setPageTitle('Get the SLAPmindset ');

        function sendData(direction) {
            stepService.updateActiveModel($scope);
            stepService.setFinishActiveStep();
            var nextprevStep = stepService.getNextAndPrevStep();
            if(direction == 'forward')  
				$state.go(nextprevStep.nextStep.sref); 
            else if(direction == 'backward')
				$state.go(nextprevStep.prevStep.sref);
            
            $scope.saved = true;
        }

        $scope.$on('$stateChangeStart', function (event, toState, toStateParams) {
            if ($scope.saved != true) {
                sendData();
            }
        });
    }
}());
(function () {
    'use strict';

    CashFlowController.$inject = ["$scope", "pageService", "activeStep", "stepService", "$state"];
    angular
        .module('app.pages.mindset')
        .controller('CashFlowController', CashFlowController);

    /* @ngInject */
    function CashFlowController($scope, pageService, activeStep, stepService,$state) {

        angular.extend($scope, activeStep.model, {
            forward: true,
            sendData: sendData,
            saved: false
        });

        pageService
            .reset()
            .setShowBC(false)
            .addCrumb({name: 'Dashboard', path: 'home'})
            .setPageTitle('Cashflow Capacity Catch 22');

        function sendData(direction) {
            stepService.updateActiveModel($scope);
            stepService.setFinishActiveStep();
            var nextprevStep = stepService.getNextAndPrevStep();
            if(direction == 'forward')  
				$state.go(nextprevStep.nextStep.sref); 
            else if(direction == 'backward')
				$state.go(nextprevStep.prevStep.sref);
            $scope.saved = true;
        }

        $scope.$on('$stateChangeStart', function (event, toState, toStateParams) {
            if ($scope.saved != true) {
                sendData();
            }
        });
    }
}());
(function () {
    'use strict';

    AreYourStuckController.$inject = ["$scope", "activeStep", "mindsetService", "pageService", "stepService", "$state"];
    angular
        .module('app.pages.mindset')
        .controller('AreYourStuckController', AreYourStuckController);

    /* @ngInject */
    function AreYourStuckController($scope, activeStep, mindsetService, pageService, stepService, $state) {

        angular.extend($scope, activeStep.model, {
            forward: true,
            sendData: sendData,
            saved: false
        });

        if($scope.data === null) {
            $scope.data = mindsetService.getStuckSliders();
        }

        pageService
            .reset()
            .setShowBC(false)
            .addCrumb({name: 'Dashboard', path: 'home'})
            .setPageTitle('Are You Stuck?');

        function sendData(direction) {
            stepService.updateActiveModel($scope);
            stepService.setFinishActiveStep();

            var nextprevStep = stepService.getNextAndPrevStep();
            var urls = activeStep.sref.split('.');
                return stepService.sendApiData(urls[urls.length - 1], $scope.data)
                .then(function () {
                    if(direction == 'forward')  
                        $state.go(nextprevStep.nextStep.sref); 
                    else if(direction == 'backward')
                        $state.go(nextprevStep.prevStep.sref);
                    $scope.saved = true;
                });
        }

        $scope.$on('$stateChangeStart', function (event, toState, toStateParams) {
            if ($scope.saved != true) {
                sendData();
            }
        });
    }
}());
(function () {
    'use strict';

    angular
        .module('app.pages.main', []);

})();
(function () {
    'use strict';

    WelcomeController.$inject = ["$scope"];
    angular
        .module('app.pages.main')
        .controller('WelcomeController', WelcomeController);

    /* @ngInject */
    function WelcomeController($scope) {

        $scope.dt = new Date();
    }
})();
(function () {
    'use strict';

    MainUnauthorizedController.$inject = ["pageService"];
    angular
        .module('app.pages.main')
        .controller('MainUnauthorizedController',MainUnauthorizedController);

    /* @ngInject */
    function MainUnauthorizedController(pageService) {

        // --- init ---

        pageService.reset().addCrumb({name:'UnAuthorized',path:'UnAuthorized'});
    }
})();
(function () {
    'use strict';

    MainResetPasswordController.$inject = ["$scope", "$stateParams", "$auth", "$state", "toaster", "pageService", "userService"];
    angular
        .module('app.pages.main')
        .controller('MainResetPasswordController', MainResetPasswordController);

    /* @ngInject */
    function MainResetPasswordController($scope, $stateParams, $auth, $state, toaster, pageService, userService) {

        // --- vars ---

        $scope.reset = {
            new_password: ''
        };
        $scope.token = $stateParams.token;

        pageService.reset().setPageTitle('Reset Password').addCrumb({name: 'Reset Password', path: 'reset'});

        $scope.errors = {};

        // --- methods ---

        $scope.submit = function () {
            if($scope.reset.new_password == ''){
                $scope.errors = {'new_password':['New Password are empty!']};
            }else {
                userService.setPassword($scope.reset,$scope.token).then(function (response) {
                    if(response.data._id){
                        $state.go('login');
                        toaster.pop({type: 'success', body: "Password has been saved!"});
                    }else{
                        toaster.pop({type: 'error', body: "Server error!"});
                        $scope.errors = {};
                    }
                    $scope.errors.password = [response.data[0].error];
                });
            }
        };
    }
})();
(function () {
    'use strict';

    MainResetController.$inject = ["$scope", "$window", "$auth", "$state", "toaster", "pageService", "userService"];
    angular
        .module('app.pages.main')
        .controller('MainResetController', MainResetController);

    /* @ngInject */
    function MainResetController($scope, $window, $auth, $state, toaster, pageService, userService) {

        // --- vars ---

        $scope.email = '';

        $scope.errors = {};

        // --- methods ---
        pageService.reset().setPageTitle(' Request Password Reset Confirmation').addCrumb({name: 'Request Password Reset Confirmation', path: 'reset-password'});
        $scope.back = function () {
            $window.history.back();
        };

        $scope.submit = function () {
            userService.reset($scope.email)
                .then(
                    function (response) {
                        toaster.pop({type: 'success', body: response.data.message ? response.data.message : "Confirm email was sent!"});
                        $state.go('login');
                    }
                )
                .catch(function(err) {
                    toaster.pop({type: 'error', body: "User is not found or Failed to send email!"});
                });
        };

        // --- init ---


    }
})();
(function() {
    'use strict';

    RegistrationStep3Controller.$inject = ["$state", "productStorage", "toaster", "$auth", "couponService"];
    angular
        .module('app.pages.main')
        .controller('RegistrationStep3Controller', RegistrationStep3Controller);

    /* @ngInject */
    function RegistrationStep3Controller($state,productStorage,toaster,$auth,couponService) {
        if(!productStorage.getPlan()) {
            $state.go('step1');
            return;
        }

        var vm = this;
        vm.isRenew = false;
        
        vm.plan = productStorage.getPlan();
        vm.build = productStorage.getBuild();
        if (productStorage.isRenew()){
            vm.isRenew = true;
            vm.user = productStorage.getUser();
            vm.user.planId = vm.plan._id;
            vm.user.planDate = new Date();
            vm.user.buildId = vm.build ? vm.build._id : null;
            vm.user.build_date = vm.build ? new Date() : null;
            vm.user.code = null;
        } else
            vm.user = {
                planId: vm.plan._id,
                plan_date: new Date(),
                buildId:  vm.build ? vm.build._id : null,
                build_date: vm.build ? new Date() : null,
                code: null
            };
        
        vm.useCoupon = false;

        vm.calculateTodayPayment = productStorage.calculateTodayPayment();
        vm.calculateMonthlyPayment = productStorage.calculateMonthlyPayment();

        vm.signup = signup;
        vm.apply = apply;

        //////////////////

        function signup(event,form) {
            event.preventDefault();
            
            if(!vm.isRenew && form.$invalid) {
                toaster.pop({type: 'error', body: "Please check your details" });
                return;
            }
            vm.user.isRenew = vm.isRenew;
            vm.user.renewFrom = productStorage.getRenewFrom();
            $auth.signup(vm.user)
                .then(
                    function (response) {
                        if (response.data._id) {
                            vm.user.auth_key = response.data._id;
                            // toaster.pop({type: 'success', body: "Confirmation email was sent! Run to your inbox to check it out"});
                            toaster.pop({type: 'success', body: "Registered. Enter your login and password to enter the site"});
                            productStorage.resetStorage();
                            $state.go('login');
                        }
                        // $scope.errors = response.data.errors;
                    }
                )
                .catch( function(err) {
                    toaster.pop({type: 'error', body: err.data.message ? err.data.message : err.data.errmsg });
                });
        }

        function apply() {
            if(vm.useCoupon) {
                return;
            }

            couponService.validCoupon(vm.user.code,vm.plan._id)
                .then(function(response) {
                    productStorage.setCoupon(response.data);
                    vm.calculateTodayPayment = productStorage.calculateTodayPayment();
                    vm.calculateMonthlyPayment = productStorage.calculateMonthlyPayment();
                    vm.useCoupon = true;
                    toaster.pop({type:'success',body: 'Your promo code is valid and applied successfully'});
                })
                .catch(function(err) {
                    toaster.pop({type:'error',body: err.data.message});
                });
        }
    }
}());
(function() {
    'use strict';

    RegistrationStep2Controller.$inject = ["productsService", "productStorage", "$state"];
    angular
        .module('app.pages.main')
        .controller('RegistrationStep2Controller', RegistrationStep2Controller);

    /* @ngInject */
    function RegistrationStep2Controller(productsService,productStorage,$state) {

        if(!productStorage.getPlan()) {
            $state.go('step1');
        }

        var vm = this;
        vm.active = null;
        vm.build = productStorage.getBuild();

        productsService.getBuilds().then(function(response) {
            vm.builds = response.data;
        });

        vm.calculateFullCost = function(build) {
            return productStorage.calculateFullCostBuild(build);
        };

        vm.chooseBuild = function(build,event) {
            if(productStorage.getBuild() && productStorage.getBuild()._id == build._id) {
                $(event.target).closest('.rectangle').removeClass('rectangle-active');
                productStorage.setBuild(null);
                vm.active = null;
                return;
            }

            vm.build = null;
            productStorage.setBuild(build);

            if(vm.active) {
                vm.active.removeClass('rectangle-active');
            }

            vm.active = $(event.target).closest('.rectangle');
            vm.active.addClass('rectangle-active');
        }
    }
}());
(function() {
    'use strict';

    RegistrationStep1Controller.$inject = ["productsService", "productStorage", "toaster"];
    angular
        .module('app.pages.main')
        .controller('RegistrationStep1Controller', RegistrationStep1Controller);

    /* @ngInject */
    function RegistrationStep1Controller(productsService,productStorage,toaster) {
        var vm = this;
        // TODO set pageservice for registration page1 2, 3
        vm.active = null;
        vm.plan= productStorage.getPlan();
        
        productsService.getPlans().then(function(response) {
            vm.plans = response.data;
        });

        vm.choosePlan = function(plan,event) {
            vm.plan = null;
            productStorage.setPlan(plan);

            if(vm.active) {
                vm.active.removeClass('rectangle-active');
            }

            vm.active = $(event.target).closest('.rectangle');
            vm.active.addClass('rectangle-active');
        };

        vm.nextStep = function(e) {
            if(!productStorage.getPlan()) {
                toaster.pop({type: 'error', body: 'Please select SLAP plan'});
                e.preventDefault();
            }

            return;
        }
    }
}());
(function () {
    'use strict';

    MainLogoutController.$inject = ["$auth", "$state"];
    angular
        .module('app.pages.main')
        .controller('MainLogoutController', MainLogoutController);

    /* @ngInject */
    function MainLogoutController($auth, $state) {

        // --- init ---

        $auth.logout();
        $state.go('home');
    }
})();
(function () {
    'use strict';

    MainLoginController.$inject = ["$scope", "$auth", "$state", "toaster", "pageService", "userService", "adminUserService"];
    angular
        .module('app.pages.main')
        .controller('MainLoginController', MainLoginController);

    /* @ngInject */
    function MainLoginController($scope, $auth, $state, toaster, pageService, userService, adminUserService) {

        // --- vars ---
        $scope.login = {
            email: '',
            password: ''
        };
        // cartService.onLogin();
        $scope.errors = {};

        // --- methods ---

        $scope.submit = function () {
            $auth.login($scope.login)
                .then(
                    function (response) {
                        toaster.pop({type: 'success', body: "Welcome!"});

                        // update user data
                        userService.loadUser(true).then(function (user) {
                            if(user.role == adminUserService.ROLE_ADMIN)
                                $state.go('admin.home');
                            else
                                $state.go('welcome');
                        });

                    }
                )
                .catch(function(err) {
                    toaster.pop({type: 'error', body: err.data.message ? err.data.message : 'Whoops, your password or email are incorrect'});
                });
        };

        // $scope.authenticate = function(provider) {
        //     $auth.authenticate(provider)
        //         .then(function(response) {
        //             console.log(response);
        //             toastr.success('You have successfully signed in with ' + provider + '!');
        //             userService.loadUser(true).then(function () {
        //                 $state.go('home');
        //             });
        //         })
        //         .catch(function(error) {
        //             if (error.error) {
        //                 // Popup error - invalid redirect_uri, pressed cancel button, etc.
        //                 toastr.error(error.error);
        //             } else if (error.data) {
        //                 // HTTP response error from server
        //                 toastr.error(error.data.message, error.status);
        //             } else {
        //                 toastr.error(error);
        //             }
        //         });
        // };

        // --- init ---

        pageService.reset().setPageTitle(' Login').addCrumb({name: 'Login', path: 'login'});

    }
})();
(function () {
    'use strict';

    MainIndexController.$inject = ["$scope", "pageService"];
    angular
        .module('app.pages.main')
        .controller('MainIndexController', MainIndexController);

    /* @ngInject */
    function MainIndexController($scope, pageService) {


        // --- vars ---

        pageService
            .reset()
            .setShowBC(false)
            .addCrumb({name: 'Dashboard', path: 'home'})
            .setPageTitle('Dashboard');
    }
})();
(function () {
    'use strict';

    MainConfirmController.$inject = ["$scope", "$stateParams", "$auth", "$state", "toaster", "pageService", "userService"];
    angular
        .module('app.pages.main')
        .controller('MainConfirmController', MainConfirmController);

    /* @ngInject */
    function MainConfirmController($scope, $stateParams, $auth, $state, toaster, pageService, userService) {

        // --- vars ---

        $scope.confirm = {
            password: '',
            repeat_passw: ''
        };
        $scope.auth_key = $stateParams.auth_key;

        $scope.stateGo = function () {
            $state.go('login');
        };

        $scope.errors = {};

        // --- methods ---

        $scope.submit = function () {
            if($scope.confirm.password == $scope.confirm.repeat_passw){
                if($scope.confirm.repeat_passw == '' || $scope.confirm.password == ''){
                    $scope.errors = {'repeat_passw':['Repeat Password are empty!'],'password':['Password are empty!']};
                }else {
                    userService.setPassword($scope.confirm, $scope.auth_key).then(function (response) {
                        if(response.data[0].result){
                            $state.go('login');
                            toaster.pop({type: 'success', body: "Successfully registered!"});
                        }else{
                            toaster.pop({type: 'error', body: "Server error!"});
                        }
                    });
                }
            }else{
                $scope.errors = {};
                toaster.pop({type: 'error', body: "Passwords do not match!"});
            }
        };

        // --- init ---
        // userService.check($scope.auth_key).then(function(response){
        //     if(!response.data.result){
        //         $state.go('login');
        //     }
        // });
        // if (!$scope.auth_key) {
        //     $state.go('login');
        // }
        pageService.reset().addCrumb({name: 'Create Password', path: 'confirm'});

    }
})();
(function () {
    'use strict';

    Main500Controller.$inject = ["pageService"];
    angular
        .module('app.pages.main')
        .controller('Main500Controller', Main500Controller);

    /* @ngInject */
    function Main500Controller(pageService) {

        // --- init ---

        pageService.reset().addCrumb({name:'500',path:'500'});
    }
})();
(function () {
    'use strict';

    Main404Controller.$inject = ["pageService"];
    angular
        .module('app.pages.main')
        .controller('Main404Controller', Main404Controller);

    /* @ngInject */
    function Main404Controller(pageService) {

        // --- init ---

        pageService.reset().addCrumb({name:'404',path:'404'});
    }
})();
(function() {
    'use strict';

    angular
        .module('app.pages.idealClient', []);
}());
(function () {
    'use strict';

    WhoAreYouIdealClientController.$inject = ["$scope", "$q", "$timeout", "$state", "pageService", "stepService", "activeStep", "idealclientService"];
    angular
        .module('app.pages.idealClient')
        .controller('WhoAreYouIdealClientController', WhoAreYouIdealClientController);

    /* @ngInject */
    function WhoAreYouIdealClientController($scope, $q, $timeout, $state, pageService, stepService, activeStep, idealclientService) {

        angular.extend($scope, activeStep.model, {
            emptyClient: {
                name: '',
                gender: '0',
                age: '0',
                maritalStatus: '0',
                kids: '0',
                employment: '0',
                location: '0',
                home: '0',
                transit: '0',
                hobbies: '0',
                reads: '0',
                number: 0
            },
            forward: true,
            shouldSelctIdeal: false,
            idealClientSelects: idealclientService.getClientSliders(),
            saved: false
        });

        var originalModel = activeStep.model;
        $scope.checkFormElements = checkFormElements;
        $scope.sendData = sendData;

        $timeout(addNewClient);

        function sendData(direction) {

            var nextprevStep = stepService.getNextAndPrevStep();
            var urls = activeStep.sref.split('.');

            var clients = $scope.data.clients;

            if ($scope.data.clients.length > 1) {

                clients = [];

                _.forEach($scope.data.clients, function (value) {

                    if (!angular.equals(value, $scope.emptyClient)) {
                        clients.push(value);
                    }

                });
            }

            // Get options for idealClient.
            var idealClient = idealclientService.calcIdealClient(clients);

            $scope.client = idealClient;

            // if should select
            if (!$scope.shouldSelctIdeal) {

                for ( var key in idealClient) {
                    //Check if the customer should select between preferable client type
                    if (idealClient[key].length >= 2) {
                        $scope.shouldSelctIdeal = true;
                    }
                }

                if ($scope.shouldSelctIdeal) {
                    // this means the option need to be selected 
                    

                    if (activeStep.model.data.clients.length == 0) {
                        // which means newly creating clients => 
                        // so fill with default

                        for ( var key in idealClient) {
                            //Fill Ideal client
                            $scope.data.idealClient[key] = idealClient[key][0];
                        }
                    }

                    // and go there to enter values
                    if ($("#idealclient-box").offset())
                        $('body').animate({
                            scrollTop: $("#idealclient-box").offset().top
                        }, 400);
                    return;
                } else {
                    // this means customer don't need to select preferable types and ok with defaults
                    // so fill with default

                    for ( var key in idealClient) {
                        //Fill Ideal client
                        $scope.data.idealClient[key] = idealClient[key][0];
                    }
                    //sendData

                    stepService.updateActiveModel($scope);
                    stepService.setFinishActiveStep();
                    
                    return stepService.sendApiData(urls[urls.length - 1], {clients: clients, idealClient: $scope.data.idealClient})
                        .then(function () {
                            if(direction == 'forward')  
                                $state.go(nextprevStep.nextStep.sref); 
                            else if(direction == 'backward')
                                $state.go(nextprevStep.prevStep.sref);
                        });
                }

            // already selected now or don't need to select. then save
            } else if ($scope.shouldSelctIdeal) {
                
                stepService.updateActiveModel($scope);
                stepService.setFinishActiveStep();
                
                return stepService.sendApiData(urls[urls.length - 1], {clients: clients, idealClient: $scope.data.idealClient})
                    .then(function () {
                        if(direction == 'forward')  
                            $state.go(nextprevStep.nextStep.sref); 
                        else if(direction == 'backward')
                            $state.go(nextprevStep.prevStep.sref);
                    });
            }
        }

        function addNewClient(model) {

            var index;

            if (model) {
                index = _.findIndex($scope.data.clients, model);
            }

            var force = false;
            if ($scope.data.clients.length > 0) {
                var lastItem = $scope.data.clients[$scope.data.clients.length - 1];
                if (!angular.equals(lastItem, $scope.emptyClient)) {
                    force = true;
                }
            }
            if ($scope.data.clients.length === 0 || $scope.data.clients.length === index + 1 || force) {
                var clientModel = _.cloneDeep($scope.emptyClient);
                $scope.data.clients.push(clientModel);
            }
        }

        function checkFormElements(model) {

            findEmptyInputs(model).then(function (result) {
                if (result) {
                    addNewClient(model);
                }
            });
        }

        function findEmptyInputs(model) {
            return $q(function (resolve) {

                var result = true;

                _.each(model, function (value, key) {

                    if (key !== 'number') {
                        if (value === '0' || _.isEmpty(value)) {
                            result = false;
                            return false;
                        }
                    }

                });

                resolve(result);
            });
        }

        // --- vars ---

        pageService
            .reset()
            .setShowBC(false)
            .addCrumb({name: 'Dashboard', path: 'home'})
            .setPageTitle('Who Are Your Ideal Clients');


        $scope.$on('$stateChangeStart', function (event, toState, toStateParams) {
            sendData();
        });
    }


})();


(function () {
    'use strict';

    Step2SummaryController.$inject = ["$scope", "activeStep", "pageService", "stepService", "$state", "userService", "idealclientService", "activityService"];
    angular
        .module('app.pages.idealClient')
        .controller('Step2SummaryController', Step2SummaryController);
    
    function Step2SummaryController($scope, activeStep, pageService,stepService, $state, userService, idealclientService, activityService) {

        angular.extend($scope, activeStep.model,{
            model: {
                clients: []
            },
            data: {},
            privilegesData: {
                second: ['providing', 'creating', 'giving', 'helping']
            },
            fifth: ['Market size', 'Local', 'Regional', 'National', 'Global'],
            gender: ['Empty', 'Male', 'Female'],
            maritalStatus: ['Empty', 'Single', 'Married', 'Divorced', 'Widowed'],
            kids: ['Empty', 'None', 'Young', 'Teens',' Adults'],
            employment: ['Empty', 'Doesn’t Work Established Entrepreneur', 'Small Entrepreneur', 'Senior Employed', 'Mid Level Employed', 'Junior Employed'],
            location: ['Empty', 'City', 'Suburbs', 'Rural', 'Other'],
            home: ['Empty', 'Condo', 'Apartment', 'House', 'Farm', 'Other'],
            transit: ['Empty', 'Car', 'Bike', 'Train', 'Walking', 'Planes', 'Other'],
            age: ['Age','11-20','21-30','31-40','41-50','51-60','61-70','71-80','81-90'],
            hobbies: ['Hobbies', 'Volunteering',  'Working Out', 'Shopping',  'Traveling',   'Sports',  'Reading',  'Arts & Culture'],
            reads: ['Reads', 'Business Book', 'Self Help Book', 'Magazine', 'Novel', 'Blog Posts',  'Newspaper'],
            forward: true,
            sendData: sendData,
            saved: false
        });

        getData();

        pageService
            .reset()
            .setShowBC(false)
            .addCrumb({name: 'Dashboard', path: 'home'})
            .setPageTitle('Ideal Client');

        function sendData(direction) {
            stepService.updateActiveModel($scope);
            if(stepService.setFinishActiveStep())
                userService.loadUser().then(function(me){
                    activityService.add({
                        userId: me._id,
                        title: 'Step2 Done',
                        type: 'Milestone',  
                        notes: me.businessName + ' finished building Step2.',
                        journey: {section: 'build', name: 'Step2 Done'}})
                        .then(function(){});    
                });
            var nextprevStep = stepService.getNextAndPrevStep();

            if(direction == 'forward')  
				$state.go(nextprevStep.nextStep.sref); 
            else if(direction == 'backward')
				$state.go(nextprevStep.prevStep.sref);
        }


        function getData() {

            stepService.getApiData('yourStatement')  //TODO: request api? data service
                .then(function (response) {
                    if (response && response.status === 200) {

                        angular.extend($scope.model, {
                            stepOneSummary: _.get(response, 'data.yourStatement', {})
                        });
                        userService.getUser().then(function (user) {
                            $scope.data.businessName = user.businessName;
                        });
                    }
                });

            stepService.getApiData('allMindsetUser') //TODO: Think over the dynamics url
                .then(function (response) {
                    if (response && response.status === 200) {
                        angular.extend($scope.data, {
                            privilegeInfo: _.get(response, 'data.privilegeAndResponsibility', {})
                        });
                    }
                });

            stepService.getApiData('whoAreYouIdealClient')  //TODO: request api? data service
                .then(function (response) {
                    if (response && response.status === 200) {
                        $scope.model.clients = _.get(response, 'data.whoAreYouIdealClient', []);
                        $scope.client = idealclientService.calcIdealClient($scope.model.clients);
                    }
                });
                
        }
        
        $scope.$on('$stateChangeStart', function (event, toState, toStateParams) {
            sendData();
        });
    }
}());
(function () {
    'use strict';

    SlapStatementController.$inject = ["$scope", "pageService"];
    angular
        .module('app.pages.idealClient')
        .controller('SlapStatementController', SlapStatementController);

    function SlapStatementController($scope, pageService) {

        angular.extend($scope, {
            model: {
                first: 'Dropdown Label'
            },
            showContent: false,
            showVideoBlock: false,
            showStaticTextBlock: false,
            saved: false
        });

        pageService
            .reset()
            .setShowBC(false)
            .addCrumb({name: 'Dashboard', path: 'home'})
            .setPageTitle('SLAPstatement');


        $scope.$on('$stateChangeStart', function (event, toState, toStateParams) {
            sendData();
        });
    }
}());
(function () {
    'use strict';

    NameYourIdealClientController.$inject = ["$scope", "pageService", "activeStep", "stepService", "$state"];
    angular
        .module('app.pages.idealClient')
        .controller('NameYourIdealClientController', NameYourIdealClientController);

    function NameYourIdealClientController($scope, pageService, activeStep,stepService,$state) {

        angular.extend($scope, activeStep.model, {
            forward: true,
            sendData: sendData,
            model: {
                fourth: null
            },
            showVideoBlock: false,
            showStaticTextBlock: false,
            showIdealClientNameBlock: false,
            saved: false
        });

        getData();  // TODO: request api? data service no reload

        function getData() {

            stepService.getApiData('nameYourIdealClient') //TODO: Think over the dynamics url
                .then(function (response) {
                    if (response && response.status === 200) {
                        $scope.model.fourth = response.data;
                    }
                });

        }

        pageService
            .reset()
            .setShowBC(false)
            .addCrumb({name: 'Dashboard', path: 'home'})
            .setPageTitle('Name Your Ideal Client');

        function sendData(direction) {
            stepService.updateActiveModel($scope);
            stepService.setFinishActiveStep();
            stepService.setRequestApiFlag();
            
            var nextprevStep = stepService.getNextAndPrevStep();
            var urls = activeStep.sref.split('.');

            return stepService.sendApiData(urls[urls.length - 1], $scope.model)
                .then(function () {
                    if(direction == 'forward')  
                        $state.go(nextprevStep.nextStep.sref); 
                    else if(direction == 'backward')
                        $state.go(nextprevStep.prevStep.sref);
                });
        }
        
        $scope.$on('$stateChangeStart', function (event, toState, toStateParams) {
            sendData();
        });

    }
}());
(function() {
    'use strict';

    IdealClientQAController.$inject = ["$scope", "activeStep", "pageService", "stepService", "$state"];
    angular
        .module('app.pages.idealClient')
        .controller('IdealClientQAController', IdealClientQAController);

    /* @ngInject */
    function IdealClientQAController($scope, activeStep, pageService,stepService, $state) {

        angular.extend($scope, activeStep.model, {
            forward: true,
            sendData: sendData,
            saved: false
        });

        pageService
            .reset()
            .setShowBC(false)
            .addCrumb({name: 'Dashboard', path: 'home'})
            .setPageTitle('SLAPstatement Q&A');

        function sendData(direction) {
            stepService.updateActiveModel($scope);
            stepService.setFinishActiveStep();

            var nextprevStep = stepService.getNextAndPrevStep();

            if(direction == 'forward')  
				$state.go(nextprevStep.nextStep.sref); 
            else if(direction == 'backward')
				$state.go(nextprevStep.prevStep.sref);
        }
        
        $scope.$on('$stateChangeStart', function (event, toState, toStateParams) {
            sendData();
        });
    }
}());
(function() {
    'use strict';

    IdealClientOverviewController.$inject = ["$scope", "pageService", "activeStep", "stepService", "$state"];
    angular
        .module('app.pages.idealClient')
        .controller('IdealClientOverviewController', IdealClientOverviewController);

    /* @ngInject */
    function IdealClientOverviewController($scope, pageService, activeStep, stepService, $state) {

        angular.extend($scope, activeStep.model, {
            forward: true,
            sendData: sendData,
            saved: false
        });

        pageService
            .reset()
            .setShowBC(false)
            .addCrumb({name: 'Dashboard', path: 'home'})
            .setPageTitle('SLAPstatement Q&A');

        function sendData(direction) {
            stepService.updateActiveModel($scope);
            stepService.setFinishActiveStep();

            var nextprevStep = stepService.getNextAndPrevStep();

            if(direction == 'forward')  
				$state.go(nextprevStep.nextStep.sref); 
            else if(direction == 'backward')
				$state.go(nextprevStep.prevStep.sref);
        }
        
        $scope.$on('$stateChangeStart', function (event, toState, toStateParams) {
            sendData();
        });
    }
}());
(function () {
    'use strict';

    DefineYourIdealClientController.$inject = ["$scope", "$state", "pageService", "stepService", "activeStep", "idealclientService"];
    angular
        .module('app.pages.idealClient')
        .controller('DefineYourIdealClientController', DefineYourIdealClientController);

    function DefineYourIdealClientController($scope, $state, pageService, stepService,activeStep, idealclientService) {

        angular.extend($scope, activeStep,{
            forward: true,
            sendData: sendData,
            idealClientSelects: idealclientService.getClientSliders(),
            saved: false
        });

        getData();

        function getData() {
            // var urls = _.get($state.current, 'params.prev.sref').split('.'); //TODO : request api? data service save!
            var url = '/whoAreYouIdealClient';
            // return stepService.getApiData(urls[urls.length - 1])
            return stepService.getApiData(url)
                .then(function (response) {
                    if (response && response.status === 200) {
                        $scope.model = _.get(response, 'data.whoAreYouIdealClient', []);
                    }

                });
        }

        pageService
            .reset()
            .setShowBC(false)
            .addCrumb({name: 'Dashboard', path: 'home'})
            .setPageTitle('Ideal Client');
        

        function sendData(direction) {
            stepService.updateActiveModel($scope);
            stepService.setFinishActiveStep();

            var nextprevStep = stepService.getNextAndPrevStep();

            if(direction == 'forward')
                $state.go(nextprevStep.nextStep.sref);
            else if(direction == 'backward')
                $state.go(nextprevStep.prevStep.sref);
        }
        
        $scope.$on('$stateChangeStart', function (event, toState, toStateParams) {
            sendData();
        });
    }
}());
(function () {
    'use strict';

    CommitYourIdealClientController.$inject = ["$scope", "activeStep", "pageService", "stepService", "$state", "userService"];
    angular
        .module('app.pages.idealClient')
        .controller('CommitYourIdealClientController', CommitYourIdealClientController);

    function CommitYourIdealClientController($scope, activeStep, pageService,stepService, $state, userService) {

        angular.extend($scope, activeStep.model, {
            first: ['does', 'provides', 'sells'],
            third: ['for', 'to'],
            fifth: ['Market size', 'Local', 'Regional', 'National', 'Global'],
            privilegesData: {
                resultList: ['provide for my family', 'create jobs', 'give more to my community', 'helping the economy'],
                second: ['providing', 'creating', 'giving', 'helping']
            },
            showWhatInput: false,
            forward: true,
            sendData: sendData,
            saved: false
        });

        var originalData, originalPrivilagesData;

        userService.getUser().then(function (user) {
            $scope.businessName = user.businessName;
        });

        getData();  // TODO: request api? data service no reload

        function getData() {

            stepService.getApiData('allMindsetUser') //TODO: Think over the dynamics url
                .then(function (response) {
                    if (response && response.status === 200) {
                        angular.extend($scope, {
                            privilegeInfo: _.get(response, 'data.privilegeAndResponsibility', {})
                        });

                        originalPrivilagesData = _.clone($scope.privilegeInfo);
                    }
                });

            return stepService.getApiData('yourStatement') //TODO: Think over the dynamics url
                .then(function (response) {
                    if (response && response.status === 200) {
                        $scope.data = _.get(response, 'data.yourStatement', []);
                        originalData = _.clone($scope.data);
                    }
                });
        }

        pageService
            .reset()
            .setShowBC(false)
            .addCrumb({name: 'Dashboard', path: 'home'})
            .setPageTitle('Statement');

        function sendData(direction) {

            stepService.updateActiveModel($scope);
            stepService.setFinishActiveStep();
            var nextprevStep = stepService.getNextAndPrevStep();

            if (angular.equals($scope.data, originalData) && angular.equals($scope.privilegeInfo, originalPrivilagesData)) {
                if(direction == 'forward')
                    $state.go(nextprevStep.nextStep.sref);
                else
                    $state.go(nextprevStep.prevStep.sref);
            } else {
                stepService.setRequestApiFlag();

                updateData().then(function () {
                    if(direction == 'forward')
                        $state.go(nextprevStep.nextStep.sref);
                    else if(direction == 'backward')
                        $state.go(nextprevStep.prevStep.sref);
                });
            }
        }

        function updateData() {
            return new Promise(function (resolve, reject) {

                var statementResolve = true;
                var privilegesResolve = true;

                if (!angular.equals($scope.data, originalData)) {

                    statementResolve = false;

                    stepService.sendApiData('yourStatement', $scope.data)
                        .then(function () {
                            statementResolve = true;
                            if (privilegesResolve) {
                                resolve();
                            }
                        })
                        .catch(function () {
                            reject();
                        });
                }

                if (!angular.equals($scope.privilegeInfo, originalPrivilagesData)) {

                    privilegesResolve = false;

                    if ($scope.privilegeInfo.resultId !== originalPrivilagesData.resultId) {
                        var oldKey = getKeyById(originalPrivilagesData.resultId); // field in which the 'primary driver' was stored
                        var newKey = getKeyById($scope.privilegeInfo.resultId);   // field in which it is now
                        var temp = _.clone($scope.privilegeInfo[newKey]);
                        $scope.privilegeInfo[newKey] = 'My primary driver';
                        $scope.privilegeInfo[oldKey] = temp;
                    }

                    // update result label value for privileges and responsibility
                    $scope.privilegeInfo.result = $scope.privilegesData[+$scope.privilegeInfo.resultId];

                    stepService.sendApiData('privilegeAndResponsibility', $scope.privilegeInfo)
                        .then(function () {
                            privilegesResolve = true;
                            if (statementResolve) {
                                resolve();
                            }
                        })
                        .catch(function () {
                            reject();
                        });
                }
            });
        }

        function getKeyById(id) {

            var res;

            switch (id) {

                case '0':
                    res = 'first';
                    break;

                case '1':
                    res = 'second';
                    break;

                case '2':
                    res = 'third';
                    break;

                case '3':
                    res = 'fourth';
                    break;

                default:
                    res = 'first';
                    break;
            }

            return res;
        }
        
        $scope.$on('$stateChangeStart', function (event, toState, toStateParams) {
            sendData();
        });
    }
}());
(function () {
    'use strict';

angular
    .module('app.pages.execute', []);
}());
(function () {
    'use strict';

    TourExecuteController.$inject = ["$scope", "activeStep", "pageService", "stepService", "$state"];
    angular
        .module('app.pages.execute')
        .controller('TourExecuteController', TourExecuteController);

    /* @ngInject */
    function TourExecuteController($scope, activeStep, pageService, stepService, $state) {

        angular.extend($scope, activeStep.model, {
            forward: true,
            sendData: sendData
        });

        pageService
            .reset()
            .setShowBC(false)
            .addCrumb({name: 'Dashboard', path: 'home'})
            .setPageTitle('Tour of Execute');

        function sendData(direction) {
            stepService.updateActiveModel($scope);
            stepService.setFinishActiveStep();

            var nextprevStep = stepService.getNextAndPrevStep();

            if(direction == 'forward')
                $state.go(nextprevStep.nextStep.sref);
            else
                $state.go(nextprevStep.prevStep.sref);
        }
    }
}());
(function () {
    'use strict';

    SetYourselfUpForSuccessController.$inject = ["$scope", "activeStep", "pageService", "stepService", "$state"];
    angular
        .module('app.pages.execute')
        .controller('SetYourselfUpForSuccessController', SetYourselfUpForSuccessController);

    function SetYourselfUpForSuccessController($scope, activeStep, pageService, stepService, $state) {

        angular.extend($scope, activeStep.model, {
            forward: true,
            sendData: sendData
        });

        pageService
            .reset()
            .setShowBC(false)
            .addCrumb({name: 'Dashboard', path: 'home'})
            .setPageTitle('Action Plan');

        function sendData(direction) {
            stepService.updateActiveModel($scope);
            stepService.setFinishActiveStep();

            var nextprevStep = stepService.getNextAndPrevStep();

            if(direction == 'forward')
                $state.go(nextprevStep.nextStep.sref);
            else
                $state.go(nextprevStep.prevStep.sref);
        }
    }
}());
(function () {
    'use strict';

    LivingDayToDayController.$inject = ["$scope", "activeStep", "pageService", "stepService", "$state"];
    angular
        .module('app.pages.execute')
        .controller('LivingDayToDayController', LivingDayToDayController);

    function LivingDayToDayController($scope, activeStep, pageService, stepService, $state) {

        angular.extend($scope, activeStep.model, {
            forward: true,
            sendData: sendData
        });

        pageService
            .reset()
            .setShowBC(false)
            .addCrumb({name: 'Dashboard', path: 'home'})
            .setPageTitle('Action Plan');

        function sendData(direction) {
            stepService.updateActiveModel($scope);
            stepService.setFinishActiveStep();

            var nextprevStep = stepService.getNextAndPrevStep();

            if(direction == 'forward')
                $state.go(nextprevStep.nextStep.sref);
            else
                $state.go(nextprevStep.prevStep.sref);
        }
    }
}());
(function () {
    'use strict';

    CommitYourselfController.$inject = ["$scope", "activeStep", "pageService", "stepService", "$state"];
    angular
        .module('app.pages.execute')
        .controller('CommitYourselfController', CommitYourselfController);

    function CommitYourselfController($scope, activeStep, pageService, stepService, $state) {

        angular.extend($scope, activeStep.model, {
            forward: true,
            sendData: sendData
        });


        pageService
            .reset()
            .setShowBC(false)
            .addCrumb({name: 'Dashboard', path: 'home'})
            .setPageTitle('Action Plan');

        function sendData(direction) {
            stepService.updateActiveModel($scope);
            stepService.setFinishActiveStep();

            var nextprevStep = stepService.getNextAndPrevStep();

            if(direction == 'forward')
                $state.go(nextprevStep.nextStep.sref);
            else
                $state.go(nextprevStep.prevStep.sref);
        }
    }
}());
(function () {
    'use strict';

    angular
        .module('app.pages.actionPlan', []);
}());
(function () {
    'use strict';

    WorldAroundYouController.$inject = ["$scope", "activeStep", "pageService", "stepService", "$state", "$timeout", "actionplanService"];
    angular
        .module('app.pages.actionPlan')
        .controller('WorldAroundYouController', WorldAroundYouController);

    function WorldAroundYouController($scope, activeStep, pageService,stepService, $state, $timeout, actionplanService) {

        angular.extend($scope, activeStep.model, {
            forward: true,
            sendData: sendData,
            model: {
            },
            startDate: {},
            QMonths: [],
            monthNames: actionplanService.getMonthLongNames(),
            currentQut: 1,
            checkEventCompleted: checkEventCompleted,
            deleteEvent: deleteEvent,
            saved: false
        });

        pageService
            .reset()
            .setShowBC(false)
            .addCrumb({name: 'Dashboard', path: 'home'})
            .setPageTitle('World Around You');

        if ($scope.data.eventsByMonth.length == 0) {
            $scope.data.eventsByMonth = actionplanService.getDefaultEvents();
        }
        
        $timeout(function() {
            _.each($scope.data.eventsByMonth, function(month){
                addNewEvents(month);
            });
        });

        getData();
        function getData() {
            // var urls = _.get($state.current, 'params.prev.sref').split('.');
            var url = 'allMindsetUser';

            // return stepService.getApiData(urls[urls.length - 1])
            return stepService.getApiData(url) //TODO: Think over the dynamics url
                .then(function (response) {
                    if (response && response.status === 200) {

                        $scope.startDate = response.data.slapStartDate;
                        $scope.QMonths.push( actionplanService.getNthQuaterMonths ($scope.startDate.month, 1));
                        $scope.QMonths.push( actionplanService.getNthQuaterMonths($scope.startDate.month, 2));
                        $scope.QMonths.push( actionplanService.getNthQuaterMonths($scope.startDate.month, 3));
                        $scope.QMonths.push( actionplanService.getNthQuaterMonths($scope.startDate.month, 4));
                    }
                });
        }

        function addNewEvents(month, model) {
            var index;

            if (model) {
                index = _.findIndex(month, model);
            }

            var force = false;
            if (month.events.length > 0) {
                var lastItem = month.events[month.events.length - 1];
                if (!angular.equals(lastItem, {name:''})) {
                    force = true;
                }
            }
            if (month.events.length === 0 || month.events.length === index + 1 || force) {
                month.events.push({name: ''});
            }
        }

        function sendData(direction) {
            stepService.updateActiveModel($scope);
            stepService.setFinishActiveStep();

            var nextprevStep = stepService.getNextAndPrevStep();
            var urls = activeStep.sref.split('.');

            var data = {};

            var eventsByMonth = _.map($scope.data.eventsByMonth, function (month) {
                return {actionItems: month.actionItems, events: month.events.slice(0, month.events.length - 1)};
                
            });
            data.eventsByMonth = eventsByMonth;

            return stepService.sendApiData(urls[urls.length - 1], data)
                .then(function () {
                    $scope.saved = true;
                    stepService.setRequestApiFlag();
                    if(direction == 'forward')  
                        $state.go(nextprevStep.nextStep.sref); 
                    else if(direction == 'backward')
                        $state.go(nextprevStep.prevStep.sref);
                });
        }



        function checkEventCompleted(event, month, evt) {
            if (event.name.trim() != '') {
                addNewEvents(month, event);
            } else {
            }
        }
        
        function deleteEvent(event, month) {
            if (month.events.length > 1) {
                _.remove(month.events, function (n) {
                    return n === event;
                });
            }
        }

        $scope.$on('$stateChangeStart', function (event, toState, toStateParams) {
            if ($scope.saved != true) {
                sendData();
            }
        });

    }
}());
(function () {
    'use strict';

    WhatsHappeningController.$inject = ["$scope", "activeStep", "pageService", "stepService", "$state", "$timeout", "actionplanService"];
    angular
        .module('app.pages.actionPlan')
        .controller('WhatsHappeningController', WhatsHappeningController);

    function WhatsHappeningController($scope, activeStep, pageService,stepService, $state, $timeout, actionplanService) {

        angular.extend($scope, activeStep.model, {
            forward: true,
            sendData: sendData,
            startDate: {},
            QMonths: [],
            monthNames: actionplanService.getMonthLongNames(),
            currentQut: 1,
            saved: false,
            showEventsBox: true
        });

        pageService
            .reset()
            .setShowBC(false)
            .addCrumb({name: 'Dashboard', path: 'home'})
            .setPageTitle(stepService.getActiveStep().name);
        if ($scope.data.length == 0) {
            $scope.data = [
                {
                    "impactClient" : "",
                    "impactBusiness" : ""
                },
                {
                    "impactClient" : "",
                    "impactBusiness" : ""
                },
                {
                    "impactClient" : "",
                    "impactBusiness" : ""
                },
                {
                    "impactClient" : "",
                    "impactBusiness" : ""
                },
            ];
        }
        getData();
        function getData() {
            // var urls = _.get($state.current, 'params.prev.sref').split('.');
            var url = 'allMindsetUser';

            // return stepService.getApiData(urls[urls.length - 1])
            stepService.getApiData(url) //TODO: Think over the dynamics url
                .then(function (response) {
                    if (response && response.status === 200) {

                        $scope.startDate = response.data.slapStartDate;
                        $scope.QMonths.push( actionplanService.getNthQuaterMonths($scope.startDate.month, 1));
                        $scope.QMonths.push( actionplanService.getNthQuaterMonths($scope.startDate.month, 2));
                        $scope.QMonths.push( actionplanService.getNthQuaterMonths($scope.startDate.month, 3));
                        $scope.QMonths.push( actionplanService.getNthQuaterMonths($scope.startDate.month, 4));
                    }
                });


            url = 'worldAroundYou';

            // return stepService.getApiData(urls[urls.length - 1])
            stepService.getApiData(url) //TODO: Think over the dynamics url
                .then(function (response) {
                    if (response && response.status === 200) {
                        $scope.eventsByMonth = response.data.worldAroundYou.eventsByMonth;
                    }
                });
        }

        function sendData(direction) {
            stepService.updateActiveModel($scope);
            stepService.setFinishActiveStep();

            var nextprevStep = stepService.getNextAndPrevStep();
            var urls = activeStep.sref.split('.');

            return stepService.sendApiData(urls[urls.length - 1], $scope.data)
                .then(function () {
                    $scope.saved = true;
                    stepService.setRequestApiFlag();
                    if(direction == 'forward')  
                        $state.go(nextprevStep.nextStep.sref); 
                    else if(direction == 'backward')
                        $state.go(nextprevStep.prevStep.sref);
                });
        }


        $scope.$on('$stateChangeStart', function (event, toState, toStateParams) {
            if ($scope.saved != true) {
                sendData();
            }
        });
    }
}());
(function () {
    'use strict';

    Step4SummaryController.$inject = ["$scope", "activeStep", "pageService", "stepService", "$state", "userService", "idealclientService", "actionplanService", "activityService"];
    angular
        .module('app.pages.actionPlan')
        .controller('Step4SummaryController', Step4SummaryController);

    function Step4SummaryController($scope, activeStep, pageService,stepService, $state, userService, idealclientService, actionplanService, activityService) {

        angular.extend($scope, activeStep.model,{
            model: {
                clients: []
            },
            data: {},
            defaultStrategies: actionplanService.getDefaultConnectingStrategies(),
            privilegesData: {
                second: ['providing', 'creating', 'giving', 'helping']
            },
            fifth: ['Market size', 'Local', 'Regional', 'National', 'Global'],
            gender: ['Empty', 'Male', 'Female'],
            maritalStatus: ['Empty', 'Single', 'Married', 'Divorced', 'Widowed'],
            kids: ['Empty', 'None', 'Young', 'Teens',' Adults'],
            employment: ['Empty', 'Doesn’t Work Established Entrepreneur', 'Small Entrepreneur', 'Senior Employed', 'Mid Level Employed', 'Junior Employed'],
            location: ['Empty', 'City', 'Suburbs', 'Rural', 'Other'],
            home: ['Empty', 'Condo', 'Apartment', 'House', 'Farm', 'Other'],
            transit: ['Empty', 'Car', 'Bike', 'Train', 'Walking', 'Planes', 'Other'],
            forward: true,
            sendData: sendData,

            age: ['Age','11-20','21-30','31-40','41-50','51-60','61-70','71-80','81-90'],
            hobbies: ['Hobbies', 'Volunteering',  'Working Out', 'Shopping',  'Traveling',   'Sports',  'Reading',  'Arts & Culture'],
            reads: ['Reads', 'Business Book', 'Self Help Book', 'Magazine', 'Novel', 'Blog Posts',  'Newspaper'],
            
            months: ['','January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],
            monthsShort: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
            totalFixedExpenses: '0.00',
            totalTarget: '0.00',

            quaters:[],
            QMonths: [],
            getStrategyName: getStrategyName
        });

        getData();

        pageService
            .reset()
            .setShowBC(false)
            .addCrumb({name: 'Dashboard', path: 'home'})
            .setPageTitle('Ideal Client');

        function sendData(direction) {
            stepService.updateActiveModel($scope);
            if(stepService.setFinishActiveStep())
                userService.loadUser().then(function(me){
                    activityService.add({
                        userId: me._id,
                        title: 'Step4 Done',
                        type: 'Milestone',  
                        notes: me.businessName + ' finished building Step4.',
                        journey: {section: 'build', name: 'Step4 Done'}})
                        .then(function(){});    
                });
            var nextprevStep = stepService.getNextAndPrevStep();

            if(direction == 'forward')  
				$state.go(nextprevStep.nextStep.sref); 
            else if(direction == 'backward')
				$state.go(nextprevStep.prevStep.sref);
        }


        function getData() {

            stepService.getApiData('yourStatement')  //TODO: request api? data service
                .then(function (response) {
                    if (response && response.status === 200) {

                        angular.extend($scope.model, {
                            stepOneSummary: _.get(response, 'data.yourStatement', {})
                        });
                        
                        userService.getUser().then(function (user) {
                            $scope.data.businessName = user.businessName;
                        });
                    }
                });

            stepService.getApiData('allMindsetUser') //TODO: Think over the dynamics url
                .then(function (response) {
                    if (response && response.status === 200) {
                        angular.extend($scope.data, {
                            privilegeInfo: _.get(response, 'data.privilegeAndResponsibility', {})
                        });

                        $scope.slapStartDate = _.get(response, 'data.slapStartDate', []);
                    }
                });

            stepService.getApiData('whoAreYouIdealClient')  //TODO: request api? data service
                .then(function (response) {
                    if (response && response.status === 200) {
                        $scope.model.clients = _.get(response, 'data.whoAreYouIdealClient', []);
                        $scope.client = idealclientService.calcIdealClient($scope.model.clients);
                    }
                });
                
            stepService.getApiData('revenueStreams')  //TODO: request api? data service
                .then(function (response) {
                    if (response && response.status === 200) {
                        $scope.model.revenues = _.get(response, 'data.revenueStreams.revenues', []);
                        $scope.totalTarget = 0;
                        _.each($scope.model.revenues, function(revenue){
                             $scope.totalTarget += (+revenue.sellingPrice * +revenue.unit);
                        })

                    }
                });


            stepService.getApiData('fixedBusinessExpenses')  //TODO: request api? data service
                .then(function (response) {
                    if (response && response.status === 200) {
                        $scope.totalFixedExpenses = (response.data.fixedBusinessExpenses.expensesSum + response.data.fixedBusinessExpenses.incidentals * 0.01 * response.data.fixedBusinessExpenses.expensesSum) * 12  + (+response.data.fixedBusinessExpenses.profit);

                        $scope.profit = response.data.fixedBusinessExpenses.profit;
                    }
                });



            stepService.getApiData('whatsHappening')  //TODO: request api? data service
                .then(function (response) {
                    if (response && response.status === 200) {
                        $scope.quaters = response.data.whatsHappening;
                    }
                });

            var url = 'allMindsetUser';

            // return stepService.getApiData(urls[urls.length - 1])
            return stepService.getApiData(url) //TODO: Think over the dynamics url
                .then(function (response) {
                    if (response && response.status === 200) {

                        $scope.startDate = response.data.slapStartDate;
                        $scope.QMonths.push( actionplanService.getNthQuaterMonths ($scope.startDate.month, 1));
                        $scope.QMonths.push( actionplanService.getNthQuaterMonths($scope.startDate.month, 2));
                        $scope.QMonths.push( actionplanService.getNthQuaterMonths($scope.startDate.month, 3));
                        $scope.QMonths.push( actionplanService.getNthQuaterMonths($scope.startDate.month, 4));
                    }
                });
        }
        $scope.$on('$stateChangeStart', function (event, toState, toStateParams) {
            sendData();
        });

        function getStrategyName(id) {
            var obj = _.find($scope.defaultStrategies, {id: id});
            if (obj) return obj.name;
            else return ''
        }
    }
}());
(function () {
    'use strict';

    RateConnectingStrategiesController.$inject = ["$scope", "activeStep", "pageService", "stepService", "$state", "$timeout", "actionplanService", "$uibModal", "$window"];
    angular
        .module('app.pages.actionPlan')
        .controller('RateConnectingStrategiesController', RateConnectingStrategiesController);

    function RateConnectingStrategiesController($scope, activeStep, pageService,stepService, $state, $timeout, actionplanService, $uibModal, $window) {

        angular.extend($scope, activeStep.model, {
            forward: true,
            sendData: sendData,
            saved: false,
            positions: [],
            center: {},
            openVideoBox: openVideoBox,
            showResponsiveView: false,
            notifications: []
        });

        if ($scope.data.length == 0) {
            $scope.data = actionplanService.getDefaultConnectingStrategies();
        }
        $timeout(setPosition);

        pageService
            .reset()
            .setShowBC(false)
            .addCrumb({name: 'Dashboard', path: 'home'})
            .setPageTitle(stepService.getActiveStep().name);


        function sendData(direction) {
            var hasViewedAllVideos = true;
            $scope.data.forEach(function(strategy){
                if (strategy.rating === 0){
                    hasViewedAllVideos = false;
                }
            });
            if (!hasViewedAllVideos) {
                addNotification($scope.notifications, {name: 'Valid Video', type: 'error', message:'Please watch all Vidos and rate them.', show: true});

                $('body').animate({
                    scrollTop: $("slap-notifications").offset().top
                }, 400);
                return;
            } else {
                removeNotification($scope.notifications, 'Valid Video');
                
            }
                
            stepService.updateActiveModel($scope);
            stepService.setFinishActiveStep();

            var nextprevStep = stepService.getNextAndPrevStep();
            var urls = activeStep.sref.split('.');

            return stepService.sendApiData(urls[urls.length - 1], $scope.data)
                .then(function () {
                    $scope.saved = true;
                    if(direction == 'forward')  
                        $state.go(nextprevStep.nextStep.sref); 
                    else if(direction == 'backward')
                        $state.go(nextprevStep.prevStep.sref);
                });
        }

        function setPosition() {
            if ($window.innerWidth <= 900) {
                $scope.showResponsiveView = true;
                return;
            }
            var radius = 300; // radius of the circle
            var fields = $('.strategy-box'),
                container = $('#strategy-container'),
                width = container.width() + 30,
                height = container.height(),
                angle = 0,
                step = (2*Math.PI) / fields.length;
            var emptyAvatar = $('#empty-client');
            fields.each(function(index, field) {
                var x = Math.round(width/2 + radius * Math.sin(angle) - $(this).width()/2),
                    y = Math.round(height/2 - radius * Math.cos(angle) - $(this).height()/2);
                $scope.positions[index] = {x: Math.round(width/2 + radius * Math.sin(angle)), y: Math.round(height/2 - radius * Math.cos(angle))};
                $(this).css({
                    left: x + 'px',
                    top: y + 'px'
                });
                angle += step;
            });
            $(emptyAvatar).css({
                left: Math.round(width/2 - $(emptyAvatar).width()/2),
                top: Math.round(height/2 - $(emptyAvatar).height()/2)
            });
            $scope.center.x = Math.round(width/2.0);
            $scope.center.y = Math.round(height/2.0);

        }

        function addNotification(notifications, newNotification) {
            var existing = _.find(notifications, {name: newNotification.name});
            if (_.isUndefined(existing)) {
                notifications.push(newNotification);
            } else {
                existing.show = true;
            }
            
        }

        function removeNotification(notifications, name) {
            _.remove(notifications, function(notification) {
                return notification.name == name;
            });
        }

        function openVideoBox(strategy) {
            var modalInstance = $uibModal.open({
                component: 'strategyVideoBox',
                size: 'lg',
                resolve: {
                    strategy: function () {
                        return strategy;
                    }
                }
            });

            modalInstance.result.then(function (value) {
                strategy.rating = value.strategy.rating;
                strategy.reason = value.strategy.reason;
                if (value.action == 'saveAndNext') {
                    openVideoBox($scope.data[(value.strategy.id) % 10]);
                } else if (value.action == 'saveAndPrev') {
                    openVideoBox($scope.data[(value.strategy.id + 10 - 2) % 10]);
                }
            }, function () {
                
            });
        }
        $scope.$on('$stateChangeStart', function (event, toState, toStateParams) {
            if ($scope.saved != true) {
                sendData();
            }
        });


    }
}());
(function () {
    'use strict';

    ConnectingStrategyStrategizingController.$inject = ["$scope", "activeStep", "pageService", "stepService", "$state", "$timeout", "actionplanService", "actionItems", "excuteItemService", "$q"];
    angular
        .module('app.pages.actionPlan')
        .controller('ConnectingStrategyStrategizingController', ConnectingStrategyStrategizingController);

    function ConnectingStrategyStrategizingController($scope, activeStep, pageService,stepService, $state, $timeout, actionplanService, actionItems, excuteItemService, $q) {

        angular.extend($scope, activeStep.model, {
            forward: true,
            actionItems: actionItems,
            sendData: sendData,
            startDate: {},
            QMonths: [],
            monthNames: actionplanService.getMonthLongNames(),
            currentQut: 1,
            saved: false,
            strategies: [],
            topRatingStrategies: [],
            checkActionCompleted: checkActionCompleted,
            deleteAction: deleteAction,
            autoExpand: autoExpand,
            revenues: [],

            checkValidity: checkValidity,
            notifications: [],

            filterActionItemsByMonth: filterActionItemsByMonth,
            defaultActionItemsAdded: false,

            qStgChanged: [false,false,false,false]  //Quater Strategy changed
        });

        pageService
            .reset()
            .setShowBC(false)
            .addCrumb({name: 'Dashboard', path: 'home'})
            .setPageTitle(stepService.getActiveStep().name);

        getData();

        var nextprevStep = stepService.getNextAndPrevStep();
        var urls = activeStep.sref.split('.');
        $scope.pageName = urls[urls.length - 1];
        
        $timeout(function(){
            $scope.autoExpand('strategy-description');
            
        },0);
        

        function getData() {
            // var urls = _.get($state.current, 'params.prev.sref').split('.');
            var url = 'allMindsetUser';

            // return stepService.getApiData(urls[urls.length - 1])
            stepService.getApiData(url) //TODO: Think over the dynamics url
                .then(function (response) {
                    if (response && response.status === 200) {

                        $scope.startDate = response.data.slapStartDate;
                        $scope.QMonths.push( actionplanService.getNthQuaterMonths($scope.startDate.month, 1));
                        $scope.QMonths.push( actionplanService.getNthQuaterMonths($scope.startDate.month, 2));
                        $scope.QMonths.push( actionplanService.getNthQuaterMonths($scope.startDate.month, 3));
                        $scope.QMonths.push( actionplanService.getNthQuaterMonths($scope.startDate.month, 4));

                        
                        //If Action Item is empty, should load default action items.
                        //TODO: When user chooses another strategy for that quater, should updated it?

                        $timeout(function(){
                            for (var i = 0; i < 12; i++) {
                                addNewActions(i);
                            }
                        });

                    }
                });
            
            // Get Rating information
            stepService.getApiData('rateConnectingStrategies')
                .then(function (response) {
                    if (response && response.status === 200) {
                        $scope.strategies = response.data.rateConnectingStrategies;
                        $scope.topRatingStrategies = actionplanService.calculateTopStrategies($scope.strategies);
                    }
                });


            url = 'worldAroundYou';
            stepService.getApiData(url) //TODO: Think over the dynamics url
                .then(function (response) {
                    if (response && response.status === 200) {
                        
                        $scope.eventsByMonth = response.data.worldAroundYou.eventsByMonth;
                        $timeout(function(){
                            $scope.autoExpand('strategy-description');
                        },1000);
                    }
                });
                
            stepService.getApiData('revenueStreams')  //TODO: request api? data service
                .then(function (response) {
                    if (response && response.status === 200) {
                        $scope.revenues = _.get(response, 'data.revenueStreams.revenues', []);
                        initiateUnits();
                    }
                });

        }

        //TODO Load Default items
        function loadDefaultActionItems(QID){

            //Delete actions item in that quater and reload

            // if(!confirm("You changed the strategy for Q" + (QID+1))+ '. Do you want reload default action items. Reloading will delete origial default action items.') {
            //     return;
            // }
            var quater = $scope.data[QID];
            if(quater.strategy && quater.strategy.id) {

                var itemsByMonth = actionplanService.getDefaultActionsByStrategy(quater.strategy.id);
                _.each(itemsByMonth.actions, function(itemsMonths, monthID) {
                    var dueDate = moment({year: Math.floor($scope.startDate.year + ((+$scope.startDate.month + 3 * QID - 1 + monthID)/12)), month: $scope.QMonths[QID][monthID], day: 1 }).endOf('month').format('YYYY-MM-DD');
                    console.log(dueDate);
                    _.each(itemsMonths, function(item){
                        //Set Due date to end of that month
                        var copied = angular.copy(item);
                        copied.dueDate = dueDate;
                        copied.isPriorItem = 1;
                        excuteItemService.createItem(copied).then(function(item){
                            $scope.actionItems.push(item.data);
                        }); 
                        
                    });
                });
            }
            
        }

        function initiateUnits() {
            
            _.each($scope.data, function(quater) {
                if (!quater) 
                    quater = {}; 
                if (_.isUndefined( quater.units )) 
                    quater.units = {};
                for (var i = 0; i < $scope.revenues.length; i++) {
                    if (_.isUndefined(quater.units[$scope.revenues[i].name] )) {
                        quater.units[$scope.revenues[i].name] = 0;
                    }
                }

            });
        }


        function addNewActions(monthID, event) {

            var force = false;

            var monthActions = filterActionItemsByMonth(monthID);

            if (monthActions.length > 0) {
                var lastItem = monthActions[monthActions.length - 1];
                if (lastItem.title != '') {
                    force = true;
                }
            } else {
                force = true;
            }

            if (force) {
                $scope.actionItems.push({
                    type: 'action', 
                    dueDate: moment({year: Math.floor($scope.startDate.year + ((+$scope.startDate.month + monthID)/12)), month: monthID, day: 1 }).endOf('month').format('YYYY-MM-DD'),
                    progress: 0, 
                    feeling: null, 
                    notes: '', 
                    title:''});
            }
        }
        

        function checkActionCompleted(action, monthID, evt) {
            if (action.title.trim() != '') {
                addNewActions(monthID, event);
            } else {
            }
        }
        
        function checkValidity(value, evt) {
            if (value != '' && !value.match(/^\d+(\.)*\d*$/)) {
                $(evt.target).addClass('invalid');
                addNotification($scope.notifications, {name: 'Invalid Number', type: 'error', message:'Please provide valid Amount.', show: true});
                
                $scope.forward = false;
            } else {
                removeNotificaton($scope.notifications, 'Invalid Number');
                $(evt.target).removeClass('invalid');
                $scope.forward = true;
                
            }
        }
        
        function addNotification(notifications, newNotification) {
            var existing = _.find(notifications, {name: newNotification.name});
            if (_.isUndefined(existing)) {
                notifications.push(newNotification);
            } else {
                existing.show = true;
            }
            
        }

        function removeNotificaton(notifications, name) {
            _.remove(notifications, function(notification) {
                return notification.name == name;
            });
        }
        
        function sendData(direction) {
            //Validations Before sending Data

            if ((($scope.pageName == 'quarterlyGoals') || ($scope.pageName == ' commitToYourActionPlan')) && !checkQuaterUnitsValid()) { //quater units sum should same as quaterly goal.
                $('body').animate({
                    scrollTop: $("slap-notifications").offset().top
                }, 400);
                return false;
            }

            if ((($scope.pageName == 'connectingStrategyStrategizing')) && !checkQuaterStrategiesValid()) { //quater units sum should same as quaterly goal.
                $('body').animate({
                    scrollTop: $("slap-notifications").offset().top
                }, 400);
                return false;
            }

            var nextprevStep = stepService.getNextAndPrevStep();
            
            stepService.updateActiveModel($scope);
            stepService.setFinishActiveStep();
            //loadDefaultActionItems

            //TODO delete only updated strategy quater and reload data for that quater.
            if($scope.qStgChanged[0] || $scope.qStgChanged[1] || $scope.qStgChanged[2] || $scope.qStgChanged[3]) {
                
                //Delete all actions iteas and reload again
                $q.all($scope.actionItems.filter(function(item){
                    if (item.type=='action' && item.isPriorItem){
                        return item.remove();
                    }
                })).then(function(responses){
                    loadDefaultActionItems(0);
                    loadDefaultActionItems(1);
                    loadDefaultActionItems(2);
                    loadDefaultActionItems(3);
                })

                // qStgChanged.forEach(function(item, ind){
                //     if(item)
                //         loadDefaultActionItems(ind);
                // });
            }

            var url = 'whatsHappening';

            var data = {};
            
            var eventsByMonth = _.map($scope.eventsByMonth, function (month) {    
                return {events: month.events};
            });
            data.eventsByMonth = eventsByMonth;

            return stepService.sendApiData(url, $scope.data)
                .then(function () {

                    if (($scope.pageName != 'actionItems') && ($scope.pageName != 'commitToYourActionPlan')) { //Do not save when current page is not Action Items
                        $scope.saved = true;
                        stepService.setRequestApiFlag();
                        if(direction == 'forward')  
                            $state.go(nextprevStep.nextStep.sref); 
                        else if(direction == 'backward')
                            $state.go(nextprevStep.prevStep.sref);
                    } else {
                        $q.all($scope.actionItems.map(function(item){
                            if (item.title == '')
                                return true;
                            if (_.isUndefined(item._id)) {
                                return excuteItemService.createItem(item);
                            } else {
                                return item.save();
                            }
                        })).then(function(resp){
                            return stepService.sendApiData('worldAroundYou', data)
                            .then(function () {
                                $scope.saved = true;
                                stepService.setRequestApiFlag();
                                if(direction == 'forward')  
                                    $state.go(nextprevStep.nextStep.sref); 
                                else if(direction == 'backward')
                                    $state.go(nextprevStep.prevStep.sref);
                            });    
                        })
                    }
                });
        }

        function checkQuaterUnitsValid() {
            var valid = true;
            _.each($scope.revenues, function(revenue) {
                var totalRevenue = +$scope.data[0].units[revenue.name] + +$scope.data[1].units[revenue.name] + +$scope.data[2].units[revenue.name] + +$scope.data[3].units[revenue.name]; 
                if (totalRevenue != revenue.unit){
                    valid = false;
                }
                    
            })
            if (!valid){
                addNotification($scope.notifications, {name: 'Invalid Sum', type: 'error', message:'Total Sum of Revenue Streams of each Quater should be exactly same as Yearly Goal.', show: true});
            } else {
                removeNotificaton($scope.notifications,'Invalid Sum');
            }
            return valid;
        }

        function checkQuaterStrategiesValid() {
            var valid = true;
            _.each($scope.data, function(quater, index) {
                if ((!quater.strategy) || (!quater.strategy.id)) {
                    valid = false;
                }
            });

            if (!valid) {
                addNotification($scope.notifications, {name: 'Invalid Strategy', type: 'error', message:'Please choose strategies for each Quater ', show: true});
            } else {
                removeNotificaton($scope.notifications, 'Invalid Strategy');
            }
            return valid;
        }

        function deleteAction(action, month) {
            if ($scope.actionItems.length > 1) {
                if (!_.isUndefined(action._id)) {
                    action.remove().then(function(response){
                        _.remove($scope.actionItems, function (n) {
                            return n === action;
                        });
                    });
                } else {
                    _.remove($scope.actionItems, function (n) {
                            return n === action;
                        });
                }
            }
        }

        function autoExpand(e) {
            var elements = typeof e === 'object' ? [e.target] : [].slice.call(document.getElementsByClassName(e));
            elements.forEach(function(element){
                var scrollHeight = element.scrollHeight + 30; // replace 60 by the sum of padding-top and padding-bottom
                if (scrollHeight != 0) 
                    element.style.height =  scrollHeight + "px";    
            });
        }

        function filterActionItemsByMonth(monthID) {
            return $scope.actionItems.filter(function(item){
                return moment(item.dueDate).month() == monthID;
            });
        }

        $scope.$on('$stateChangeStart', function (event, toState, toStateParams) {
            if ($scope.saved != true) {
                sendData();
            }
        });
    }
}());
(function() {
    'use strict';

    ActionPlanQAController.$inject = ["$scope", "activeStep", "pageService", "stepService", "$state"];
    angular
        .module('app.pages.actionPlan')
        .controller('ActionPlanQAController', ActionPlanQAController);

    /* @ngInject */
    function ActionPlanQAController($scope, activeStep, pageService, stepService, $state) {

        angular.extend($scope, activeStep.model, {
            forward: true,
            sendData: sendData
        });

        pageService
            .reset()
            .setShowBC(false)
            .addCrumb({name: 'Dashboard', path: 'home'})
            .setPageTitle('SLAPstatement Q&A');

        function sendData(direction) {
            stepService.updateActiveModel($scope);
            stepService.setFinishActiveStep();

            var nextprevStep = stepService.getNextAndPrevStep();

           
            if(direction == 'forward')
                $state.go(nextprevStep.nextStep.sref);
            else
                $state.go(nextprevStep.prevStep.sref);
        }
        
    }
}());
(function() {
    'use strict';

    ActionPlanOverviewController.$inject = ["$scope", "activeStep", "pageService", "stepService", "$state"];
    angular
        .module('app.pages.actionPlan')
        .controller('ActionPlanOverviewController', ActionPlanOverviewController);

    /* @ngInject */
    function ActionPlanOverviewController($scope, activeStep, pageService,stepService, $state) {

        angular.extend($scope, activeStep.model, {
            forward: true,
            sendData: sendData
        });

        pageService
            .reset()
            .setShowBC(false)
            .addCrumb({name: 'Dashboard', path: 'home'})
            .setPageTitle('Action Plan Overview');

        function sendData(direction) {
            stepService.updateActiveModel($scope);
            stepService.setFinishActiveStep();

            var nextprevStep = stepService.getNextAndPrevStep();

            
            if(direction == 'forward')
                $state.go(nextprevStep.nextStep.sref);
            else
                $state.go(nextprevStep.prevStep.sref);
        }
    }
}());
(function() {
    'use strict';

    angular
        .module('app.components',[]);
}());
(function() {
    'use strict';

    ItemDialogController.$inject = ["$scope", "$state"];
    angular
        .module('app.components')
        .controller('ItemDialogController', ItemDialogController);

    /* @ngInject */
    function ItemDialogController($scope, $state) {

    }
}());
(function() {
    'use strict';

    angular
        .module('adminapp.pages.slapsters', [
            'slapsters.main.module'
        ]);
}());
(function() {
    'use strict';

    angular
        .module('adminapp.pages.reports', [
            'reports.financialTracker.module',
            'reports.reportBuilder.module'
        ]);
}());
(function() {
    'use strict';

    angular
        .module('adminapp.pages.manage', [
            'manage.products.module',
            'manage.coupon.module',
            'manage.users.module',
            'manage.emailtemplates.module'
        ]);
}());
(function() {
    'use strict';

    angular
        .module('adminapp.pages.main')
        .config(moduleConfig);

    moduleConfig.$inject = ['$stateProvider'];

    function moduleConfig($stateProvider) {
        $stateProvider
            .state('admin.home', {
                data: {
                    access: 'admin',
                    isAdminPage: true
                },
                parent : 'admin',
                url : '/home',
                resolve: {
                    allUsers: ["adminUserService", "$state", function (adminUserService, $state) {
                        return adminUserService.list()
                        .then(function (response) {
                            return response.data;
                        });
                    }]
                },
                views : {
                    content : {
                        controller : 'AdminMainIndexController',
                        templateUrl : 'admin/pages/main/index/main-index.html'
                    }
                }
            })
            .state('admin-login', {
                data: {
                    access: '?',
                    isAdminPage: true
                },
                parent : 'blank',
                url : '/admin/login',
                views : {
                    content : {
                        controller : 'AdminMainLoginController as vm',
                        templateUrl : 'admin/pages/main/login/main-login.html'
                    }
                }
            })
            
            .state('admin.myaccounts', {
                data: {
                    access: 'admin',
                    isAdminPage: true
                },
                parent: 'admin',
                url: '/myaccounts',
                views: {
                    content: {
                        controller: 'MyaccountsController',
                        templateUrl: 'pages/settingsUser/myaccounts/myaccounts.html'
                    }
                }
            });
    }
}());
(function () {
    'use strict';

    var popupDate = {
        require: {
            ngModel: '^ngModel'
        },
        bindings: {
            label: '@',
        },
        controller: function ($scope) {
            var vm = this;

            vm.options = {
                showWeeks: false,
                popupPlacement: 'bottom-left',
                closeText: 'Close'
            };

            vm.open = function () {
                vm.popup.opened = true;
            };

            vm.popup = {
                opened: false
            };

            vm.$onInit = function () {
                vm.ngModel.$render = function () {
                    vm.dt = vm.ngModel.$viewValue;
                };

                $scope.$watch(function () {
                    return vm.dt;
                }, function (value) {
                    if (vm.ngModel) {
                        vm.ngModel.$setViewValue(value);
                    }
                });
            };
        },
        templateUrl: 'admin/components/popupDate/popup-date.html'
    };

    angular
        .module('adminapp.components')
        .component('popupDate', popupDate);
}());
(function() {
    'use strict';

    var adminSlapFooter = {
        binding : {

        },
        controller : function() {

        },
        templateUrl : 'admin/components/footer/slap-footer.html'
    };

    angular
        .module('adminapp.components')
        .component('adminSlapFooter', adminSlapFooter);
}());
(function() {
    'use strict';

    var adminSlapNavbar = {
        bindings : {
        },
        controller : function($auth,$state,userService,$scope, $window) {
            var vm = this;
            vm.logout = function() {
                $auth.logout();
                $state.go('login');
            };

            vm.userService = userService;
            vm.isAuthenticated = false;

            userService.getUser().then(function (user) {
                 vm.user = user;
            });

            this.logout = function () {
                $auth.logout();
                $window.location.reload();
                $state.go('login');
            }
            $scope.$watch($auth.isAuthenticated, function(newValue) {
                vm.isAuthenticated = newValue;
            });
        },
        templateUrl : 'admin/components/navbar/slap-navbar.html'
    };

    angular
        .module('adminapp.components')
        .component('adminSlapNavbar', adminSlapNavbar);
}());
(function() {
    'use strict';

    var slapBreadcrumb = {
        bindings : {

        },
        controller : function(pageService) {
            this.breadcrumbs = pageService;
        },
        templateUrl : 'admin/components/breadcrumb/slap-breadcrumb.html'
    };

    slapBreadcrumb.$inject = ['pageService'];

    angular
        .module('adminapp.components')
        .component('slapBreadcrumb', slapBreadcrumb);
}());
(function() {
    'use strict';

    financialTrackerService.$inject = ["apiService"];
    angular
        .module('app.services')
        .service('financialTrackerService', financialTrackerService);

    function financialTrackerService(apiService) {

        this.list = list;
        this.transformationData = transformationData;

        ////////////////

        function list() {
            return apiService.rest.all('financialTracker').getList();
        }

        function transformationData(data) {
            var dataTable = [];

            data.forEach(function(item) {
                var row = {coupon:{}};
                row.userId = item.user._id;
                row.userName = item.user.name + " " +  item.user.lastName;
                row.business = item.user.businessName;
                row.paymentDate = item.payment.paymentDate;
                row.programName = item.payment.products.map(function(item) {
                    return item.name;
                }).join('/');
                row.amountCharges = item.payment.amountCharges;
                row.amountSaved = item.payment.amountSaved;
                row.discount = null;
                item.payment.products.forEach(function(product) {
                    if(product.cost) row.discount = product.cost - product.amount;
                });
                row.status = item.payment.status;
                row.coupon.name = item.coupon ? item.coupon.name : '-';
                row.coupon.code = item.coupon ? item.coupon.code : '-';

                dataTable.push(row);
            });

            return dataTable;
        }
    }
}());
(function() {
    'use strict';

    angular
        .module('app.services')
        .service('productStorage', productStorage);

    function productStorage() {
        var _plan = null;
        var _build = null;
        var _coupon = null;
        var _user = null;
        var _isRenew = false;
        var _renewFrom = null;

        this.getPlan = function() {
            return _plan;
        };

        this.setPlan = function(plan) {
            _plan = plan;
        };

        this.getBuild = function() {
            return _build;
        };

        this.getUser = function() {
            return _user;
        };

        this.getRenewFrom = function(id) {
            return _renewFrom;
        }
        
        this.isRenew = function() {
            return _isRenew;
        }

        this.setBuild = function(build) {
            _build = build;
        };

        this.setRenewFrom = function(id) {
            _renewFrom = id;
        }

        this.setRenew = function() {
            _isRenew = true;
        }

        this.setUser = function(user) {
            _user = user;
        };

        this.resetStorage = function() {
            _build = null;
            _plan = null;
            _coupon = null;
            _isRenew = false;
            _user = null;
        };

        this.setCoupon = function(coupon) {
            _coupon = coupon;
        };

        /**
         * Calculate the total cost build
         *
         * @param {object} build
         * @return {number}
         **/
        this.calculateFullCostBuild = function(build) {
            return build.amountFirstPayment + (build.costProduct * build.billingFrequency);
        };

        /**
         * Calculate the total cost build now
         *
         * @return {number}
         **/
        this.calculateTodayPayment = function() {
            if(_coupon) {
                this._calculateCoupon();
            }

            if(_build) {
                return _plan.costProduct + (_build.buildType == 2 ? _build.costProduct : _build.amountFirstPayment);
            }
            return _plan.costProduct;
        };

        /**
         * Calculate the total cost monthly every month
         *
         * @return {number}
         **/
        this.calculateMonthlyPayment = function() {
            if(_build && _build.buildType != 2) {
                return _plan.costProduct + _build.costProduct;
            }

            return _plan.costProduct;
        };

        this._calculateCoupon = function() {
            if(_coupon.typeCoupon) {
                return _plan.costProduct = _plan.costProduct - (_plan.costProduct * _coupon.amount) / 100;
            }
            return _plan.costProduct = _plan.costProduct - _coupon.amount;
        }

    }
}());
(function () {
    'use strict';

    paymentsService.$inject = ["apiService", "adminApiService"];
    angular
        .module('app.services')
        .service('paymentsService', paymentsService);

    /* @ngInject */
    function paymentsService(apiService, adminApiService) {

        this.getAllPayments = getAllPayments;

        this.transformationData = transformationData;
        this.getAllPaymentsByUser = getAllPaymentsByUser;
        this.chargeUser = chargeUser;
        //////////////////////////////////

        function transformationData(data) {
            var dataTable = [];

            data.forEach(function (item) {
                var row = {};
                row.paymentDate = moment(item.paymentDate).format('ll');
                row.programName = item.products.map(function (prod) {
                    return prod.name;
                }).join('/');
                row.costProduct = null;

                item.products.forEach(function (prod) {
                    row.costProduct += prod.cost ? prod.cost : prod.amount;
                });
                // var discount = row.costProduct - item.amountCharges;
                // row.discount = discount ? '-' + discount : '-';
                row.discount = row.costProduct - item.amountCharges;
                row.amountCharges = item.amountCharges;
                row.status = item.status;
                row.couponId = item.couponId;
                dataTable.push(row);
            });

            return dataTable;
        }

        function getAllPayments() {
            return apiService.rest.all('payments').getList();
        }

        function getAllPaymentsByUser(userId) {
            return adminApiService.rest.all('payments').all('paymentsByUser').all(userId).getList();
        }

        function chargeUser(product, userId) {
            return adminApiService.rest.all('payments').all('charge').all(userId).post(product);
        }

        
    }
}());
(function () {
    'use strict';

    angular
        .module('app.services')
        .service('footerService', footerService);

    function footerService() {
        var self = this;
        self._state = {};

        self.setParams = setParams;
        self.reset = reset;

        //////////////////////////

        function setParams(params) {
            self._state.prev = params.prev;
            self._state.next = params.next;
        }

        function reset() {
            self._state = {};
        }
    }
}());
(function () {
    'use strict';

    angular
        .module('app.services')
        .service('asideService', asideService);

    /* @ngInject */
    function asideService() {
        var slapMindset = [
            {
                name: 'Our Commitment To You',
                sref: 'mindset.ourCommitment'
            }, {
                name: 'Your Commitment to Us',
                sref: 'mindset.yourCommitment'
            }, {
                name: 'Get the SLAPmindset',
                sref: 'mindset.slapMindset'
            }, {
                name: 'Privilege and Responsibility',
                sref: 'mindset.privilegeAndResponsibility'
            }, {
                name: 'Are You Stuck?',
                sref: 'mindset.areYourStuck'
            }, {
                name: 'Cashflow / Capacity Cath 22',
                sref: 'mindset.cashFlow'
            }, {
                name: 'Your Business With / Without A SLAP',
                sref: 'mindset.yourBusiness'
            }, {
                name: 'Top Down, Bottom Up',
                sref: 'mindset.topDownBottomUp'
            }, {
                name: 'Start SLAP\'n!',
                sref: 'mindset.startSlapn'
            }, {
                name: 'Your SLAP Start Date',
                sref: 'mindset.slapStartDate'
            }
        ];

        var slapStatement = [
            {
                name: 'SLAPstatement Overview',
                sref: 'statement.overview'
            },
            {
                name: 'SLAPstatement Q&A',
                sref: 'statement.qa'
            },
            {
                name: 'Your SLAPstatement',
                sref: 'statement.yourStatement'
            },
            {
                name: 'Commit To Your',
                sref: 'statement.commitToYour'
            },
            {
                name: 'SLAPStatement',
                sref: 'statement.statement'
            },
            {
                name: 'Step 1 SLAPsummary',
                sref: 'statement.step1Summary'
            }
        ];

        var yearGoals = [
            {
                name: '1 Year Goal Overview',
                sref: 'yearGoal.overview'
            }, {
                name: 'Personal Expenses',
                sref: 'yearGoal.personalExpenses'
            }, {
                name: 'Fixed Business Expenses',
                sref: 'yearGoal.fixedBusinessExpenses'
            }, {
                name: 'Total Fixed Expenses Revenue',
                sref: 'yearGoal.totalFixedExpensesRevenue'
            }, {
                name: 'Selling Price',
                sref: 'yearGoal.sellingPrice'
            }, {
                name: 'Variable Business Expenses',
                sref: 'yearGoal.variableBusinessExpenses'
            }, {
                name: 'Profit Margin',
                sref: 'yearGoal.profitMargin'
            }, {
                name: 'Revenue Breakdown',
                sref: 'yearGoal.revenueBreakdown'
            }, {
                name: 'Your 1 Year Goal',
                sref: 'yearGoal.yourYearGoal'
            }, {
                name: 'Adjust your 1 Year Goal',
                sref: 'yearGoal.adjustYourYearGoal'
            }, {
                name: '1 Year Goal Q&A',
                sref: 'yearGoal.qa'
            }, {
                name: 'Commit To Your 1 Year Goal',
                sref: 'yearGoal.commitYourYearGoal'
            }, {
                name: 'Step 2 SLAPsummary',
                sref: 'yearGoal.step2Summary'
            }, {
                name: 'First SLAPexpert Review',
                sref: 'yearGoal.firstExpertReview'
            }
        ];

        var idealClients = [
            {
                name: 'Ideal Client Overview',
                sref: 'idealClient.overview'
            },
            {
                name: 'Who Are Your Ideal Clients?',
                sref: 'idealClient.whoAreYouIdealClient'
            },
            {
                name: 'Define Your Ideal Client',
                sref: 'idealClient.defineYourIdealClient'
            },
            {
                name: 'Name Your Ideal Client',
                sref: 'idealClient.nameYourIdealClient'
            },
            {
                name: 'Ideal Client Q&A',
                sref: 'idealClient.qa'
            },
            {
                name: 'Commit To Your Ideal Client',
                sref: 'idealClient.commitYourIdealClient'
            },
            {
                name: 'Double Check',
                sref: 'idealClient.doubleCheck'
            },
            {
                name: 'SLAPstatement',
                sref: 'idealClient.slapStatement'
            },
            {
                name: 'Step 3 SLAPsummary',
                sref: 'idealClient.step3Summary'
            }
        ];

        var actionPlans = [
            {
                name: 'Action Plan Overview',
                sref: 'actionPlan.overview'
            }, {
                name: 'The World Around You',
                sref: 'actionPlan.worldAroundYou'
            }, {
                name: 'Double Check Start Date',
                sref: 'actionPlan.doubleCheckStartDate'
            }, {
                name: 'What\'s Happening in Q1-Q4',
                sref: 'actionPlan.whatsHappening'
            }, {
                name: 'Rate the 10 Connecting Strategies',
                sref: 'actionPlan.rateConnectingStrategies'
            }, {
                name: 'Choose Your Connecting Strategies',
                sref: 'actionPlan.chooseYourConnectingStrategies'
            }, {
                name: 'Connecting Strategy Strategizing',
                sref: 'actionPlan.connectingStrategyStrategizing'
            }, {
                name: 'Action Items',
                sref: 'actionPlan.actionItems'
            }, {
                name: 'Action Plan Review',
                sref: 'actionPlan.actionPlanReview'
            }, {
                name: 'Quarterly Goals',
                sref: 'actionPlan.quarterlyGoals'
            }, {
                name: 'Double Check 1 Year Goal',
                sref: 'actionPlan.doubleCheckYearGoal'
            }, {
                name: 'Action Plan Q&A',
                sref: 'actionPlan.qa'
            }, {
                name: 'Commit To Your Action Plan',
                sref: 'actionPlan.commitYourActionPlan'
            }, {
                name: 'Step 4 SLAPsummary',
                sref: 'actionPlan.step4Summary'
            }, {
                name: 'Second SLAPexpert Review',
                sref: 'actionPlan.secondExpertReview'
            }
        ];

        var execute = [
            {
                name: 'Living SLAP Day-to-Day',
                sref: 'execute.livingDayToDay'
            }, {
                name: 'Commit to Yourself',
                sref: 'execute.commitYourSelf'
            }, {
                name: 'Set Yourself Up For Success',
                sref: 'execute.setYourselfUpForSuccess'
            }, {
                name: 'Tour of SLAPcenter - Execute',
                sref: 'execute.tourExecute'
            }
        ];

        this.getAll = getAll;

        ////////////////////////
        function getAll() {
            return {
                slapStatement: slapStatement,
                slapMindset: slapMindset,
                yearGoals: yearGoals,
                idealClients: idealClients,
                actionPlans: actionPlans,
                execute: execute
            };
        }
    }
}());
(function () {
    'use strict';

    angular
        .module('app.services')
        .service('BCService', BCService);

    /* @ngInject */
    function BCService() {
        var me = this;

        // --- vars ---
        
        me.showBC = true;
        me.crumbs = [];
        me.h1 = '';

        // --- methods ---

        me.addCrumb = function (item) {
            // item.opts = item.opts || {};
            me.crumbs.push(item);
            return me;
        };

        me.reset = function () {
            me.crumbs = [];
            me.h1 = '';
            me.showBC = true;
            return me;
        };

        me.setShowBC = function(status){
            me.showBC = status;
            return me;
        };

        me.setPageTitle = function (title) {
            me.h1 = title;
            // $rootScope.setDocumentTitle(title);
            return me;
        };
    }
})();
(function () {
    'use strict';

    adminUserService.$inject = ["$q", "adminApiService", "$rootScope"];
    angular
        .module('app.services')
        .service('adminUserService', adminUserService);

    /* @ngInject */
    function adminUserService($q, adminApiService, $rootScope) {
        
        self.ROLE_ADMIN = 1;
        self.ROLE_SLAPEXPERT = 2;
        self.ROLE_SLAPMANAGER = 3;
        self.ROLE_SLAPSTER = 4;
        self.ROLE_PARTNER = 5;

        self.STATUS_ACTIVE = 'active';
        self.STATUS_INACTIVE = 'inactive';
        self.STATUS_DELETED = 'deleted';

        self.ROLES = [
            {id: 1, name: "Admin"},
            {id: 2, name: "SLAPExpert"},
            {id: 3, name: "SLAPManager"},
            {id: 4, name: "SLAPster"},
            {id: 5, name: "Partner"}];

        self.STATUSES = [
            {id: 'active', name: "Active"},
            {id: 'inactive', name: "Inactive"},
            {id: 'deleted', name: "Deleted"}];

        self.get = function (id) {
            // console.log(user);
            return adminApiService.rest.all('users').get(id);
        };

        self.add = function (user) {
            return adminApiService.rest.all('users').post(user);
        };

        self.update = function (user) {
            return adminApiService.rest.all('users').one(user._id).put(user);
        };

        self.list = function () {
            return adminApiService.rest.all('users').getList();
        };

        self.delete = function(user) {
            return adminApiService.rest.all('users').one(user._id).remove();
        };
        return self;
    }
})();
(function () {
    'use strict';

    adminApiService.$inject = ["$rootScope", "$auth", "Restangular", "toaster", "CONFIG"];
    angular
        .module('app.services')
        .service('adminApiService', adminApiService);

    function adminApiService($rootScope, $auth, Restangular, toaster, CONFIG) {
        var me = this;

        // --- vars ---

        me.headers = {
            'Content-Type': 'application/json'
        };

        me.rest = Restangular.withConfig(function (RestangularConfigurer) {
            RestangularConfigurer
                .setBaseUrl(CONFIG.api + '/admin')
                .setDefaultHeaders(me.headers)
                .setFullResponse(true)
                .setErrorInterceptor(function (response) {
                    switch (response.status) {
                        case 401:
                            $rootScope.$broadcast('authUnauthorized');
                            break;

                        case 403:
                            $rootScope.$broadcast('authForbidden');
                            break;

                        default:
                            toaster.pop({type: 'error', body: response.statusText || 'Server error'});
                    }
                    if (response.status === 401) {
                        $rootScope.$broadcast('authUnauthorized');
                    } 
                })
                .addFullRequestInterceptor(function (element, operation, what, url, headers, params) {
                    var token = $auth.getToken();
                    if (token) {
                        params = params || {};
                        // console.log(element, operation, what, url, headers, params);
                        // params['access-token'] = $auth.getToken();
                        headers.Authorization = 'Bearer ' + token;
                    }
                });
        });

    }
})();
(function () {
    'use strict';

    moduleConfig.$inject = ["$stateProvider"];
    angular
        .module('app.pages.yearGoal')
        .config(moduleConfig);

    function moduleConfig($stateProvider) {
        $stateProvider
            .state('yearGoal', {
                data: {
                    access: '@'
                },
                abstract: true,
                url: '/yearGoal',
                parent: 'default',
                views: {
                    content: {
                        template: '<ui-view />'
                    }
                }
            })
            .state('yearGoal.overview', {
                url: '/overview',
                resolve: {
                    activeStep: ["stepService", "$state", function (stepService, $state) {
                        return stepService.resolveActiveStep(this)
                            .then(function (active) {
                                if (active) {
                                    return active;
                                }

                                return stepService.getLastFinished()
                                    .then(function (finishedStep) {
                                        $state.go(finishedStep.sref);
                                    });
                            })
                    }]
                },
                controller: 'YearGoalOverviewController',
                templateUrl: 'pages/yearGoal/year-goal-overview/year-goal-overview.html'
            })
            .state('yearGoal.personalExpenses', {
                url: '/personalExpenses',
                resolve: {
                    activeStep: ["stepService", "$state", function (stepService, $state) {
                        return stepService.resolveActiveStep(this)
                            .then(function (active) {
                                if (active) {
                                    return active;
                                }

                                return stepService.getLastFinished()
                                    .then(function (finishedStep) {
                                        $state.go(finishedStep.sref);
                                    });
                            })
                    }]
                },
                controller: 'PersonalExpensesController',
                templateUrl: 'pages/yearGoal/personal-expenses/personal-expenses.html'
            })
            .state('yearGoal.fixedBusinessExpenses', {
                url: '/fixedBusinessExpenses',
                resolve: {
                    activeStep: ["stepService", "$state", function (stepService, $state) {
                        return stepService.resolveActiveStep(this)
                            .then(function (active) {
                                if (active) {
                                    return active;
                                }

                                return stepService.getLastFinished()
                                    .then(function (finishedStep) {
                                        $state.go(finishedStep.sref);
                                    });
                            })
                    }]
                },
                controller: 'FixedBusinessExpensesController',
                templateUrl: 'pages/yearGoal/fixed-business-expenses/fixed-business-expenses.html'
            })
            .state('yearGoal.totalFixedExpensesRevenue', {
                url: '/totalFixedExpensesRevenue',
                resolve: {
                    activeStep: ["stepService", "$state", function (stepService, $state) {
                        return stepService.resolveActiveStep(this)
                            .then(function (active) {
                                if (active) {
                                    return active;
                                }

                                return stepService.getLastFinished()
                                    .then(function (finishedStep) {
                                        $state.go(finishedStep.sref);
                                    });
                            })
                    }]
                },
                controller: 'TotalFixedExpensesRevenueController',
                templateUrl: 'pages/yearGoal/total-fixed-expenses-revenue/total-fixed-expenses-revenue.html'
            })
            .state('yearGoal.revenueStreams', {
                url: '/revenueStreams',
                resolve: {
                    activeStep: ["stepService", "$state", function (stepService, $state) {
                        return stepService.resolveActiveStep(this)
                            .then(function (active) {
                                if (active) {
                                    return active;
                                }

                                return stepService.getLastFinished()
                                    .then(function (finishedStep) {
                                        $state.go(finishedStep.sref);
                                    });
                            })
                    }]
                },
                controller: 'RevenueStreamsController',
                templateUrl: 'pages/yearGoal/revenue-streams/revenue-streams.html'
            })
            .state('yearGoal.sellingPrice', {
                url: '/sellingPrice',
                resolve: {
                    activeStep: ["stepService", "$state", function (stepService, $state) {
                        return stepService.resolveActiveStep(this)
                            .then(function (active) {
                                if (active) {
                                    return active;
                                }

                                return stepService.getLastFinished()
                                    .then(function (finishedStep) {
                                        $state.go(finishedStep.sref);
                                    });
                            })
                    }]
                },
                controller: 'RevenueStreamsController',
                templateUrl: 'pages/yearGoal/selling-price/selling-price.html'
            })
            .state('yearGoal.variableBusinessExpenses', {
                url: '/variableBusinessExpenses',
                resolve: {
                    activeStep: ["stepService", "$state", function (stepService, $state) {
                        return stepService.resolveActiveStep(this)
                            .then(function (active) {
                                if (active) {
                                    return active;
                                }

                                return stepService.getLastFinished()
                                    .then(function (finishedStep) {
                                        $state.go(finishedStep.sref);
                                    });
                            })
                    }]
                },
                controller: 'RevenueStreamsController',
                templateUrl: 'pages/yearGoal/variable-business-expenses/variable-business-expenses.html'
            })
            .state('yearGoal.profitMargin', {
                url: '/profitMargin',
                resolve: {
                    activeStep: ["stepService", "$state", function (stepService, $state) {
                        return stepService.resolveActiveStep(this)
                            .then(function (active) {
                                if (active) {
                                    return active;
                                }

                                return stepService.getLastFinished()
                                    .then(function (finishedStep) {
                                        $state.go(finishedStep.sref);
                                    });
                            })
                    }]
                },
                controller: 'RevenueStreamsController',
                templateUrl: 'pages/yearGoal/profit-margin/profit-margin.html'
            })
            .state('yearGoal.revenueBreakdown', {
                url: '/revenueBreakdown',
                resolve: {
                    activeStep: ["stepService", "$state", function (stepService, $state) {
                        return stepService.resolveActiveStep(this)
                            .then(function (active) {
                                if (active) {
                                    return active;
                                }

                                return stepService.getLastFinished()
                                    .then(function (finishedStep) {
                                        $state.go(finishedStep.sref);
                                    });
                            })
                    }]
                },
                controller: 'RevenueStreamsController',
                templateUrl: 'pages/yearGoal/revenue-breakdown/revenue-breakdown.html'
            })
            .state('yearGoal.yourYearGoal', {
                url: '/yourYearGoal',
                resolve: {
                    activeStep: ["stepService", "$state", function (stepService, $state) {
                        return stepService.resolveActiveStep(this)
                            .then(function (active) {
                                if (active) {
                                    return active;
                                }

                                return stepService.getLastFinished()
                                    .then(function (finishedStep) {
                                        $state.go(finishedStep.sref);
                                    });
                            })
                    }]
                },
                controller: 'YourYearGoalController',
                templateUrl: 'pages/yearGoal/your-year-goal/your-year-goal.html'
            })
            .state('yearGoal.adjustYourYearGoal', {
                url: '/adjustYourYearGoal',
                resolve: {
                    activeStep: ["stepService", "$state", function (stepService, $state) {
                        return stepService.resolveActiveStep(this)
                            .then(function (active) {
                                if (active) {
                                    return active;
                                }

                                return stepService.getLastFinished()
                                    .then(function (finishedStep) {
                                        $state.go(finishedStep.sref);
                                    });
                            })
                    }]
                },
                controller: 'RevenueStreamsController',
                templateUrl: 'pages/yearGoal/adjust-your-year-goal/adjust-your-year-goal.html'
            })
            .state('yearGoal.qa', {
                url: '/Q&A',
                resolve: {
                    activeStep: ["stepService", "$state", function (stepService, $state) {
                        return stepService.resolveActiveStep(this)
                            .then(function (active) {
                                if (active) {
                                    return active;
                                }

                                return stepService.getLastFinished()
                                    .then(function (finishedStep) {
                                        $state.go(finishedStep.sref);
                                    });
                            })
                    }]
                },
                controller: 'YearGoalQAController',
                templateUrl: 'pages/yearGoal/year-goal-qa/year-goal-qa.html'
            })
            .state('yearGoal.commitYourYearGoal', {
                url: '/commitYourYearGoal',
                resolve: {
                    activeStep: ["stepService", "$state", function (stepService, $state) {
                        return stepService.resolveActiveStep(this)
                            .then(function (active) {
                                if (active) {
                                    return active;
                                }

                                return stepService.getLastFinished()
                                    .then(function (finishedStep) {
                                        $state.go(finishedStep.sref);
                                    });
                            })
                    }]
                },
                controller: 'RevenueStreamsController',
                templateUrl: 'pages/yearGoal/commit-your-year-goal/commit-your-year-goal.html'
            })
            .state('yearGoal.step3Summary', {
                url: '/step3Summary',
                resolve: {
                    activeStep: ["stepService", "$state", function (stepService, $state) {
                        return stepService.resolveActiveStep(this)
                            .then(function (active) {
                                if (active) {
                                    return active;
                                }

                                return stepService.getLastFinished()
                                    .then(function (finishedStep) {
                                        $state.go(finishedStep.sref);
                                    });
                            })
                    }]
                },
                controller: 'Step3SummaryController',
                templateUrl: 'pages/yearGoal/step3-summary/step3-summary.html'
            })
            .state('yearGoal.firstExpertReview', {
                url: '/firstSLAPexpertReview',
                resolve: {
                    activeStep: ["stepService", "$state", function (stepService, $state) {
                        return stepService.resolveActiveStep(this)
                            .then(function (active) {
                                if (active) {
                                    return active;
                                }

                                return stepService.getLastFinished()
                                    .then(function (finishedStep) {
                                        $state.go(finishedStep.sref);
                                    });
                            })
                    }]
                },
                controller: 'FirstExpertReviewController',
                templateUrl: 'pages/yearGoal/first-expert-review/first-expert-review.html'
            });
    }
}());
(function () {
    'use strict';

    moduleConfig.$inject = ["$stateProvider"];
    angular
        .module('app.pages.statement')
        .config(moduleConfig);

    function moduleConfig($stateProvider) {
        $stateProvider
            .state('statement', {
                data: {
                    access: '@'
                },
                abstract: true,
                url: '/statement',
                parent: 'default',
                views: {
                    content: {
                        template: '<ui-view />'
                    }
                }
            })
            .state('statement.overview', {
                url: '/overview',
                resolve: {
                    activeStep: ["stepService", "$state", function (stepService, $state) {
                        return stepService.resolveActiveStep(this)
                            .then(function (active) {
                                if (active) {
                                    return active;
                                }

                                return stepService.getLastFinished()
                                    .then(function (finishedStep) {
                                        $state.go(finishedStep.sref);
                                    });
                            })
                    }]
                },
                controller: 'StatementOverviewController',
                templateUrl: 'pages/statement/statement-overview/statement-overview.html'
            })
            .state('statement.qa', {
                url: '/Q&A',
                resolve: {
                    activeStep: ["stepService", "$state", function (stepService, $state) {
                        return stepService.resolveActiveStep(this)
                            .then(function (active) {
                                if (active) {
                                    return active;
                                }

                                return stepService.getLastFinished()
                                    .then(function (finishedStep) {
                                        $state.go(finishedStep.sref);
                                    });
                            })
                    }]
                },
                controller: 'StatementQAController',
                templateUrl: 'pages/statement/statement-qa/statement-qa.html'
            })
            .state('statement.yourStatement', {
                url: '/yourStatement',
                resolve: {
                    activeStep: ["stepService", "$state", function (stepService, $state) {
                        return stepService.resolveActiveStep(this)
                            .then(function (active) {
                                if (active) {
                                    return active;
                                }

                                return stepService.getLastFinished()
                                    .then(function (finishedStep) {
                                        $state.go(finishedStep.sref);
                                    });
                            })
                    }]
                },
                controller: 'YourStatementController',
                templateUrl: 'pages/statement/your-statement/your-statement.html'
            })
            .state('statement.commitToYour', {
                url: '/commitToYour',
                resolve: {
                    activeStep: ["stepService", "$state", function (stepService, $state) {
                        return stepService.resolveActiveStep(this)
                            .then(function (active) {
                                if (active) {
                                    return active;
                                }

                                return stepService.getLastFinished()
                                    .then(function (finishedStep) {
                                        $state.go(finishedStep.sref);
                                    });
                            })
                    }]
                },
                controller: 'CommitToYourController',
                templateUrl: 'pages/statement/commit-toYour/commit-toYour.html'
            })
            .state('statement.statement', {
                url: '/SLAPstatement',
                resolve: {
                    activeStep: ["stepService", "$state", function (stepService, $state) {
                        return stepService.resolveActiveStep(this)
                            .then(function (active) {
                                if (active) {
                                    return active;
                                }

                                return stepService.getLastFinished()
                                    .then(function (finishedStep) {
                                        $state.go(finishedStep.sref);
                                    });
                            })
                    }]
                },
                controller: 'StatementController',
                templateUrl: 'pages/statement/statement/statement.html'
            }).state('statement.step1Summary', {
                url: '/step1SLAPsummary',
            resolve: {
                activeStep: ["stepService", "$state", function (stepService, $state) {
                    return stepService.resolveActiveStep(this)
                        .then(function (active) {
                            if (active) {
                                return active;
                            }

                            return stepService.getLastFinished()
                                .then(function (finishedStep) {
                                    $state.go(finishedStep.sref);
                                });
                        })
                }]
            },
                controller: 'Step1SummaryController',
                templateUrl: 'pages/statement/step1-summary/step1-summary.html'
            });
    }
}());
(function () {
    'use strict';

    moduleConfig.$inject = ["$stateProvider"];
    angular
        .module('app.pages.slapExcute')
        .config(moduleConfig);

    function moduleConfig($stateProvider) {
        $stateProvider
            .state('slapExcute', {
                data: {
                    access: '@'
                },
                abstract: true,
                url: '/slapExcute',
                parent: 'withNavbar',
                views: {
                    content: {
                        template: '<ui-view />'
                    }
                }
            })
            .state('slapExcute.main', {
                url: '/main',
                resolve: {
                    excuteItems: ["excuteItemService", function (excuteItemService) {
                        return excuteItemService.loadExcuteItems();
                    }],
                    userAllData: ["stepService", function (stepService) {
                        return stepService.getAllUserData(this)
                    }]
                },
                controller: 'SlapExcuteMainController',
                templateUrl: 'pages/slapExcute/main/slapExcuteMain.html'
            })
            .state('slapExcute.results', {
                url: '/results',
                resolve: {
                    excuteItems: ["excuteItemService", function (excuteItemService) {
                        return excuteItemService.loadExcuteItems();
                    }],
                    userAllData: ["stepService", function (stepService) {
                        return stepService.getAllUserData(this)
                    }]
                },
                controller: 'SlapExcuteResultsController',
                templateUrl: 'pages/slapExcute/results/slapExcuteResults.html'
            });
    }
}());
(function() {
    'use strict';

    moduleConfig.$inject = ["$stateProvider"];
    angular
        .module('app.pages.settingsUser')
        .config(moduleConfig);

    /* @ngInject */
    function moduleConfig($stateProvider) {
        $stateProvider
            .state('payments', {
                data: {
                    access: '@'
                },
                parent: 'default',
                url: '/payments',
                views: {
                    content: {
                        controller: 'PaymentsController',
                        templateUrl: 'pages/settingsUser/payments/payments.html'
                    }
                }
            })
            .state('myaccounts', {
                data: {
                    access: '@'
                },
                parent: 'default',
                url: '/myaccounts',
                views: {
                    content: {
                        controller: 'MyaccountsController',
                        templateUrl: 'pages/settingsUser/myaccounts/myaccounts.html'
                    }
                }
            })
    }
}());
(function () {
    'use strict';

    moduleConfig.$inject = ["$stateProvider"];
    angular
        .module('app.pages.mindset')
        .config(moduleConfig);

    function moduleConfig($stateProvider) {
        $stateProvider
            .state('mindset', {
                data: {
                    access: '@'
                },
                abstract: true,
                url: '/mindset',
                parent: 'default',
                views: {
                    content: {
                        template: '<ui-view />'
                    }
                }
            })
            .state('mindset.ourCommitment', {
                url: '/ourCommitment',
                resolve: {
                    activeStep: ["stepService", "$state", function (stepService, $state) {
                        return stepService.resolveActiveStep(this)
                            .then(function (active) {
                                if (active) {
                                    return active;
                                }

                                return stepService.getLastFinished()
                                    .then(function (finishedStep) {
                                        $state.go(finishedStep.sref);
                                    });
                            })
                    }]
                },
                controller: 'OurCommitmentController',
                templateUrl: 'pages/mindset/our-commitment/our-commitment.html'
            })
            .state('mindset.yourCommitment', {
                url: '/yourCommitment',
                resolve: {
                    activeStep: ["stepService", "$state", function (stepService, $state) {
                        return stepService.resolveActiveStep(this)
                            .then(function (active) {

                                if (active) {
                                    return active;
                                }

                                return stepService.getLastFinished()
                                    .then(function (finishedStep) {
                                        $state.go(finishedStep.sref);
                                    });
                            })
                    }]
                },
                controller: 'YourCommitmentController',
                templateUrl: 'pages/mindset/your-commitment/your-commitment.html'
            })
            .state('mindset.slapMindset', {
                url: '/SLAPmindset',
                resolve: {
                    activeStep: ["stepService", "$state", function (stepService, $state) {
                        return stepService.resolveActiveStep(this)
                            .then(function (active) {
                                if (active) {
                                    return active;
                                }

                                return stepService.getLastFinished()
                                    .then(function (finishedStep) {
                                        $state.go(finishedStep.sref);
                                    });
                            })
                    }],
                    excuteItemServicecuteItems: ["excuteItemService", function (excuteItemService) {
                        return excuteItemService.loadExcuteItems();
                    }],
                },
                controller: 'SlapMindsetController',
                templateUrl: 'pages/mindset/get-slap-mindset/get-slap-mindset.html'
            })
            .state('mindset.privilegeAndResponsibility', {
                url: '/privilageAndResponsibility',
                resolve: {
                    activeStep: ["stepService", "$state", function (stepService, $state) {
                        return stepService.resolveActiveStep(this)
                            .then(function (active) {
                                if (active) {
                                    return active;
                                }

                                return stepService.getLastFinished()
                                    .then(function (finishedStep) {
                                        $state.go(finishedStep.sref);
                                    });
                            })
                    }]
                },
                controller: 'PrivilegeAndResponsibilityController',
                templateUrl: 'pages/mindset/privilege_and_responsibility/privilege-and-responsibility.html'
            })
            .state('mindset.areYourStuck', {
                url: '/areYourStuck',
                resolve: {
                    activeStep: ["stepService", "$state", function (stepService, $state) {
                        return stepService.resolveActiveStep(this)
                            .then(function (active) {
                                if (active) {
                                    return active;
                                }

                                return stepService.getLastFinished()
                                    .then(function (finishedStep) {
                                        $state.go(finishedStep.sref);
                                    });
                            })
                    }]
                },
                controller: 'AreYourStuckController',
                templateUrl: 'pages/mindset/are-your-stuck/are-your-stuck.html'
            })
            .state('mindset.cashFlow', {
                url: '/cashFlow',
                resolve: {
                    activeStep: ["stepService", "$state", function (stepService, $state) {
                        return stepService.resolveActiveStep(this)
                            .then(function (active) {
                                if (active) {
                                    return active;
                                }

                                return stepService.getLastFinished()
                                    .then(function (finishedStep) {
                                        $state.go(finishedStep.sref);
                                    });
                            })
                    }]
                },
                controller: 'CashFlowController',
                templateUrl: 'pages/mindset/cashflow/cashflow.html'
            })
            .state('mindset.yourBusiness', {
                url: '/yourBusiness',
                resolve: {
                    activeStep: ["stepService", "$state", function (stepService, $state) {
                        return stepService.resolveActiveStep(this)
                            .then(function (active) {
                                if (active) {
                                    return active;
                                }

                                return stepService.getLastFinished()
                                    .then(function (finishedStep) {
                                        $state.go(finishedStep.sref);
                                    });
                            })
                    }]
                },
                controller: 'YourBusinessController',
                templateUrl: 'pages/mindset/your-business/your-business.html'
            })
            .state('mindset.topDownBottomUp', {
                url: '/topDownBottomUp',
                resolve: {
                    activeStep: ["stepService", "$state", function (stepService, $state) {
                        return stepService.resolveActiveStep(this)
                            .then(function (active) {
                                if (active) {
                                    return active;
                                }

                                return stepService.getLastFinished()
                                    .then(function (finishedStep) {
                                        $state.go(finishedStep.sref);
                                    });
                            })
                    }]
                },
                controller: 'TopDownBottomUpController',
                templateUrl: 'pages/mindset/top-down-bottom-up/top-down-bottom-up.html'
            })
            .state('mindset.startSlapn', {
                url: '/startSLAPn',
                resolve: {
                    activeStep: ["stepService", "$state", function (stepService, $state) {
                        return stepService.resolveActiveStep(this)
                            .then(function (active) {
                                if (active) {
                                    return active;
                                }

                                return stepService.getLastFinished()
                                    .then(function (finishedStep) {
                                        $state.go(finishedStep.sref);
                                    });
                            })
                    }]
                },
                controller: 'StartSlapnController',
                templateUrl: 'pages/mindset/start-slapn/start-slapn.html'
            })
            .state('mindset.slapStartDate', {
                url: '/slapStartDate',
                resolve: {
                    activeStep: ["stepService", "$state", function (stepService, $state) {
                        return stepService.resolveActiveStep(this)
                            .then(function (active) {
                                if (active) {
                                    return active;
                                }

                                return stepService.getLastFinished()
                                    .then(function (finishedStep) {
                                        $state.go(finishedStep.sref);
                                    });
                            })
                    }],
                    excuteItems: ["excuteItemService", function (excuteItemService) {
                        return excuteItemService.loadExcuteItems();
                    }],
                },
                controller: 'SlapStartDateController',
                templateUrl: 'pages/mindset/slap-start-date/slap-start-date.html'
            });

    }
}());
(function () {
    'use strict';

    moduleConfig.$inject = ["$stateProvider"];
    angular
        .module('app.pages.main')
        .config(moduleConfig);

    /* @ngInject */
    function moduleConfig($stateProvider) {

        $stateProvider
            .state('unauthorized', {
                parent: 'blank',
                url: '/unauthorized',
                views: {
                    content: {
                        controller: 'MainUnauthorizedController',
                        templateUrl: 'pages/main/unauthorized/main-unauthorized.html'
                    }
                }
            })
            .state('404', {
                parent: 'blank',
                url: '/404',
                views: {
                    content: {
                        controller: 'Main404Controller',
                        templateUrl: 'pages/main/404/main-404.html'
                    }
                }
            })
            .state('500', {
                parent: 'blank',
                url: '/500',
                views: {
                    content: {
                        controller: 'Main500Controller',
                        templateUrl: 'pages/main/500/main-500.html'
                    }
                }
            })
            .state('home', {
                data: {
                    access: '@'
                },
                parent: 'default',
                url: '/?refer',
                resolve: {
                    activeStep: ["stepService", "$state", function (stepService, $state) {
                        return stepService.resolveActiveStep(this)
                            .then(function (active) {
                                if (active) {
                                    return active;
                                }
                                return stepService.getLastFinished()
                                .then(function (finishedStep) {
                                    if (finishedStep.sref == 'welcome')
                                        return true;
                                    else
                                        $state.go(finishedStep.sref);
                                });
                            });
                    }]
                },
                views: {
                    content: {
                        controller: 'MainIndexController',
                        templateUrl: 'pages/main/index/main-index.html'
                    }
                }
            })
            .state('login', {
                data: {
                    access: '?'
                },
                url: '/login?email',
                parent: 'blank',
                views: {
                    content: {
                        controller: 'MainLoginController',
                        templateUrl: 'pages/main/login/main-login.html'
                    }
                }
            })
            .state('signup', {
                abstract: true,
                url: '/signup',
                parent: 'blank',
                views: {
                    content: {
                        // controller: 'MainRegistrationController',
                        // templateUrl: 'pages/main/registration/main-registration.html'
                        template: '<ui-view/>'
                    }
                }
            })
            .state('step1', {
                data: {
                    access: '?'
                },
                url: '',
                parent: 'signup',
                controller: 'RegistrationStep1Controller as vm',
                templateUrl: 'pages/main/registration/registration-step1.html'
            })
            .state('step2', {
                data: {
                    access: '?'
                },
                url: '/step2',
                parent: 'signup',
                controller: 'RegistrationStep2Controller as vm',
                templateUrl: 'pages/main/registration/registration-step2.html'
            })
            .state('step3', {
                data: {
                    access: '?'
                },
                url: '/step3',
                parent: 'signup',
                controller: 'RegistrationStep3Controller as vm',
                templateUrl: 'pages/main/registration/registration-step3.html'
            })
            .state('welcome', {
                data: {
                    access: '@'
                },
                params: {
                    param1: 'welcome'
                },
                parent: 'one',
                url: '/welcome',
                resolve: {
                    activeStep: ["stepService", "$state", function (stepService, $state) {
                        return stepService.resolveActiveStep(this)
                            .then(function (active) {
                                if (active) {
                                    return active;
                                }
                                return stepService.getLastFinished()
                                .then(function (finishedStep) {
                                    if (finishedStep.sref == 'welcome')
                                        return true;
                                    else
                                        $state.go(finishedStep.sref);
                                });
                            });
                    }]
                },
                views: {
                    content: {
                        controller: 'WelcomeController',
                        templateUrl: 'pages/main/welcome/welcome-index.html'
                    }
                }
            })
            .state('confirm', {
                data: {
                    access: '?'
                },
                url: '/confirm/{auth_key}',
                parent: 'blank',
                views: {
                    content: {
                        controller: 'MainConfirmController',
                        templateUrl: 'pages/main/confirm/main-confirm.html'
                    }
                }
            })
            .state('reset', {
                data: {
                    access: '?'
                },
                url: '/reset',
                parent: 'blank',
                views: {
                    content: {
                        controller: 'MainResetController',
                        templateUrl: 'pages/main/reset/main-reset.html'
                    }
                }
            })
            .state('reset_password', {
                data: {
                    access: '?'
                },
                url: '/reset/{token}',
                parent: 'blank',
                views: {
                    content: {
                        controller: 'MainResetPasswordController',
                        templateUrl: 'pages/main/reset_password/main-reset-password.html'
                    }
                }
            })
            .state('logout', {
                url: '/logout',
                controller: 'MainLogoutController'
            });

    }
})();
(function () {
    'use strict';

    moduleConfig.$inject = ["$stateProvider"];
    angular
        .module('app.pages.idealClient')
        .config(moduleConfig);

    function moduleConfig($stateProvider) {
        $stateProvider
            .state('idealClient', {
                data: {
                    access: '@'
                },
                abstract: true,
                url: '/idealClient',
                parent: 'default',
                views: {
                    content: {
                        template: '<ui-view />'
                    }
                }
            })
            .state('idealClient.overview', {
                url: '/overview',
                resolve: {
                    activeStep: ["stepService", "$state", function (stepService, $state) {
                        return stepService.resolveActiveStep(this)
                            .then(function (active) {
                                if (active) {
                                    return active;
                                }

                                return stepService.getLastFinished()
                                    .then(function (finishedStep) {
                                        $state.go(finishedStep.sref);
                                    });
                            })
                    }]
                },
                controller: 'IdealClientOverviewController',
                templateUrl: 'pages/idealClient/ideal-client-overview/ideal-client-overview.html'
            })
            .state('idealClient.whoAreYouIdealClient', {
                url: '/whoAreYouIdealClient',
                resolve: {
                    activeStep: ["stepService", "$state", function (stepService, $state) {
                        return stepService.resolveActiveStep(this)
                            .then(function (active) {
                                if (active) {
                                    return active;
                                }

                                return stepService.getLastFinished()
                                    .then(function (finishedStep) {
                                        $state.go(finishedStep.sref);
                                    });
                            })
                    }]
                },
                controller: 'WhoAreYouIdealClientController',
                templateUrl: 'pages/idealClient/who-are-you-ideal-client/who-are-you-ideal-client.html'
            })
            .state('idealClient.defineYourIdealClient', {
                url: '/defineYourIdealClient',
                resolve: {
                    activeStep: ["stepService", "$state", function (stepService, $state) {
                        return stepService.resolveActiveStep(this)
                            .then(function (active) {
                                if (active) {
                                    return active;
                                }

                                return stepService.getLastFinished()
                                    .then(function (finishedStep) {
                                        $state.go(finishedStep.sref);
                                    });
                            })
                    }]
                },
                controller: 'DefineYourIdealClientController',
                templateUrl: 'pages/idealClient/define-your-ideal-client/define-your-ideal-client.html'
            })
            .state('idealClient.nameYourIdealClient', {
                url: '/nameYourIdealClient',
                resolve: {
                    activeStep: ["stepService", "$state", function (stepService, $state) {
                        return stepService.resolveActiveStep(this)
                            .then(function (active) {
                                if (active) {
                                    return active;
                                }

                                return stepService.getLastFinished()
                                    .then(function (finishedStep) {
                                        $state.go(finishedStep.sref);
                                    });
                            })
                    }]
                },
                controller: 'NameYourIdealClientController',
                templateUrl: 'pages/idealClient/name-your-ideal-client/name-your-ideal-client.html'
            })
            .state('idealClient.qa', {
                url: '/Q&A',
                resolve: {
                    activeStep: ["stepService", "$state", function (stepService, $state) {
                        return stepService.resolveActiveStep(this)
                            .then(function (active) {
                                if (active) {
                                    return active;
                                }

                                return stepService.getLastFinished()
                                    .then(function (finishedStep) {
                                        $state.go(finishedStep.sref);
                                    });
                            })
                    }]
                },
                controller: 'IdealClientQAController',
                templateUrl: 'pages/idealClient/ideal-client-qa/ideal-client-qa.html'
            })
            .state('idealClient.commitYourIdealClient', {
                url: '/commitToYourIdealClient',
                resolve: {
                    activeStep: ["stepService", "$state", function (stepService, $state) {
                        return stepService.resolveActiveStep(this)
                            .then(function (active) {
                                console.log(active);
                                if (active) {
                                    return active;
                                }

                                return stepService.getLastFinished()
                                    .then(function (finishedStep) {
                                        $state.go(finishedStep.sref);
                                    });
                            })
                    }]
                },
                controller: 'CommitYourIdealClientController',
                templateUrl: 'pages/idealClient/commit-your-ideal-client/commit-your-ideal-client.html'
            })
            .state('idealClient.doubleCheck', {
                url: '/doubleCheck',
                resolve: {
                    activeStep: ["stepService", "$state", function (stepService, $state) {
                        return stepService.resolveActiveStep(this)
                            .then(function (active) {
                                if (active) {
                                    return active;
                                }

                                return stepService.getLastFinished()
                                    .then(function (finishedStep) {
                                        $state.go(finishedStep.sref);
                                    });
                            })
                    }]
                },
                controller: 'DoubleCheckController',
                templateUrl: 'pages/idealClient/double-check/double-check.html'
            })
            .state('idealClient.slapStatement', {
                url: '/SLAPstatement',
                resolve: {
                    activeStep: ["stepService", "$state", function (stepService, $state) {
                        return stepService.resolveActiveStep(this)
                            .then(function (active) {
                                if (active) {
                                    return active;
                                }

                                return stepService.getLastFinished()
                                    .then(function (finishedStep) {
                                        $state.go(finishedStep.sref);
                                    });
                            })
                    }]
                },
                controller: 'SlapStatementController',
                templateUrl: 'pages/idealClient/slap-statement/slap-statement.html'
            })
            .state('idealClient.step2Summary', {
                url: '/step2Summary',
                resolve: {
                    activeStep: ["stepService", "$state", function (stepService, $state) {
                        return stepService.resolveActiveStep(this)
                            .then(function (active) {
                                if (active) {
                                    return active;
                                }

                                return stepService.getLastFinished()
                                    .then(function (finishedStep) {
                                        $state.go(finishedStep.sref);
                                    });
                            })
                    }]
                },
                controller: 'Step2SummaryController',
                templateUrl: 'pages/idealClient/step2-summary/step2-summary.html'
            });
    }
}());
(function () {
    'use strict';

    moduleConfig.$inject = ["$stateProvider"];
    angular
        .module('app.pages.execute')
        .config(moduleConfig);

    function moduleConfig($stateProvider) {
        $stateProvider
            .state('execute', {
                data: {
                    access: '@'
                },
                abstract: true,
                url: '/execute',
                parent: 'default',
                views: {
                    content: {
                        template: '<ui-view />'
                    }
                }
            })
            .state('execute.livingDayToDay', {
                url: '/livingSlapDayToDay',
                resolve: {
                    activeStep: ["stepService", "$state", function (stepService, $state) {
                        return stepService.resolveActiveStep(this)
                            .then(function (active) {
                                if (active) {
                                    return active;
                                }

                                return stepService.getLastFinished()
                                    .then(function (finishedStep) {
                                        $state.go(finishedStep.sref);
                                    });
                            })
                    }]
                },
                controller: 'LivingDayToDayController',
                templateUrl: 'pages/execute/living-day-toDay/living-day-toDay.html'
            })
            .state('execute.commitYourSelf', {
                url: '/commitToYourself',
                resolve: {
                    activeStep: ["stepService", "$state", function (stepService, $state) {
                        return stepService.resolveActiveStep(this)
                            .then(function (active) {
                                if (active) {
                                    return active;
                                }

                                return stepService.getLastFinished()
                                    .then(function (finishedStep) {
                                        $state.go(finishedStep.sref);
                                    });
                            })
                    }]
                },
                controller: 'CommitYourselfController',
                templateUrl: 'pages/execute/commit-yourself/commit-yourself.html'
            })
            .state('execute.setYourselfUpForSuccess', {
                url: '/setYourselfUpForSuccess',
                resolve: {
                    activeStep: ["stepService", "$state", function (stepService, $state) {
                        return stepService.resolveActiveStep(this)
                            .then(function (active) {
                                if (active) {
                                    return active;
                                }

                                return stepService.getLastFinished()
                                    .then(function (finishedStep) {
                                        $state.go(finishedStep.sref);
                                    });
                            })
                    }]
                },
                controller: 'SetYourselfUpForSuccessController',
                templateUrl: 'pages/execute/set-yourself-up-for-success/set-yourself-up-for-success.html'
            })
            .state('execute.tourExecute', {
                url: '/tourOfSLAPcenterExecute',
                resolve: {
                    activeStep: ["stepService", "$state", function (stepService, $state) {
                        return stepService.resolveActiveStep(this)
                            .then(function (active) {
                                if (active) {
                                    return active;
                                }

                                return stepService.getLastFinished()
                                    .then(function (finishedStep) {
                                        $state.go(finishedStep.sref);
                                    });
                            })
                    }]
                },
                controller: 'TourExecuteController',
                templateUrl: 'pages/execute/tour-execute/tour-execute.html'
            });
    }
}());
(function () {
    'use strict';

    moduleConfig.$inject = ["$stateProvider"];
    angular
        .module('app.pages.actionPlan')
        .config(moduleConfig);

    function moduleConfig($stateProvider) {
        $stateProvider
            .state('actionPlan', {
                data: {
                    access: '@'
                },
                abstract: true,
                url: '/actionPlan',
                parent: 'default',
                views: {
                    content: {
                        template: '<ui-view />'
                    }
                }
            })
            .state('actionPlan.overview', {
                url: '/overview',
                resolve: {
                    activeStep: ["stepService", "$state", function (stepService, $state) {
                        return stepService.resolveActiveStep(this)
                            .then(function (active) {
                                if (active) {
                                    return active;
                                }

                                return stepService.getLastFinished()
                                    .then(function (finishedStep) {
                                        $state.go(finishedStep.sref);
                                    });
                            })
                    }]
                },
                controller: 'ActionPlanOverviewController',
                templateUrl: 'pages/actionPlan/action-plan-overview/action-plan-overview.html'
            })
            .state('actionPlan.worldAroundYou', {
                url: '/worldAroundYou',
                resolve: {
                    activeStep: ["stepService", "$state", function (stepService, $state) {
                        return stepService.resolveActiveStep(this)
                            .then(function (active) {
                                if (active) {
                                    return active;
                                }

                                return stepService.getLastFinished()
                                    .then(function (finishedStep) {
                                        $state.go(finishedStep.sref);
                                    });
                            })
                    }]
                },
                controller: 'WorldAroundYouController',
                templateUrl: 'pages/actionPlan/world-around-your/world-around-your.html'
            })
            .state('actionPlan.doubleCheckStartDate', {
                url: '/doubleCheckStartDate',
                resolve: {
                    activeStep: ["stepService", "$state", function (stepService, $state) {
                        return stepService.resolveActiveStep(this)
                            .then(function (active) {
                                if (active) {
                                    return active;
                                }

                                return stepService.getLastFinished()
                                    .then(function (finishedStep) {
                                        $state.go(finishedStep.sref);
                                    });
                            })
                    }],
                    excuteItems: ["excuteItemService", function (excuteItemService) {
                        return excuteItemService.loadExcuteItems();
                    }],
                },
                controller: 'SlapStartDateController',
                templateUrl: 'pages/actionPlan/double-check-start-date/double-check-start-date.html'
            })
            .state('actionPlan.whatsHappening', {
                url: '/whatsHappeningInQ1-Q4',
                resolve: {
                    activeStep: ["stepService", "$state", function (stepService, $state) {
                        return stepService.resolveActiveStep(this)
                            .then(function (active) {
                                if (active) {
                                    return active;
                                }

                                return stepService.getLastFinished()
                                    .then(function (finishedStep) {
                                        $state.go(finishedStep.sref);
                                    });
                            })
                    }]
                },
                controller: 'WhatsHappeningController',
                templateUrl: 'pages/actionPlan/whats-happening/whats-happening.html'
            })
            .state('actionPlan.rateConnectingStrategies', {
                url: '/rateThe10ConnectingStrategies',
                resolve: {
                    activeStep: ["stepService", "$state", function (stepService, $state) {
                        return stepService.resolveActiveStep(this)
                            .then(function (active) {
                                if (active) {
                                    return active;
                                }

                                return stepService.getLastFinished()
                                    .then(function (finishedStep) {
                                        $state.go(finishedStep.sref);
                                    });
                            })
                    }]
                },
                controller: 'RateConnectingStrategiesController',
                templateUrl: 'pages/actionPlan/rate-connecting-strategies/rate-connecting-strategies.html'
            })
            .state('actionPlan.connectingStrategyStrategizing', {
                url: '/connectingStrategyStrategizing',
                resolve: {
                    activeStep: ["stepService", "$state", function (stepService, $state) {
                        return stepService.resolveActiveStep(this)
                            .then(function (active) {
                                if (active) {
                                    return active;
                                }

                                return stepService.getLastFinished()
                                    .then(function (finishedStep) {
                                        $state.go(finishedStep.sref);
                                    });
                            });
                    }],
                    actionItems: ["excuteItemService", function (excuteItemService) {
                        return excuteItemService.loadExcuteItems().then(function(excuteItems){
                            return excuteItems.filter(function(item){ return item.type == 'action';});
                        });
                    }],
                },
                controller: 'ConnectingStrategyStrategizingController',
                templateUrl: 'pages/actionPlan/connecting-strategy-strategizing/connecting-strategy-strategizing.html'
            })
            .state('actionPlan.actionItems', {
                url: '/actionItems',
                resolve: {
                    activeStep: ["stepService", "$state", function (stepService, $state) {
                        return stepService.resolveActiveStep(this)
                            .then(function (active) {
                                if (active) {
                                    return active;
                                }

                                return stepService.getLastFinished()
                                    .then(function (finishedStep) {
                                        $state.go(finishedStep.sref);
                                    });
                            })
                    }],
                    actionItems: ["excuteItemService", function (excuteItemService) {
                        return excuteItemService.loadExcuteItems().then(function(excuteItems){
                            return excuteItems.filter(function(item){ return item.type == 'action';});
                        });
                    }],
                },
                controller: 'ConnectingStrategyStrategizingController',
                templateUrl: 'pages/actionPlan/action-items/action-items.html'
            })
            .state('actionPlan.quarterlyGoals', {
                url: '/quarterlyGoals',
                resolve: {
                    activeStep: ["stepService", "$state", function (stepService, $state) {
                        return stepService.resolveActiveStep(this)
                            .then(function (active) {
                                if (active) {
                                    return active;
                                }

                                return stepService.getLastFinished()
                                    .then(function (finishedStep) {
                                        $state.go(finishedStep.sref);
                                    });
                            })
                    }],
                    actionItems: ["excuteItemService", function (excuteItemService) {
                        return excuteItemService.loadExcuteItems().then(function(excuteItems){
                            return excuteItems.filter(function(item){ return item.type == 'action';});
                        });
                    }],
                },
                controller: 'ConnectingStrategyStrategizingController',
                templateUrl: 'pages/actionPlan/quarterly-goals/quarterly-goals.html'
            })
            .state('actionPlan.doubleCheckYearGoal', {
                url: '/doubleCheckYearGoal',
                resolve: {
                    activeStep: ["stepService", "$state", function (stepService, $state) {
                        return stepService.resolveActiveStep(this)
                            .then(function (active) {
                                if (active) {
                                    return active;
                                }

                                return stepService.getLastFinished()
                                    .then(function (finishedStep) {
                                        $state.go(finishedStep.sref);
                                    });
                            })
                    }],
                    actionItems: ["excuteItemService", function (excuteItemService) {
                        return excuteItemService.loadExcuteItems().then(function(excuteItems){
                            return excuteItems.filter(function(item){ return item.type == 'action';});
                        });
                    }],
                },
                controller: 'ConnectingStrategyStrategizingController',
                templateUrl: 'pages/actionPlan/double-check-year-goal/double-check-year-goal.html'
            })
            .state('actionPlan.qa', {
                url: '/Q&A',
                resolve: {
                    activeStep: ["stepService", "$state", function (stepService, $state) {
                        return stepService.resolveActiveStep(this)
                            .then(function (active) {
                                if (active) {
                                    return active;
                                }

                                return stepService.getLastFinished()
                                    .then(function (finishedStep) {
                                        $state.go(finishedStep.sref);
                                    });
                            })
                    }]
                },
                controller: 'ActionPlanQAController',
                templateUrl: 'pages/actionPlan/action-plan-qa/action-plan-qa.html'
            })
            .state('actionPlan.commitToYourActionPlan', {
                url: '/commitToYourActionPlan',
                resolve: {
                    activeStep: ["stepService", "$state", function (stepService, $state) {
                        return stepService.resolveActiveStep(this)
                            .then(function (active) {
                                if (active) {
                                    return active;
                                }

                                return stepService.getLastFinished()
                                    .then(function (finishedStep) {
                                        $state.go(finishedStep.sref);
                                    });
                            })
                    }],
                    actionItems: ["excuteItemService", function (excuteItemService) {
                        return excuteItemService.loadExcuteItems().then(function(excuteItems){
                            return excuteItems.filter(function(item){ return item.type == 'action';});
                        });
                    }],
                },
                controller: 'ConnectingStrategyStrategizingController',
                templateUrl: 'pages/actionPlan/commit-your-action-plan/commit-your-action-plan.html'
            })
            .state('actionPlan.step4Summary', {
                url: '/step4SLAPsummary',
                resolve: {
                    activeStep: ["stepService", "$state", function (stepService, $state) {
                        return stepService.resolveActiveStep(this)
                            .then(function (active) {
                                if (active) {
                                    return active;
                                }

                                return stepService.getLastFinished()
                                    .then(function (finishedStep) {
                                        $state.go(finishedStep.sref);
                                    });
                            })
                    }],
                    actionItems: ["excuteItemService", function (excuteItemService) {
                        return excuteItemService.loadExcuteItems().then(function(excuteItems){
                            return excuteItems.filter(function(item){ return item.type == 'action';});
                        });
                    }],
                },
                controller: 'Step4SummaryController',
                templateUrl: 'pages/actionPlan/step4-summary/step4-summary.html'
            })
            .state('actionPlan.secondExpertReview', {
                url: '/secondSLAPexpertReview',
                resolve: {
                    activeStep: ["stepService", "$state", function (stepService, $state) {
                        return stepService.resolveActiveStep(this)
                            .then(function (active) {
                                if (active) {
                                    return active;
                                }

                                return stepService.getLastFinished()
                                    .then(function (finishedStep) {
                                        $state.go(finishedStep.sref);
                                    });
                            })
                    }],
                    actionItems: ["excuteItemService", function (excuteItemService) {
                        return excuteItemService.loadExcuteItems().then(function(excuteItems){
                            return excuteItems.filter(function(item){ return item.type == 'action';});
                        });
                    }],
                },
                controller: 'Step4SummaryController',
                templateUrl: 'pages/actionPlan/second-expert-review/second-expert-review.html'
            });
    }
}());
(function () {
    'use strict';

    var videoBlock = {
        bindings: {
            visible: '=',
            videoSrc: '='
        },
        templateUrl: 'components/video-block/video-block.html',
        controller: function($scope, $state, stepService) {
            var $ctrl = this;
            $scope.title = stepService.getActiveStep().name;
            // console.log(stepService.getActiveStep());

        }

    };

    angular
        .module('app.components')
        .component('videoBlock', videoBlock);
}());


(function () {
    'use strict';

    var strategyVideoBox = {
        bindings: {
            resolve: '<',
            close: '&',
            dismiss: '&'
        },
        templateUrl: 'components/strategy-video-box/strategy-video-box.html',
        controller: function($scope, $state, stepService) {

            var $ctrl = this;

            $ctrl.$onInit = function () {
                $ctrl.strategy = angular.copy($ctrl.resolve.strategy);

            };

            $ctrl.ok = function () {
                $ctrl.close({$value: {action:'save', strategy: $ctrl.strategy}});
            };

            $ctrl.cancel = function () {
                $ctrl.dismiss({$value: 'cancel'});
            };

            $ctrl.goNextStrategy = function () {
                $ctrl.close({$value: {action:'saveAndNext', strategy: $ctrl.strategy}});
            }

            $ctrl.goPrevStrategy = function () {
                $ctrl.close({$value: {action:'saveAndPrev', strategy: $ctrl.strategy}});
            }
        }

    };

    angular
        .module('app.components')
        .component('strategyVideoBox', strategyVideoBox);
}());


(function () {
    'use strict';

    var slapWorkMomentIcon = {
        bindings: {
            visible: '=',
            type: '=',
            title: '='
        },
        templateUrl: 'components/slap-work-moment-icon/slap-work-moment-icon.html',
        controller: function() {
        }

    };

    angular
        .module('app.components')
        .component('slapWorkMomentIcon', slapWorkMomentIcon);
}());
(function () {
    'use strict';

    var slapStaticText = {
        bindings: {
            visible: '='
        },
        templateUrl: 'components/slap-static-text/slap-static-text.html',
        controller: function() {
        }

    };

    angular
        .module('app.components')
        .component('slapStaticText', slapStaticText);
}());


(function () {
    'use strict';

    var slapRating = {
        bindings: {
            rate: '='
        },
        templateUrl: 'components/slap-rating/slap-rating.html',
        controller: function($scope, $state, stepService) {

            $scope.title = stepService.getActiveStep().name;
            // console.log(stepService.getActiveStep());

        }

    };

    angular
        .module('app.components')
        .component('slapRating', slapRating);
}());

(function () {
    'use strict';

    var slapNotifications = {
        bindings: {
            notifications: '='
        },
        templateUrl: 'components/slap-notifications/slap-notifications.html',
        controller: function($scope) {
            $scope.closeNotice = function(notification) {
                notification.show = false;
            }
        }

    };

    angular
        .module('app.components')
        .component('slapNotifications', slapNotifications);
}());


(function () {
    'use strict';

    var slapListItem = {
        bindings: {
            item: '=',
            title: '@',
            openItemDialog: '&',
            openDeleteItemDialog: '&',
        },
        controller: function ($scope) {
            var vm = this;
        },
        templateUrl: 'components/slap-list-item/slap-list-item.html'
    };

    angular
        .module('app.components')
        .component('slapListItem', slapListItem);
}());
(function () {
    'use strict';

    var slapLeftPanel = {
        controllerAs: 'slapLeftPanel',
        controller: function ($scope, stepService) {
            $scope.subList = {
                slapMindset: [],
                slapStatement: [],
                yearGoals: [],
                idealClients: [],
                actionPlans: [],
                execute: []
            };

            $scope.checkMindset = false;
            $scope.checkStatement = false;
            $scope.checkYearGoal = false;
            $scope.checkIdealClient = false;
            $scope.checkActionPlan = false;
            $scope.checkExecute = false;

            stepService.getAllSteps().forEach(function (item) {
                switch (item.sref.split(".")[0]) {
                    case 'mindset':
                        $scope.subList.slapMindset.push(item);
                        break;
                    case 'statement':
                        $scope.subList.slapStatement.push(item);
                        break;
                    case 'yearGoal':
                        $scope.subList.yearGoals.push(item);
                        break;
                    case 'idealClient':
                        $scope.subList.idealClients.push(item);
                        break;
                    case 'actionPlan':
                        $scope.subList.actionPlans.push(item);
                        break;
                    case 'execute':
                        $scope.subList.execute.push(item);
                        break;
                }
            });
        },
        templateUrl: 'components/slap-left-panel/leftPanel.html'
    };

    angular
        .module('app.components')
        .component('slapLeftPanel', slapLeftPanel);
}());
(function () {
    'use strict';

    var slapHeader = {
        binding: {},
        controller: function ($auth, $state, userService, $window) {
            var vm = this;

            userService.getUser().then(function (user) {
                 vm.user = user;
            });

            this.logout = function () {
                $auth.logout();
                $window.location.reload();
                $state.go('login');
            }
            
            this.selectSLAPyear = function(user) {
                if(user._id == vm.user._id)
                    return;

                userService.selectSLAPyear(user._id)
                .then(function(req){
                    $auth.setToken(req.data.token);
                    // userService.getUser(true).then(function (user) {
                    //     vm.user = user;
                    //     // $state.go('home');
                    // });
                    $state.go('home');
                    $window.location.reload();

                })

            }
        },
        templateUrl: 'components/slap-header/slap-header.html'
    };

    angular
        .module('app.components')
        .component('slapHeader', slapHeader);
}());
(function () {
    'use strict';

    var slapFooter = {
        bindings: {
            send: '&',
            forward: '='
        },
        controller: function (stepService, $timeout, $rootScope, $state) {
            var vm = this;

            vm.state = stepService.getNextAndPrevStep();

            vm.next = function () {
                if (vm.forward) {
                    vm.send()('forward');  //TODO: forward true, validation absent sccroll top
                } else {
                    $('body').animate({
                        scrollTop: $("slap-notifications").offset().top
                    }, 400);
                }
            };

            vm.prev = function () {
                if (vm.forward) {
                    vm.send()('backward');
                } else {
                    $('body').animate({
                        scrollTop: $("slap-notifications").offset().top
                    }, 400);
                }
                // $timeout(scrollTop);
            };

        },
        templateUrl: 'components/slap-footer/slap-footer.html'
    };

    angular
        .module('app.components')
        .component('slapFooter', slapFooter);
}());
(function () {
    'use strict';

    var slapColorSwitch = {
        bindings: {
            value: '=',
            color: '@',
            name: '@',
            static: '=',
            quater: '='
        },
        templateUrl: 'components/slap-color-switch/slap-color-switch.html',
        controller: function($scope, $state) {
        	var $ctrl = this;
            $ctrl.$onInit = function () {
                if(_.isUndefined($ctrl.quater))
                    $ctrl.bgcolor = $ctrl.value || $ctrl.static ? $ctrl.color : '#fff';
                else
                    $ctrl.bgcolor = $ctrl.value == $ctrl.quater ? $ctrl.color : '#fff';
                
            };
            $ctrl.toggleValue = function(){
                if(_.isUndefined($ctrl.quater)) {
                    $ctrl.value = !$ctrl.value;
                    $ctrl.bgcolor = $ctrl.value || $ctrl.static ? $ctrl.color : '#fff';
                } else {
                    $ctrl.value = $ctrl.quater;
                    $ctrl.bgcolor = $ctrl.value == $ctrl.quater ? $ctrl.color : '#fff';
                }
            }
            
            $scope.$watch('$ctrl.value', function(){
                if(_.isUndefined($ctrl.quater)) {
                    $ctrl.bgcolor = $ctrl.value || $ctrl.static ? $ctrl.color : '#fff';
                } else {
                    $ctrl.bgcolor = $ctrl.value == $ctrl.quater ? $ctrl.color : '#fff';
                }
            })
        }

    };

    angular
        .module('app.components')
        .component('slapColorSwitch', slapColorSwitch);
}());

(function () {
    'use strict';

    var buttonSwitch = {
        bindings: {
            visible: '='
        },
        templateUrl: 'components/button-switch/button-switch.html',
        controller: function() {
        }

    };

    angular
        .module('app.components')
        .component('buttonSwitch', buttonSwitch);
}());
(function() {
    'use strict';

    angular
        .module('adminapp.pages',
            [
                'adminapp.pages.main',
                'adminapp.pages.manage',
                'adminapp.pages.reports',
                'adminapp.pages.slapsters'
            ]);
}());
(function() {
    'use strict';

    angular
        .module('adminapp',
            [
                'templates',

                'ngAnimate',
                'ngSanitize',

                'ui.router',
                'ui.select',
                'ui.bootstrap',
                'satellizer',
                'toaster',
                'restangular',
                'ngTable',
                'frapontillo.bootstrap-switch',
                'textAngular',

                'adminapp.filters',
                'adminapp.components',
                'adminapp.directives',
                'adminapp.pages'
            ]);
}());
(function () {
    'use strict';

    AdminLayoutDefaultController.$inject = ["$scope", "BCService"];
    angular
        .module('adminapp')
        .controller('AdminLayoutDefaultController', AdminLayoutDefaultController);

    // LayoutDefaultController.$inject = ['$state'];

    /* @ngInject */
    function AdminLayoutDefaultController($scope, BCService) {
        $scope.bc = BCService;
    }
}());
(function() {
    'use strict';

    angular
        .module('adminapp')
        .controller('AdminLayoutBlankController', AdminLayoutBlankController);

    function AdminLayoutBlankController() {
    	console.log('Admin Layout Blank');
    }
}());
(function() {
    'use strict';

    angular
        .module('adminapp.filters', []);
}());
(function() {
    'use strict';

    angular
        .module('adminapp.filters')
        .filter('joinBr', joinBr);

    function joinBr() {
        return function (array) {
            return angular.isArray(array) ? array.join('<br>') : '';
        }
    }
}());
(function () {
    'use strict';

    angular
        .module('adminapp.directives', []);
})();
(function () {
    'use strict';

    compile.$inject = ["$compile"];
    angular
        .module('adminapp.directives')
        .directive('compile', compile);


    function compile($compile) {
        function link(scope, element, attrs) {
            scope.$watch(
                function(scope) {
                    // watch the 'compile' expression for changes
                    return scope.$eval(attrs.compile);
                },
                function(value) {
                    // when the 'compile' expression changes
                    // assign it into the current DOM
                    element.html(value);

                    // compile the new DOM and link it to the current
                    // scope.
                    // NOTE: we only compile .childNodes so that
                    // we don't get into infinite loop compiling ourselves
                    $compile(element.contents())(scope);
                }
            );
        }

        return {
            link: link,
            restrict: 'A'
        }
    }

})(); 
(function () {
    'use strict';

    userService.$inject = ["$q", "apiService", "$rootScope", "adminUserService"];
    angular
        .module('app.services')
        .service('userService', userService);

    /* @ngInject */
    function userService($q, apiService, $rootScope, adminUserService) {
        var me = this;

        // --- vars ---
        me.user = null;
        me.resolveUser = null;

        me.userPromise = new Promise(function (resolve) {
            return me.resolveUser = resolve;
        });
        // --- methods ---

        me.getUser = function () {
            return me.userPromise;
        };
        
        me.selectSLAPyear = function(userId) {
            return apiService.rest.all('auth').all('selectslapyear').one(userId).post();
        };

        me.loadUser = function (refresh) {
            var deferred = $q.defer();

            if (!refresh && me.user) {
                deferred.resolve(me.user);
            } else {
                me.rest().get().then(function (resp) {
                    // $rootScope.$broadcast('userEvent');
                    me.user = resp.data;

                    // For security

                    // me.user = {
                    //     name: resp.data.name,
                    //     lastName: resp.data.lastName,
                    //     email: resp.data.email,
                    //     id: resp.data._id,
                    //     businessName: resp.data.businessName,
                    //     role: resp.data.role,
                    //     status: resp.data.status
                    // };
                    // var accounts = resp.data.accounts.map(function(acc){
                    //     return {
                    //         name: acc.name,
                    //         lastName: acc.lastName,
                    //         email: acc.email,
                    //         id: acc._id,
                    //         businessName: acc.businessName,
                    //         role: acc.role,
                    //         status: acc.status
                    //     };
                    // });
                    // me.user.accounts = accounts;
                    
                    console.log(me.user);
                    me.resolveUser(me.user);
                    deferred.resolve(me.user);
                });
                // deferred.resolve(me.user);
            }

            return deferred.promise;
        };

        me.setPassword = function (confirm, token) {
            return apiService.rest.all('auth').all('check-password').post(
                angular.extend(
                    {
                        'access-token': token
                    },
                    confirm
                )
            );
        };

        me.check = function (token) {
            return apiService.rest.all('auth').all('check').getList({'access-token': token});
        };
        me.reset = function (email) {
            return apiService.rest.one('auth').one('reset').get({'email': email});
        };

        me.getData = function (field) {
            return field ? me.user[field] : me.user;
        };

        me.getUserByEmail = function (request) {
            return apiService.rest.all('auth').one('email').get(request);
        };

        me.isAdmin = function () {
            return (me.user && ((me.user.role == 1) || (me.user.role == 3) || (me.user.role == 2) || (me.user.role == 5)));
        };

        me.rest = function () {
            return apiService.rest.one('auth');
        };

        me.updateMe = function(userData) {
            return apiService.rest.all('me').post(userData).then(function(user){
                console.log(user.data);
                return me.user = user.data;
            });
        }

        me.changeCreditCard = function(card) {

            return apiService.rest.all('me').all('change-card').post(card).then(function(user){
                console.log(user.data);
                return me.user = user.data;
            });
        }

        me.changeMyPassword = function(password) {
            //TODO ;;change password;
        }

        me.getCreditCard = function() {
            
            return apiService.rest.all('me').one('current-card').get().then(function(last4){
                me.user.last4 = last4.data.last4;
                return me.user;
            });
        }
    }
})();
(function () {
    'use strict';

    stepService.$inject = ["apiService", "$q"];
    angular
        .module('app.services')
        .service('stepService', stepService);

    function stepService(apiService, $q) {
        var steps = [
            {
                name: 'Our Commitment To You',
                sref: 'mindset.ourCommitment',
                model: {
                    showInfoBlock: false,
                    showVideoBlock: false,
                    showStaticTextBlock: false
                }
            }, {
                name: 'Your Commitment to Us',
                sref: 'mindset.yourCommitment',
                model: {
                    showInfoBlock: false,
                    showVideoBlock: false,
                    showStaticTextBlock: false,
                    data: null
                }
            }, {
                name: 'Get the SLAPmindset',
                sref: 'mindset.slapMindset',
                model: {
                    showInfoBlock: false,
                    showVideoBlock: false,
                    showStaticTextBlock: false
                }
            }, {
                name: 'Privilege and Responsibility',
                sref: 'mindset.privilegeAndResponsibility',
                model: {
                    showInfoBlock: false,
                    showVideoBlock: false,
                    showStaticTextBlock: false,
                    showDropdownBlock: false,
                    showNotice: false,
                    data: {
                        first: null,
                        second: null,
                        third: null,
                        fourth: null,
                        text: null,
                        businessName: null,
                        result: null
                    }
                }
            }, {
                name: 'Are You Stuck?',
                sref: 'mindset.areYourStuck',
                model: {
                    showInfoBlock: false,
                    showVideoBlock: false,
                    showStaticTextBlock: false,
                    data: null
                }
            }, {
                name: 'Cashflow Capacity Catch 22',
                sref: 'mindset.cashFlow',
                model: {
                    showInfoBlock: false,
                    showVideoBlock: false,
                    showStaticTextBlock: false
                }
            }, {
                name: 'Your Business With / Without A SLAP',
                sref: 'mindset.yourBusiness',
                model: {
                    showInfoBlock: false,
                    showVideoBlock: false,
                    showStaticTextBlock: false
                }
            }, {
                name: 'Top Down, Bottom Up',
                sref: 'mindset.topDownBottomUp',
                model: {
                    showInfoBlock: false,
                    showVideoBlock: false,
                    showStaticTextBlock: false
                }
            }, {
                name: 'Start SLAP\'n!',
                sref: 'mindset.startSlapn',
                model: {
                    showInfoBlock: false,
                    showVideoBlock: false,
                    showStaticTextBlock: false
                }
            }, {
                name: 'Your SLAP Start Date',
                sref: 'mindset.slapStartDate',
                model: {
                    data: {
                        year: null,
                        month: null
                    },
                    showVideoBlock: false,
                    showStaticTextBlock: false,
                    showStartDate: false
                }
            },

            // Slapstatement

            {
                name: 'SLAPstatement Overview',
                sref: 'statement.overview',
                model: {
                    showInfoBlock: false,
                    showVideoBlock: false,
                    showStaticTextBlock: false
                }
            }, {
                name: 'Your SLAPstatement',
                sref: 'statement.yourStatement',
                model: {
                    data: {
                        first: '0',
                        second: '',
                        third: '0',
                        fourth: '',
                        fifth: '0'
                    },
                    fullName: null,
                    showVideoBlock: false,
                    showStaticTextBlock: false,
                    showFormBlock: false
                }
            }, {
                name: 'SLAPstatement Q&A',
                sref: 'statement.qa',
                model: {
                    showInfoBlock: false,
                    showVideoBlock: false,
                    showStaticTextBlock: false
                }
            }, {
                name: 'Commit To Your SLAPStatement',
                sref: 'statement.commitToYour',
                model: {
                    showVideoBlock: false,
                    showStaticTextBlock: false,
                    showContent: false,
                    data: {},
                    businessName: null
                }
            }, {
                name: 'Step 1 SLAPsummary',
                sref: 'statement.step1Summary',
                model: {
                    showVideoBlock: false,
                    showStaticTextBlock: false,
                    showFormBlock: false,
                    data: {
                        first: '0',
                        second: null,
                        third: '0',
                        fourth: null,
                        fifth: '0',
                        sixth: null,
                        businessName: null
                    }
                }
            },

            // Ideal client

            {
                name: 'Ideal Client Overview',
                sref: 'idealClient.overview',
                model: {
                    showVideoBlock: false,
                    showStaticTextBlock: false
                }
            }, {
                name: 'Who Are Your Ideal Clients?',
                sref: 'idealClient.whoAreYouIdealClient',
                model: {
                    showVideoBlock: false,
                    showStaticTextBlock: false,
                    showIdealClientTextBlock: false,
                    data: {
                        clients: [],
                        idealClient: {}
                    }
                }
            }, {
                name: 'Define Your Ideal Client',
                sref: 'idealClient.defineYourIdealClient',
                model: {
                    showVideoBlock: false,
                    showStaticTextBlock: false,
                    showContent: false,
                    data: {
                        clients: [],
                        idealClient: {
                            name: '',
                            gender: '0',
                            age: '0',
                            maritalStatus: '0',
                            kids: '0',
                            employment: '0',
                            location: '0',
                            home: '0',
                            transit: '0',
                            hobbies: '0',
                            reads: '0',
                            number: 0
                        }
                    }
                }
            }, {
                name: 'Name Your Ideal Client',
                sref: 'idealClient.nameYourIdealClient',
                model: {
                    showVideoBlock: false,
                    showStaticTextBlock: false,
                    showIdealClientNameBlock: false
                }
            }, {
                name: 'Ideal Client Q&A',
                sref: 'idealClient.qa',
                model: {
                    showVideoBlock: false,
                    showStaticTextBlock: false
                }
            }, {
                name: 'SLAPstatement Re-Commitment',
                sref: 'idealClient.commitYourIdealClient',
                model: {
                    showVideoBlock: false,
                    showStaticTextBlock: false,
                    showContent: false
                }
            },
            {
                name: 'Step 2 SLAPsummary',
                sref: 'idealClient.step2Summary',
                model: {
                    showVideoBlock: false,
                    showStaticTextBlock: false,
                    showContent: false
                }
            },

            // 1 Year goal

            {
                name: '1 Year Goal Overview',
                sref: 'yearGoal.overview',
                model: {
                    showVideoBlock: false,
                    showStaticTextBlock: false,
                }
            }, {
                name: 'Personal Expenses',
                sref: 'yearGoal.personalExpenses',
                model: {
                    showVideoBlock: false,
                    showStaticTextBlock: false,
                    showContent: false,
                    data: {
                        expenses: [],
                        incidentals: '1.00',
                        expensesSum: 0
                    }
                }
            }, {
                name: 'Fixed Business Expenses',
                sref: 'yearGoal.fixedBusinessExpenses',
                model: {
                    showVideoBlock: false,
                    showStaticTextBlock: false,
                    showContent: false,
                    data: {
                        expenses: [],
                        incidentals: '1.00',
                        expensesSum: 0,
                        profit: '0.00'
                    }
                }
            }, {
                name: 'Total Fixed Expenses Revenue',
                sref: 'yearGoal.totalFixedExpensesRevenue',
                model: {
                    showVideoBlock: false,
                    showStaticTextBlock: false,
                    showContent: false
                }
            }, {
                name: 'Revenue Streams',
                sref: 'yearGoal.revenueStreams',
                model: {
                    showVideoBlock: false,
                    showStaticTextBlock: false,
                    showContent: false,
                    data: {
                        revenues: [],
                        totalBreakdown: 0,
                    }
                }
            }, {
                name: 'Selling Price',
                sref: 'yearGoal.sellingPrice',
                model: {
                    showVideoBlock: false,
                    showStaticTextBlock: false,
                    showContent: false,
                    data: {
                        revenues: [],
                        totalBreakdown: 0,
                    }
                }
            }, {
                name: 'Variable Business Expenses',
                sref: 'yearGoal.variableBusinessExpenses',
                model: {
                    showVideoBlock: false,
                    showStaticTextBlock: false,
                    showContent: false,
                    data: {
                        revenues: [],
                        totalBreakdown: 0,
                    }
                }
            }, {
                name: 'Profit Margin',
                sref: 'yearGoal.profitMargin',
                model: {
                    showVideoBlock: false,
                    showStaticTextBlock: false,
                    showContent: false,
                    data: {
                        revenues: [],
                        totalBreakdown: 0,
                    }
                }
            }, {
                name: 'Revenue Breakdown',
                sref: 'yearGoal.revenueBreakdown',
                model: {
                    showVideoBlock: false,
                    showStaticTextBlock: false,
                    showContent: false,
                    data: {
                        revenues: [],
                        totalBreakdown: 0,
                    }
                }
            }, {
                name: 'Your 1 Year Goal',
                sref: 'yearGoal.yourYearGoal',
                model: {
                    showVideoBlock: false,
                    showStaticTextBlock: false,
                    showContent: false,
                    data: {
                        revenues: [],
                        totalBreakdown: 0,
                    }
                }
            }, {
                name: 'Adjust your 1 Year Goal',
                sref: 'yearGoal.adjustYourYearGoal',
                model: {
                    showVideoBlock: false,
                    showStaticTextBlock: false,
                    showContent: false,
                    data: {
                        revenues: [],
                        totalBreakdown: 0,
                    }
                }
            }, {
                name: '1 Year Goal Q&A',
                sref: 'yearGoal.qa',
                model: {
                    showVideoBlock: false,
                    showStaticTextBlock: false
                }
            }, {
                name: 'Commit To Your 1 Year Goal',
                sref: 'yearGoal.commitYourYearGoal',
                model: {
                    showVideoBlock: false,
                    showStaticTextBlock: false,
                    showContent: false,
                    data: {
                        expenses: [],
                        incidentals: '1.00',
                        expensesSum: 0
                    }
                }
            }, {
                name: 'Step 3 SLAPsummary',
                sref: 'yearGoal.step3Summary',
                model: {
                    showVideoBlock: false,
                    showStaticTextBlock: false,
                    showContent: false
                }
            }, 
            // Action plan

            {
                name: 'Action Plan Overview',
                sref: 'actionPlan.overview',
                model: {
                    showVideoBlock: false,
                    showStaticTextBlock: false
                }
            }, {
                name: 'The World Around You',
                sref: 'actionPlan.worldAroundYou',
                model: {
                    showVideoBlock: false,
                    showStaticTextBlock: false,
                    showContent: false,
                    data: {
                        eventsByMonth: []
                    } 
                }
            }, {
                name: 'Double Check Start Date',
                sref: 'actionPlan.doubleCheckStartDate',
                model: {
                    showVideoBlock: false,
                    showStaticTextBlock: false,
                    showContent: false,
                    data: {}
                }
            }, {
                name: 'What\'s Happening in Q1-Q4',
                sref: 'actionPlan.whatsHappening',
                model: {
                    showVideoBlock: false,
                    showStaticTextBlock: false,
                    showContent: false,
                    data: [
                        {
                            "impactClient" : "",
                            "impactBusiness" : ""
                        },
                        {
                            "impactClient" : "",
                            "impactBusiness" : ""
                        },
                        {
                            "impactClient" : "",
                            "impactBusiness" : ""
                        },
                        {
                            "impactClient" : "",
                            "impactBusiness" : ""
                        },
                    ]
                }
            }, {
                name: 'Rate the 10 Connecting Strategies',
                sref: 'actionPlan.rateConnectingStrategies',
                model: {
                    showVideoBlock: false,
                    showStaticTextBlock: false,
                    showContent: false,
                    data: []
                }
            }, {
                name: 'Connecting Strategy Strategizing',
                sref: 'actionPlan.connectingStrategyStrategizing',
                model: {
                    showVideoBlock: false,
                    showStaticTextBlock: false,
                    showContent: false,
                    data: [
                        {}, {}, {}, {}
                    ]
                }
            }, {
                name: 'Action Items',   
                sref: 'actionPlan.actionItems',
                model: {
                    showVideoBlock: false,
                    showStaticTextBlock: false,
                    showContent: false,
                    data: [
                        {}, {}, {}, {}
                    ]
                }
            }, {
                name: 'Quarterly Goals',
                sref: 'actionPlan.quarterlyGoals',
                model: {
                    showVideoBlock: false,
                    showStaticTextBlock: false,
                    showContent: false,
                    data: [
                        {}, {}, {}, {}
                    ]
                }
            }, {
                name: 'Double Check 1 Year Goal',
                sref: 'actionPlan.doubleCheckYearGoal',
                model: {
                    showVideoBlock: false,
                    showStaticTextBlock: false,
                    showContent: false,
                    data: []
                }
            }, {
                name: 'Action Plan Q&A',
                sref: 'actionPlan.qa',
                model: {
                    showVideoBlock: false,
                    showStaticTextBlock: false
                }
            }, {
                name: 'Commit To Your Action Plan',
                sref: 'actionPlan.commitToYourActionPlan',
                model: {
                    showVideoBlock: false,
                    showStaticTextBlock: false,
                    showContent: false,
                    data: []
                }
            }, {
                name: 'Step 4 SLAPsummary',
                sref: 'actionPlan.step4Summary',
                model: {
                    showVideoBlock: false,
                    showStaticTextBlock: false,
                    showContent: false
                }
            }, {
                name: 'Second SLAPexpert Review',
                sref: 'actionPlan.secondExpertReview',
                model: {
                    showVideoBlock: false,
                    showStaticTextBlock: false,
                    showContent: false
                }
            },

            // Execute

            {
                name: 'Living SLAP Day-to-Day',
                sref: 'execute.livingDayToDay',
                model: {
                    showVideoBlock: false,
                    showStaticTextBlock: false
                }
            }, {
                name: 'Commit to Yourself',
                sref: 'execute.commitYourSelf',
                model: {
                    showVideoBlock: false,
                    showStaticTextBlock: false
                }
            }, {
                name: 'Set Yourself Up For Success',
                sref: 'execute.setYourselfUpForSuccess',
                model: {
                    showVideoBlock: false,
                    showStaticTextBlock: false
                }
            }, {
                name: 'Tour of SLAPcenter - Execute',
                sref: 'execute.tourExecute',
                model: {
                    showVideoBlock: false,
                    showStaticTextBlock: false
                }
            }];

        var finishedSteps = [];


        // temporary crutch
        // _.forEach(steps, function (value, key) {
        //     finishedSteps.push(key);
        // });


        var activeStepIndex = null;
        var activeStep = null;
        var prevStep = null;
        var nextStep = null;
        var requestApi = false;
        var stepIndex = null;

        this.getActiveStep = getActiveStep;
        this.getNextAndPrevStep = getNextAndPrevStep;
        this.setFinishActiveStep = setFinishActiveStep;
        this.updateActiveModel = updateActiveModel;
        this.getAllSteps = getAllSteps;
        this.resolveActiveStep = resolveActiveStep;
        this.getLastFinished = getLastFinished;
        this.setRequestApiFlag = setRequestApiFlag;
        this.getAllUserData = getAllUserData
        this.getAllStepDataByUser = getAllStepDataByUser;
        
        this.checkStepsIsFinishedSection = checkStepsIsFinishedSection;

        this.sendApiData = sendApiData;
        this.getApiData = getApiData;

        ///////////////////////////////

        function sendApiData(url, data) {
            return apiService.rest.all(url).post({
                data: data, finishedSteps: finishedSteps
            });
        }

        function getApiData(url) {
            return apiService
                .rest
                .one(url)
                .get();
        }

        function getLastFinished() {
            return $q(function (resolve) {
                if (finishedSteps.length == 0) {
                    return resolve({sref: "welcome"});
                } else if (finishedSteps.length >= 52) {
                    return resolve({sref: "slapExcute.main"});
                } else {
                    var lastSteps = finishedSteps[finishedSteps.length - 1];
                    return resolve(steps[lastSteps]);
                }
            });
        }
        
        function getAllUserData() {
           return getFinishedStepsAPI()
            .then(function (response) {
                return response.data;
            });
        }

        function resolveActiveStep(state) {

            return $q(function (resolve, reject) {
                return _initApiData()
                    .then(function () {
                        var step = getStateStep(state);
                        var prev = getPrevStep(stepIndex);
                        var next = getNextStep(stepIndex);

                        if (!prev) {
                            activeStep = step;
                            activeStepIndex = stepIndex;
                            prevStep = prev;
                            nextStep = next;
                            return resolve(activeStep);
                        }

                        if (prev && isFinished(stepIndex - 1)) {
                            activeStep = step;
                            activeStepIndex = stepIndex;
                            prevStep = prev;
                            nextStep = next;
                            return resolve(activeStep);
                        }

                        return resolve(null);
                    })
                    .catch(reject);
            });
        }

        function getStateStep(state) {
            return steps.find(function (step, index) {
                if (step.sref === state.self.name) {
                    stepIndex = index;

                    return true;
                }

                return false;
            })
        }

        function _initApiData() {
            var deferred = $q.defer();

            if (finishedSteps.length === 0 || !requestApi) {
                requestApi = !requestApi;
                return getFinishedStepsAPI()
                    .then(function (response) {
                        if (response.data) {
                            finishedSteps = response.data.steps.finishedSteps.map(function(step){ return parseInt(step); });
                            _setDataStepModel(response.data);
                        }
                    })
                    .catch(function (err) {
                        return err;
                    })
            }

            deferred.resolve();

            return deferred.promise;
        }

        function _setDataStepModel(data) {
            if (data.slapMindset) {
                for (var key in data.slapMindset) {
                    var sref = 'mindset.' + key;
                    var step = steps.find(function (item) {
                        return item.sref === sref;
                    });

                    if(step) {
                        if (Array.isArray(data.slapMindset[key]) && data.slapMindset[key].length <= 0) {
                            step.model.data = null;
                        } else {
                            step.model.data = data.slapMindset[key];
                        }
                    }
                }
            }

            if(data.statement) {
                for (var key in data.statement) {
                    var sref = 'statement.' + key;
                    var step = steps.find(function (item) {
                        return item.sref === sref;
                    });

                    if(step) {
                        if (Array.isArray(data.statement[key]) && data.statement[key].length <= 0) {
                            step.model.data = null;
                        }
                        step.model.data = data.statement[key];
                    }
                }
            }

            if(data.idealClient) {
                for (var key in data.idealClient) {
                    var sref = 'idealClient.' + key;
                    var step = steps.find(function (item) {
                        return item.sref === sref;
                    });

                    if(step) {
                        if (Array.isArray(data.idealClient[key]) && data.idealClient[key].length === 0) {
                            step.model.data = null;
                        }
                        step.model.data = data.idealClient[key];
                    }
                }
            }


            if(data.yearGoal) {
                for (var key in data.yearGoal) {
                    var sref = 'yearGoal.' + key;
                    var step = steps.find(function (item) {
                        return item.sref === sref;
                    });

                    if(step) {
                        if (Array.isArray(data.yearGoal[key]) && data.yearGoal[key].length === 0) {
                            step.model.data = null;
                        }
                        step.model.data = data.yearGoal[key];
                    }
                }
            }


            if(data.actionPlan) {
                for (var key in data.actionPlan) {
                    var sref = 'actionPlan.' + key;
                    var step = steps.find(function (item) {
                        return item.sref === sref;
                    });

                    if(step) {
                        if (Array.isArray(data.actionPlan[key]) && data.actionPlan[key].length === 0) {
                            step.model.data = null;
                        }
                        step.model.data = data.actionPlan[key];
                    }
                }
            }
        }

        function isFinished(index) {
            return finishedSteps.indexOf(index) === -1 ? false : true;
        }

        function getActiveStep() {
            return activeStep;
        }

        function getNextAndPrevStep() {
            return {
                prevStep: prevStep,
                nextStep: nextStep
            }
        }

        function updateActiveModel(data) {
            for (var prop in data) {
                if (data.hasOwnProperty(prop) && activeStep.model.hasOwnProperty(prop)) {
                    activeStep.model[prop] = data[prop];
                }
            }
        }

        function setFinishActiveStep() {
            if (finishedSteps.indexOf(activeStepIndex) === -1) {
                finishedSteps.push(activeStepIndex);
                return true; // This means that the activeStep is new and should make activity
            } 
            return false;
        }

        function getAllSteps() {
            return steps;
        }

        function getFinishedStepsAPI() {
            return apiService.rest.one('getFinishedUserStep').get();
        }

        function getPrevStep(index) {
            if (index > 0) {
                return steps[index - 1];
            }
            return null;
        }

        function getNextStep(index) {
            if (index < steps.length - 1) {
                return steps[index + 1];
            }

            return null;
        }

        function checkStepsIsFinishedSection(stepsGroup, prevNameStep) {
            if (stepsGroup[stepsGroup.length - 1].sref === prevNameStep) return true;

            var lastStepGroupIndex = steps.findIndex(function (item) {
                return item.sref === stepsGroup[stepsGroup.length - 1].sref; //TODO:bottleneck
            });

            return finishedSteps.find(function (item) {
                return item === lastStepGroupIndex;
            })
        }

        function setRequestApiFlag(){
            requestApi = false;
        }

        function getAllStepDataByUser(user_id) {
            return apiService.rest.all('getFinishedUserStep').one(user_id).get();
        }
    }
}());
(function() {
    'use strict';

    angular
        .module('app.services')
        .service('mindsetService', mindsetService);

    function mindsetService() {
        var _sliders = [
            {
                name: 'I Know I Am In Charge Of My Bussiness Success',
                left: 'I am a victim of circumstance',
                right: 'I am SO IN CHARGE!!',
                value: 0,
                options: {
                    floor: -5,
                    ceil: 5,
                    showSelectionBarFromValue: 0,
                    showTicks: true,
                    hidePointerLabels: true,
                    hideLimitLabels: true
                }
            },{
                name: 'every day i evaluate my Actions to see if they are gettin my results',
                left: 'What/My actions = my results?',
                right: 'I know exactly what to do',
                value: 0,
                options: {
                    floor: -5,
                    ceil: 5,
                    showSelectionBarFromValue: 0,
                    showTicks: true,
                    hidePointerLabels: true,
                    hideLimitLabels: true
                }
            },{
                name: 'I am proactive, not reactive',
                left: 'I can never catch my breath',
                right: 'I run my day and my life',
                value: 0,
                options: {
                    floor: -5,
                    ceil: 5,
                    showSelectionBarFromValue: 0,
                    showTicks: true,
                    hidePointerLabels: true,
                    hideLimitLabels: true
                }
            },{
                name: 'I say no more then I say yes.',
                left: 'What does no mean?',
                right: 'No is my favorite word!',
                value: 0,
                options: {
                    floor: -5,
                    ceil: 5,
                    showSelectionBarFromValue: 0,
                    showTicks: true,
                    hidePointerLabels: true,
                    hideLimitLabels: true
                }
            },{
                name: 'I spend my time and money well',
                left: 'I don\'t even know how I spend my time and money',
                right: 'Go it!',
                value: 0,
                options: {
                    floor: -5,
                    ceil: 5,
                    showSelectionBarFromValue: 0,
                    showTicks: true,
                    hidePointerLabels: true,
                    hideLimitLabels: true
                }
            }
        ];

        var _stuckSliders = [
            {
                name: 'I Know I Am In Charge Of My Bussiness Success',
                left: 'i am a victim of circumstance',
                right: 'i am SO IN CHARGE!!',
                value: 0,
                options: {
                    floor: -5,
                    ceil: 5,
                    showSelectionBarFromValue: 0,
                    showTicks: true,
                    hidePointerLabels: true,
                    hideLimitLabels: true
                }
            },{
                name: 'every day i evaluate my Actions to see if they are gettin my results',
                left: 'What/My actions = my results?',
                right: 'I know exactly what to do',
                value: 0,
                options: {
                    floor: -5,
                    ceil: 5,
                    showSelectionBarFromValue: 0,
                    showTicks: true,
                    hidePointerLabels: true,
                    hideLimitLabels: true
                }
            },{
                name: 'I am proactive, not reactive',
                left: 'I can never catch my breath',
                right: 'I run my day and my life',
                value: 0,
                options: {
                    floor: -5,
                    ceil: 5,
                    showSelectionBarFromValue: 0,
                    showTicks: true,
                    hidePointerLabels: true,
                    hideLimitLabels: true
                }
            },{
                name: 'I say no more then I say yes.',
                left: 'What does no mean?',
                right: 'No is my favorite word!',
                value: 0,
                options: {
                    floor: -5,
                    ceil: 5,
                    showSelectionBarFromValue: 0,
                    showTicks: true,
                    hidePointerLabels: true,
                    hideLimitLabels: true
                }
            },{
                name: 'I spend my time and money well',
                left: 'I don\'t even know how I spend my time and money',
                right: 'Go it!',
                value: 0,
                options: {
                    floor: -5,
                    ceil: 5,
                    showSelectionBarFromValue: 0,
                    showTicks: true,
                    hidePointerLabels: true,
                    hideLimitLabels: true
                }
            }
        ];

        this.getSliders = getSliders;
        this.getStuckSliders = getStuckSliders;

        ////////////////////////////

        function getSliders() {
            return _sliders;
        }

        function getStuckSliders() {
            return  _stuckSliders;
        }
    }
}());
(function() {
    'use strict';

    angular
        .module('app.services')
        .service('idealclientService', idealclient);

    function idealclient() {
        var _idealClientSelects = {
            gender: ['Gender', 'Male', 'Female'],
            maritalStatus: ['Marital Status', 'Single', 'Married', 'Divorced', 'Widowed'], //TODO: service select data
            kids: ['Kids\' Age', 'None', 'Young', 'Teens',' Adults'],
            
            employment: ['Employment', 'Doesn’t Work', 'Established Entrepreneur', 'Small Entrepreneur', 'Senior Employed', 'Mid Level Employed', 'Junior Employed'],

            location: ['Location', 'City', 'Suburbs', 'Rural', 'Other'],
            home: ['Home', 'Condo', 'Apartment', 'House', 'Farm', 'Other'],
            transit: ['Transit', 'Car', 'Bike', 'Train', 'Walking', 'Planes', 'Other'],
            age: ['Age','11-20','21-30','31-40','41-50','51-60','61-70','71-80','81-90'],
            hobbies: ['Hobbies', 'Volunteering',  'Working Out', 'Shopping',  'Traveling',   'Sports',  'Reading',  'Arts & Culture'],
            reads: ['Reads', 'Business Book', 'Self Help Book', 'Magazine', 'Novel', 'Blog Posts',  'Newspaper']
        }
        this.getClientSliders = getClientSliders;
        this.calcIdealClient = calcIdealClient;

        ////////////////////////////

        function getClientSliders() {
            return _idealClientSelects;
        }


        function calcIdealClient(clients){
            var scores = {};
            var idealClient = {};
            _.each(clients, function(client){
                for (var key in client){
                    if (key != 'name') {
                        if (typeof scores[key] == 'undefined') {
                            scores[key] = {};
                        }
                        
                        if (typeof scores[key][client[key]] == 'undefined') {
                            scores[key][client[key]] = 1;
                        } else {
                            scores[key][client[key]] += 1;
                        }
                    }
                }
            });
            
            for (var key in scores) {
                var maxItemKey;
                var maxValue = 0;
                for (var item in scores[key]) {
                    if (scores[key][item] > maxValue) {
                        maxItemKey = item;
                        maxValue = scores[key][item];
                    } 
                }
                
                idealClient[key] = [];
                for (var item in scores[key]) {
                    if (scores[key][item] == maxValue) {
                        idealClient[key].push(item);
                    } 
                }
            }
            return idealClient;
        }
    }
}());
(function () {
    'use strict';

    excuteItemService.$inject = ["$q", "apiService", "$rootScope"];
    angular
        .module('app.services')
        .service('excuteItemService', excuteItemService);

    /* @ngInject */
    function excuteItemService($q, apiService, $rootScope) {
        var me = this;

        // --- vars ---
        me.excuteItems = null;
        me.defaultActionsBeforeStart     = [
            'Input all active Sales Opportunities for each of your revenue streams',
            'Go through all Action Items for Q1 and add any relevant notes and adjust Due Dates',
            'Do your daily Pause & Reflect to ground yourself and get ready for the year ahead!'
        ];

        me.emptySalesItem = {
            type: 'sales',
            title: '',
            notes: '',
            dueDate: moment().format($rootScope.dateFormat),
            progress: 0,
            saleUnit: 0
        };

        me.reflextionData = {
            'week': [
            
                {
                    id: 1,
                    emotion: 'Motivated & Energized',
                    description1: 'We’re thrilled to hear you are feeling motivated and energized! How great! Let’s capture what’s helping you feel so effective! Spend 5 minutes reflecting on the past week.',
                    description2: 'Narrowing our focus helps us work more effectively and feel more successful.  And who doesn’t want to feel successful! Let it be habit-forming! Do more of what works and less of whatever doesn’t. You’ll work smarter and smarter every week, and your actions will create the results you want.',
                    description3: 'Now, spend 5 minutes in action! Do one of these activities RIGHT NOW so that next week will be even better!',
                    icon: '😫',
                    qas: [
                        {
                            question: 'What worked well last week? What can you do more of? ',
                            answer: ''
                        },
                        {
                            question: 'Is there anything you should do less of next week? ',
                            answer: ''
                        },
                        {
                            question: 'What can you do next week to build on this week’s successes? ',
                            answer: ''
                        }
                    ],
                    actions:[
                        {
                            title: 'Keep making decisions in alignment with your SLAPstatement - audit your calendar for next week now so you continue the momentum',
                            added: false
                        },
                        {
                            title: 'Post your Post It Note in a few extra places!',
                            added: false
                        },
                        {
                            title: 'Watch Living SLAP Day to Day for renewed inspiration',
                            added: false
                        }
                    ]
                    
                },
                {
                    id: 2,
                    emotion: 'Detemined & Focused',
                    description1: 'We’re thrilled to hear you are feeling determined and focused!  How great!  Spend 5 minutes figuring out what worked so well last week.',
                    description2: 'What in particular worked so well well last week?',
                    description3: 'Now, spend 5 minutes in action! Do one of these activities RIGHT NOW so that next week will be just as good!',
                    icon: '😫',
                    qas: [
                        {
                            question: 'What in particular worked so well well last week?',
                            answer: ''
                        },
                        {
                            question: 'What can you do more of?  Is there anything you should do less of next week?',
                            answer: ''
                        },
                        {
                            question: 'What can you do next week to build on this week’s successes?',
                            answer: ''
                        }
                    ],
                    actions:[
                        {
                            title: 'Keep making decisions in alignment with your SLAPstatement by auditing your calendar for next week now so you continue the momentum.',
                            added: false
                        },
                        {
                            title: 'Post your Post It Note in a few extra places! Learn how here!',
                            added: false
                        },
                        {
                            title: 'Watch Living SLAP Day to Day (click here) for renewed inspiration',
                            added: false
                        }
                    ]
                    
                },
                {
                    id: 3,
                    emotion: 'Hopeful On Track',
                    description1: 'We’re thrilled to hear you’re feeling hopeful and on track! How great!  Let’s figure out what exactly what went well so you can make it happen again!  Spend 5 minutes here.',
                    description2: 'Success builds on itself and becomes a habit. Reinforce what’s working by doing more of it, and do less of what isn’t. Practice living in alignment with your SLAPstatement. It’s great that you are feeling hopeful and on track. Let’s build on that!',
                    description3: 'Spend 5 minutes in action so next week will be even better! Do one of these activities RIGHT NOW!',
                    icon: '😫',
                    qas: [
                        {
                            question: 'What did you do this week that helped you feel that way? What should you do more of to keep the momentum?',
                            answer: ''
                        },
                        {
                            question: 'Were you more focused? ',
                            answer: ''
                        },
                        {
                            question: 'Did you manage your calendar better?  How did you protect yourself from distraction?',
                            answer: ''
                        }
                    ],
                    actions:[
                        {
                            title: 'Keep making decisions in alignment with your SLAPstatement - audit your calendar for next week now so you continue the momentum',
                            added: false
                        },
                        {
                            title: 'Post your Post It Note in a few extra places!',
                            added: false
                        },
                        {
                            title: 'Watch Living SLAP Day to Day (click here) for renewed inspiration',
                            added: false
                        }
                    ]
                    
                },
                {
                    id: 4,
                    emotion: 'Distracted & Unfocused',
                    description1: 'We’re sorry you felt distracted and unfocused this week!  Take 5 minutes to answer these reflection questions to get re-focused for next week.',
                    description2: 'You are not alone!  All business owners feel unfocused at some point (or maybe many points!)  The surprising thing about distraction is how it eats time – first there’s the time you spend thinking and worrying about the problem, and then there’s the time you spend on the side project, and then there’s the overall slowdown, the sluggishness that creeps into all your activities and makes you less productive. \n The best thing you can do is remove the source of distraction as quickly as possible.  You’ll be amazed at how quickly your focus and “full strength” productivity, even your joy in your work, will return once that distraction is removed. ',
                    description3: 'Now, spend 5 minutes in action! The best way to combat distraction is to get back in action. Do one of these activities RIGHT NOW so that next week will be better.',
                    icon: '😫',
                    qas: [
                        {
                            question: 'Why are you feeling distracted? Is it something happening in your personal life? a side project is eating up your mental energy? Do you have too many competing priorities?  Have you lost focus on your Ideal Client?',
                            answer: ''
                        },
                        {
                            question: 'How much time do you think was wasted/lost due to distraction last week?',
                            answer: ''
                        },
                        {
                            question: 'How many Action Items did you have for this month? How many of those did you complete? What got in the way of completing the rest of them?  Were they poorly written? Too big to tackle? Did you not know exactly how to do them?',
                            answer: ''
                        }
                    ],
                    actions:[
                        {
                            title: 'Remove the source of distraction as quickly as possible, hopefully this week!  Go to ACT and enter a new Action Item called Remove Distraction. Then make a plan to do exactly that.',
                            added: false
                        },
                        {
                            title: 'If you can’t remove the source of distraction, you need to work around it.  Commit to completing three specific action items next week that will move your business forward. Go to ACT and identify the three best actions you can take to make progress toward your quarterly goal.',
                            added: false
                        },
                        {
                            title: 'Free choice – What else can you do to next month more successful? Add it to your Action Items for this month.',
                            added: false
                        }
                    ]
                    
                },
                {
                    id: 5,
                    emotion: 'Anxious & Worried About Money',
                    description1: 'We’re sorry your feeling anxious and worried about money. Worrying can paralyze us from taking the right actions. Spend 5 minutes reflecting on your past week to see if we can alleviate some of that.',
                    description2: 'Worrying can paralyze us from taking the right actions. And feeling isolated with our worries makes it worse. Find someone to talk to who always encourages you. Call us!',
                    description3: 'Now, spend 30 minutes in action! Let’s reduce your worries about money by working on generating some! Do at least one of these activities RIGHT NOW so that next week will be better.',
                    icon: '😫',
                    qas: [
                        {
                            question: 'Are you feeling worried about money because revenues aren’t coming in? Are you feeling worried about money because expenses are creeping up? ',
                            answer: ''
                        },
                        {
                            question: 'Are you feeling worried because your Connecting Strategy doesn’t seem to be working? Because you haven’t started your quarterly Connecting Strategy? Because you hate your Connecting Strategy or don’t know how to do some of it? ',
                            answer: ''
                        },
                        {
                            question: 'Are you feeling worried because time is passing too quickly and you aren’t getting enough done?',
                            answer: ''
                        }
                    ],
                    actions:[
                        {
                            title: 'Commit to cutting your expenses by 10% by the end of the month.  It will feel great to make a start. Enter the appointment with yourself right now, so you can make it happen.      ',
                            added: false
                        },
                        {
                            title: 'Take 3 things out of your calendar for next week, and use those time slots to do things that will generate revenue.    ',
                            added: false
                        },
                        {
                            title: 'Create your own Action Item that moves you forward!',
                            added: false
                        }
                    ]
                    
                },
                {
                    id: 6,
                    emotion: 'Tired & Burned Out',
                    description1: 'We’re sorry you felt burnt out. Let’s see if we can re-fuel you for next week. Spend 5 minutes reflecting on last week.',
                    description2: 'If our business is burning us out, we need to find a way to get back to the passion we originally had for our business. When we’re exhausted, nothing feels fun or worthwhile. AND we can’t be efficient or effective.',
                    description3: 'Spend 5 minutes in action so next week will be better. Do one of these activities RIGHT NOW!',
                    icon: '😫',
                    qas: [
                        {
                            question: 'Are you feeling tired and burnt out because your work isn’t producing good results?  Because of something outside of work?  Because your work isn’t fun anymore?',
                            answer: ''
                        },
                        {
                            question: 'How long have you been feeling this way?  What was the trigger?',
                            answer: ''
                        },
                        {
                            question: 'Is there anything you can do to improve the situation?',
                            answer: ''
                        }
                    ],
                    actions:[
                        {
                            title: 'Take the weekend off to recharge your batteries. Don’t think about work. Don’t talk about work. Do something relaxing and fun and with friends who love you and make you laugh!',
                            added: false
                        },
                        {
                            title: 'Take 3 non-urgent things out of your calendar for next week, and use those times to take a walk around the block or call a friend, or brainstorm creatively.',
                            added: false
                        },
                        {
                            title: 'Commit to one change that will help you feel healthier – find 30 minutes per day for exercise or meditation; replace one unhealthy snack with a healthier option; or go to sleep half an hour earlier every night next week.',
                            added: false
                        }
                    ]
                    
                },
                {
                    id: 7,
                    emotion: 'Too Busy & Overwhelmed',
                    description1: 'We’re sorry you felt too busy and overwhelmed! Take 5 minutes to answer these reflection questions to get re-focused for next week.',
                    description2: 'When we feel too busy is usually when we need the structure of SLAP even more than usual. Practice SLAPmethodology every day. Whenever someone asks you for a minute of your time or a dollar of your money, ask yourself whether you will have an opportunity to discuss your “what”?  Will you be in front of your Ideal Client?  Is it in alignment with the scale of your business?  And, will it get you closer to your One Year Goal?',
                    description3: 'Now, spend 5 minutes doing one of these activities RIGHT NOW so that next week will be better.',
                    icon: '😫',
                    qas: [
                        {
                            question: 'What kept you so busy last week?  Business or personal?  Were your efforts productive or unproductive? ',
                            answer: ''
                        },
                        {
                            question: 'Did you stay truly in alignment with your SLAP or did you do things you “hoped might lead you to someone who might know someone who could be your Ideal Client?”',
                            answer: ''
                        },
                        {
                            question: 'What would have made last week more successful? What didn’t happen because you were so busy?',
                            answer: ''
                        }
                    ],
                    actions:[
                        {
                            title: 'Take 3 things out of your calendar for next week, that won’t lead directly to sales. You can do it!  If you find more than 3, even better. Say NO more than YES next week.',
                            added: false
                        },
                        {
                            title: 'Watch “Living SLAP Day to Day” to get back into the SLAPmindset and remind yourself how scarce time and money are, how to make the best use of both. Click here to go directly to the video.',
                            added: false
                        },
                        {
                            title: 'Edit your Action Items so that every action item is crystal clear to you – you know how to do it, it is broken down into its bite-size components, it is well described, and can be accomplished in 15 or 20 minutes.',
                            added: false
                        }
                    ]
                
                }
            ],
            month: [
            
                {
                    id: 1,
                    emotion: 'Motivated & Energized',
                    description1: 'We’re thrilled to hear you are feeling motivated and energized!  How great! Spend 25 minutes thinking back over the last month with these questions.',
                    description2: 'Narrowing our focus helps us work more effectively and feel more successful.  And who doesn’t want to feel successful! Let it be habit-forming! Do more of what works and less of whatever doesn’t. You’ll work smarter and smarter every week, and your actions will create the results you want.',
                    description3: 'Now, spend 30 minutes in action! It’s great that you are so motivated and you’ve had a successful month. Set yourself up for another successful month next month by doing one of these activities right now!',
                    icon: '😫',
                    qas: [
                        {
                            question: 'What worked well last month?',
                            answer: ''
                        },
                        {
                            question: 'What can you do more of?  Is there anything you should do less of next month? What can you do next month to build on this month’s successes?',
                            answer: ''
                        },
                        {
                            question: 'What did you learn last month about yourself? About your Ideal Client? About your sales process? About this Connecting Strategy?',
                            answer: ''
                        }
                    ],
                    actions:[
                        {
                            title: 'Break your Action Items into smaller pieces. It’s so much easier to get things done when they are clearly described, and “bite sized”. Add enough detail to your to-do list so that you can easily look at it and say, I can do that right now!',
                            added: false
                        },
                        {
                            title: 'Set a measurable benchmark for next month to stay on track. How will you know that this month is moving your closer to your quarterly goal?  What’s the key activity that must happen to set you up to reach your sales goal?',
                            added: false
                        },
                        {
                            title: 'Set a measurable benchmark for next month to stay on track. How will you know that this month is moving your closer to your quarterly goal?  What’s the key activity that must happen to set you up to reach your sales goal?  ',
                            added: false
                        },
                        {
                            title: 'If there is anything about your Connecting Strategy that you don’t know how to do, check out the resources in Learn, or ask Pat for help. ',
                            added: false
                        }
                    ]
                    
                },
                {
                    id: 2,
                    emotion: 'Detemined & Focused',
                    description1: 'We’re thrilled to hear you are feeling determined and focused!  How great!  Spend 25 minutes thinking back over the past month and answering these questions: ',
                    description2: 'Narrowing our focus helps us work more effectively and feel more successful. And who doesn’t want to feel successful! Let it be habit-forming! Do more of what works and less of whatever doesn’t, so that you are working smarter and smarter every week and your actions will create the results you want.',
                    description3: 'Now, spend 30 minutes in action right now! It’s great that you are so motivated and you’ve had a successful month.  Set yourself up for another successful month next month by doing one of these activities right now!      ',
                    icon: '😫',
                    qas: [
                        {
                            question: 'What in particular worked well last month?',
                            answer: ''
                        },
                        {
                            question: 'What can you do more of?  Is there anything you should do less of next month? What can you do next month to build on this month’s successes?',
                            answer: ''
                        },
                        {
                            question: 'What did you learn last month about yourself?  About your Ideal Client?  About your sales process?  About this Connecting Strategy?',
                            answer: ''
                        }
                    ],
                    actions:[
                        {
                            title: 'Break your Action Items into smaller pieces.  It’s so much easier to get things done when they are clearly described, and “bite sized”.  Add enough detail to your to-do list so that you can easily look at it and say, I can do that right now!  You’ll make more progress if your action items are precise and focused enough that you can get them done in 15 minutes to an hour',
                            added: false
                        },
                        {
                            title: 'Set a measurable benchmark for next month to stay on track.  How will you know that this month is moving your closer to your quarterly goal?  What’s the key activity that must happen to set you up to reach your sales goal?',
                            added: false
                        },
                        {
                            title: 'If there is anything about your Connecting Strategy that you don’t know how to do, check out the resources in Learn, or ask Pat for help.',
                            added: false
                        }
                    ]
                    
                },
                {
                    id: 3,
                    emotion: 'Hopeful On Track',
                    description1: 'We’re so glad to hear you are feeling hopeful and on track. Let’s figure out what exactly what went well so you can make it happen again!  Spend 25 minutes here. Be sure to reflect on the whole month, not just the past week or so!',
                    description2: 'Success builds on itself and becomes a habit. Reinforce what’s working by doing more of it, and do less of what isn’t. Practice living in alignment with your SLAPstatement. It’s great that you are feeling hopeful and on track. Let’s build on that!',
                    description3: 'Spend 30 minutes in action so next month will be even better! Set yourself up for another successful month next month by doing at least one of these activities right now!   ',
                    icon: '😫',
                    qas: [
                        {
                            question: 'What did you do this month that helped you feel that way? What should you do more of to keep the momentum?',
                            answer: ''
                        },
                        {
                            question: 'How did you keep yourself moving forward this month?  Were you more focused?  Did you manage your calendar better?  How did you protect yourself from distraction?',
                            answer: ''
                        },
                        {
                            question: 'What was the highlight of last month?  What was your major learning?',
                            answer: ''
                        }
                    ],
                    actions:[
                        {
                            title: 'Break your Action Items into smaller pieces.  It’s so much easier to get things done when they are clearly described, and “bite sized”.  Add enough detail to your to-do list so that you can easily look at it and say, I can do that right now!   ',
                            added: false
                        },
                        {
                            title: 'Set a measurable benchmark for next month to stay on track.  How will you know that this month is moving your closer to your quarterly goal?  What’s the key activity that must happen to set you up to reach your sales goal?',
                            added: false
                        },
                        {
                            title: 'Watch Living SLAP Day to Day',
                            added: false
                        }
                    ]
                    
                },
                {
                    id: 4,
                    emotion: 'Distracted & Unfocused',
                    description1: 'We’re sorry to that you’re feeling distracted and unfocused. Spend 25 minutes getting back on track by answering these questions. Be sure to think back over the whole month, not just the past week',
                    description2: 'You are not alone!  All business owners experience this at some point (or maybe many points!) The surprising thing about distraction is how it eats time – first there’s the time you spend thinking and worrying about the problem, and then there’s the time you spend on the side project, and then there’s the overall slowdown, the sluggishness that creeps into all your activities and makes you less productive. \nThe best thing you can do is remove the source of distraction as quickly as possible. You’ll be amazed at how quickly your focus and “full strength” productivity, even your joy in your work, will return once that distraction is removed. The thing about spending a whole month distracted is how it shortens your quarter and can hurt your chances of reaching your quarterly goal. Let’s figure out how to get you back on track so next month is productive, and maybe can make up for this month.',
                    description3: 'Now, spend 30 minutes in action! The best medicine to combat distraction is to get back in action. Do at least three of these activities RIGHT NOW so that next month will be better.',
                    icon: '😫',
                    qas: [
                        {
                            question: 'Why are you feeling distracted?  Is it something happening in your personal life? a side project is eating up your mental energy? Do you have too many competing priorities?  Have you lost focus on your Ideal Client?',
                            answer: ''
                        },
                        {
                            question: 'How much time do you think was wasted/lost due to distraction in the last month?',
                            answer: ''
                        },
                        {
                            question: 'How many Action Items did you have for this month? How many of those did you complete? What got in the way of completing the rest of them?  Were they poorly written? Too big to tackle?  Did you not know exactly how to do them?',
                            answer: ''
                        },
                        {
                            question: 'What was your biggest learning this month?',
                            answer: ''
                        }
                    ],
                    actions:[
                        {
                            title: 'Remove the source of distraction as quickly as possible, hopefully this week!  Go to ACT and enter a new Action Item called Remove Distraction. Then make a plan to do exactly that.',
                            added: false
                        },
                        {
                            title: 'Set a monthly benchmark for next month. What absolutely must happen if you are to reach your quarterly goal?',
                            added: false
                        },
                        {
                            title: 'Improve your action items.  Go into ACT, roll forward any action items from last month that you didn’t complete. Then edit the list so that every action item is crystal clear to you – you know how to do it, it is broken down into its bite-size components, it is well described, and can be accomplished in one hour or less.',
                            added: false
                        },
                        {
                            title: 'If removing the source of distraction is out of your control, work around it by regaining a sense of progress. Commit to completing three specific action items next week to move your business forward. Go to ACT and identify the three best actions you can take toward achieving your quarterly goal.',
                            added: false
                        }
                    ]
                    
                },
                {
                    id: 5,
                    emotion: 'Anxious & Worried About Money',
                    description1: 'So, you’re feeling anxious and worried about money. Let’s see if we can alleviate some of that!  Spend 25 minutes thinking back over the past month and answering these questions. (Be sure think back over the whole month, not just the past week!)',
                    description2: 'Worrying can paralyze us from taking the right actions. And if we don’t reach our financial goals, that can make us even more worried. The cash flow-capacity catch22 can feel even worse than usual when we are worried. On the flip side, reaching our goals is the best medicine for combating worry – success is the best revenge! Can you use your worry to fuel productive action?',
                    description3: 'Now, spend 30 minutes in action! Let’s reduce your worries about money by working on generating some!  Do at least one of these activities RIGHT NOW so that next month will be better.',
                    icon: '😫',
                    qas: [
                        {
                            question: 'Are you feeling worried about money because revenues aren’t coming in? Are you feeling worried about money because expenses are creeping up?',
                            answer: ''
                        },
                        {
                            question: 'Are you feeling worried because your Connecting Strategy doesn’t seem to be working? Are you feeling worried because time is passing too quickly and you aren’t getting enough done?',
                            answer: ''
                        },
                        {
                            question: 'How did worrying affect your productivity this month? ',
                            answer: ''
                        }
                    ],
                    actions:[
                        {
                            title: 'Get closer to sales by reviewing your Action Items: commit to doing at least 3 things that will lead directly to sales. Be sure to break your Action Items into bite-sized, achievable tasks so you can actually get them done during your busy days.',
                            added: false
                        },
                        {
                            title: 'Get closer to your Ideal Client: Book yourself a one-hour appointment to brainstorm at least 20 new ideas of ways you can meet your Ideal Client, all the places s/he hangs out. Then, choose 3 to implement next month and put those right in your Action Items.',
                            added: false
                        },
                        {
                            title: 'Spend less money: find 3 ways you can spend less money next week.  Bring your lunch to work. Walk instead of taking a taxi.  Make your own coffee or tea instead of going to Starbucks. Invite clients to your office rather than meeting at a restaurant.',
                            added: false
                        }
                    ]
                    
                },
                {
                    id: 6,
                    emotion: 'Tired & Burned Out',
                    description1: 'We’re sorry you felt burnt out. Let’s see if we can give you some fuel for next month. Spend 25 minutes thinking back over the last month with these reflection questions. ',
                    description2: 'You may be parenting your business for the wrong phase. When our businesses are “babies”, they need our attention every minute. They cannot do anything on their own and we have to make every single decision. But as our businesses grow, they need to develop some independence from us. If we continue to treat them as babies, as miniature extensions of ourselves, they can’t thrive. Maybe you are involved in too many decisions?  Maybe you  are micromanaging? Maybe you are overly focused on elements of the business that should run smoothly by now? Or maybe your business is in a crisis, a crunch time of some sort, an important growth challenge, and your otherwise “grown up” business requires your significant attention right now but you haven’t noticed? Sometimes we have to be more hands-on “parents”, just for a short time. What’s happening in your business right now?',
                    description3: 'Spend 30 minutes in action so next month will be better. Do at least one of these activities RIGHT NOW!',
                    icon: '😫',
                    qas: [
                        {
                            question: 'Are you feeling tired and burnt out because your work isn’t producing good results? Has your business moved into a new phase but you haven’t changed the way you think about it, treat it? Are you feeling tired and burnt out because your work isn’t fun anymore?',
                            answer: ''
                        },
                        {
                            question: 'Are you feeling tired and burnt out because of something outside of work?',
                            answer: ''
                        },
                        {
                            question: 'How long have you been feeling this way?  What was the trigger? Is there anything you can do to improve the situation?',
                            answer: ''
                        }
                    ],
                    actions:[
                        {
                            title: 'Make a list of everything your business “needs” right now. Which things are you not providing to your business?  What things are you doing that are not right for this phase, that you can stop doing?',
                            added: false
                        },
                        {
                            title: 'If burn out is sapping your energy and enjoyment of your work, you may be saying YES when you should be saying NO. Do a calendar audit and see what you can take out of your schedule for next month.',
                            added: false
                        },
                        {
                            title: 'If you’ve lost the sense that your work is meaningful, spend some time reminding yourself why you started the business originally. What impact did you hope to have?  Who did you hope to help?  Have you gotten away from your original mission?  Spend an hour figuring out how to recapture that sense of mission.',
                            added: false
                        },
                        {
                            title: 'Commit to 3 specific changes that will improve your situation: make one change related to your health; make one change to create more connection with friends and family; and make one change to improve your time management at work.   ',
                            added: false
                        }
                    ]
                    
                },
                {
                    id: 7,
                    emotion: 'Too Busy & Overwhelmed',
                    description1: 'So, you are feeling too busy and overwhelmed. Spend 25 minutes thinking back over the past month and answering these questions. Be sure think back over the whole month, not just the past week!',
                    description2: 'When you feel too busy is exactly when you need the structure of SLAP the most. Growth is good, but doesn’t always feel good or go smoothly. If you didn’t reach your goal this month, don’t panic!  You can get back into action and get back on track.',
                    description3: 'Spend 30 minutes in action so next month will be better. Do at least one of these activities RIGHT NOW!',
                    icon: '😫',
                    qas: [
                        {
                            question: 'Are you too busy with work-related things or personal/ extracurricular/ volunteer activities?  Are you busy with things that are making you money or costing you money?',
                            answer: ''
                        },
                        {
                            question: 'Did you commit to projects that don’t move you closer to your One Year Goal and closer to your Ideal Client?  How much time did you actually spend on business development last month?  How much time, looking back, did you “waste”?',
                            answer: ''
                        },
                        {
                            question: 'Is being busy a way of procrastinating on things you don’t want to do, don’t know how to do, or are afraid to do? What are those things?',
                            answer: ''
                        }
                    ],
                    actions:[
                        {
                            title: 'Review your Action Items for next month and decide whether these are the best things to do, to move you quickly toward your Quarterly Goal. Edit that list until you have a powerful set of bite-sized action items and book the time into your calendar to get those things done!  ',
                            added: false
                        },
                        {
                            title: 'Set a specific benchmark for next month, something that will demonstrate that you are on track. Then, review your Action Items for next month and commit to the ones that will move you fastest toward sales. Break the action items down into their smallest “bite sized” parts so they are easy to tackle. Reach out to Pat if there is anything you don’t know how to do.',
                            added: false
                        },
                        {
                            title: 'List all the things you are too busy with. Identify the things that aren’t urgent and necessary and stop doing those. Exit gracefully from volunteer commitments you no longer have time for, if you are committed to reaching your financial goal. Then identify the things someone else can do for you, and make a plan to outsource or delegate those. With what’s left, figure out which things must be done during business hours, which can be done after hours, and create blocks of uninterrupted time to be more productive. ',
                            added: false
                        }
                    ]
                
                }
            ],
            quater:[
            
                {
                    id: 1,
                    emotion: 'Motivated & Energized',
                    description1: 'Congratulations!  Feeling motivated and energized at the end of a quarter is a fantastic! That is really exciting and sets you up for success next quarter too!  (But don’t coast.)  Spend 25 minutes thinking back over the whole quarter with these questions. Don’t forget to think all the way back to the start of the quarter, not just the past week or month!',
                    description2: 'Narrowing our focus helps us work more effectively and feel more successful.  And who doesn’t want to feel successful! Let it be habit-forming! Do more of what works and less of whatever doesn’t. You’ll work smarter and smarter every week, and your actions will create the results you want.',
                    description3: 'Now, spend 30 minutes in action! It’s great that you are so determined and that you’ve had a successful quarter. Set yourself up for another great quarter by doing at least one of these activities RIGHT NOW!',
                    icon: '😫',
                    qas: [
                        {
                            question: 'What did you do this quarter that helped you feel that way? How did you keep yourself moving forward this month?  Were you more focused?  Did you manage your calendar better?  How did you protect yourself from distraction?',
                            answer: ''
                        },
                        {
                            question: 'What was the highlight of the quarter?  What was your major learning?',
                            answer: ''
                        },
                        {
                            question: 'What really worked for you this quarter?  Did you work well?  Did the Connecting Strategy work well?  Both?  Would you use this Connecting Strategy again? Why or why not?  What would you do to improve the implementation?  Was this the best time of year for this strategy?',
                            answer: ''
                        }
                    ],
                    actions:[
                        {
                            title: 'Reward yourself to keep your motivation high for next quarter! What special treat can you give yourself as a pat on the back?',
                            added: false
                        },
                        {
                            title: 'Summarize what worked best last quarter and ideas for using that strategy again next SLAP year ',
                            added: false
                        },
                        {
                            title: 'Get started on next quarter by reviewing all the info for your next strategy in Learn!  ',
                            added: false
                        },
                        {
                            title: 'Make your new Post It Note.',
                            added: false
                        }
                    ]
                    
                },
                {
                    id: 2,
                    emotion: 'Detemined & Focused',
                    description1: 'Congratulations! Feeling determined and focused at the end of a quarter is a great accomplishment!  We’re so proud of you! Spend 25 minutes thinking back over the whole quarter and answering these questions. Don’t forget to think all the way back to the start of the quarter, not just the past week or month!',
                    description2: 'Narrowing our focus helps us work more effectively and feel more successful. And who doesn’t want to feel successful! Let it be habit-forming! Do more of what works and less of whatever doesn’t. You’ll work smarter and smarter every week, and your actions will create the results you want.',
                    description3: 'Now, spend 30 minutes in action! It’s great that you are so motivated and you’ve had a successful quarter.  Set yourself up for another successful quarter by doing one of these activities RIGHT NOW!  ',
                    icon: '😫',
                    qas: [
                        {
                            question: 'What did you do this quarter that helped you feel that way? How did you keep yourself moving forward this month?  Were you more focused?  Did you manage your calendar better?  How did you protect yourself from distraction?',
                            answer: ''
                        },
                        {
                            question: 'What was the highlight of the quarter?  What was your major learning?',
                            answer: ''
                        },
                        {
                            question: 'What really worked for you this quarter?  Did you work well?  Did the Connecting Strategy work well?  Both?  Would you use this Connecting Strategy again? Why or why not?  What would you do to improve the implementation?  Was this the best time of year for this strategy?',
                            answer: ''
                        }
                    ],
                    actions:[
                        {
                            title: 'Reward yourself to keep your motivation high for next quarter! What special treat can you give yourself as a pat on the back?  ',
                            added: false
                        },
                        {
                            title: 'Get started on next quarter by reviewing all the info for your next strategy in Learn! ',
                            added: false
                        },
                        {
                            title: 'Make your new Post It Note.    ',
                            added: false
                        }
                    ]
                    
                },
                {
                    id: 3,
                    emotion: 'Hopeful On Track',
                    description1: 'Congratulations!  Feeling hopeful and on track at the end of a quarter is a great accomplishment!  We’re so proud of you! Spend 25 minutes answering these questions, thinking back over the whole quarter. Be sure the reflect on the entire quarter, not just the past week or month.',
                    description2: 'Success builds on itself and becomes a habit. Reinforce what’s working by doing more of it, and do less of what isn’t. Practice living in alignment with your SLAPstatement. It’s great that you are feeling hopeful and on track. Let’s build on that!',
                    description3: 'Now, spend 30 minutes in action! Do at least one of these activities RIGHT NOW so that next quarter will be even better.',
                    icon: '😫',
                    qas: [
                        {
                            question: 'What did you do this quarter that helped you feel that way? How did you keep yourself moving forward this month?  Were you more focused?  Did you manage your calendar better?  How did you protect yourself from distraction?',
                            answer: ''
                        },
                        {
                            question: 'What was the highlight of the quarter?  What was your major learning?',
                            answer: ''
                        },
                        {
                            question: 'What really worked for you this quarter?  Did you work well?  Did the Connecting Strategy work well?  Both?  Would you use this Connecting Strategy again? Why or why not?  What would you do to improve the implementation?  Was this the best time of year for this strategy?',
                            answer: ''
                        },
                        {
                            question: 'Did you reach your financial goal?  Why or why not?',
                            answer: ''
                        }
                    ],
                    actions:[
                        {
                            title: 'Reward yourself to keep your motivation high for next quarter! What’s one thing you can do for yourself as a “pat on the back” for all your hard work?',
                            added: false
                        },
                        {
                            title: 'Get started on next quarter by reviewing all the info for your next strategy in Learn!  Make your new Post It Note.   ',
                            added: false
                        },
                        {
                            title: 'Stay connected to othe SLAPsters! Sign up for a SLAPschool event!',
                            added: false
                        }
                    ]
                    
                },
                {
                    id: 4,
                    emotion: 'Distracted & Unfocused',
                    description1: 'We’re sorry to that you’re feeling distracted and unfocused. Spend 25 minutes getting back on track by answering these questions. Be sure to think back over the whole month, not just the past week.',
                    description2: 'You are not alone!  All business owners experience this at some point (or maybe many points!)  The surprising thing about distraction is how it eats time – first there’s the time you spend thinking and worrying about the problem, and then there’s the time you spend on the side project, and then there’s the overall slowdown, the sluggishness that creeps into all your activities and makes you less productive. \nThe best thing you can do is remove the source of distraction as quickly as possible.  You’ll be amazed at how quickly your focus and “full strength” productivity, even your joy in your work, will return once that distraction is removed.  If you didn’t reach your goal this quarter, don’t panic!  You can get back into action and get back on track.',
                    description3: 'Now, spend 30 minutes in action! The best medicine to combat distraction is to get back in action.  Do at least three of these activities RIGHT NOW so that next quarter will be better.',
                    icon: '😫',
                    qas: [
                        {
                            question: 'What is the source of the distraction? Is it something happening in your personal life? A side project is eating up your mental energy? Do you you have too many competing priorities? Have you have lost focus on your Ideal Client? What is it?',
                            answer: ''
                        },
                        {
                            question: 'How much time do you think was wasted/lost due to distraction this quarter?',
                            answer: ''
                        },
                        {
                            question: 'Thinking about your Connection Strategy – how successfully did you implement it?  Did you actually use the strategy?  Did you do it well?  Was this the right time of year to do it?  Should you use it again in the future?  How would you do it differently?',
                            answer: ''
                        },
                        {
                            question: 'Did you reach your quarterly goal?  Why or why not?',
                            answer: ''
                        }
                    ],
                    actions:[
                        {
                            title: 'Remove the source of distraction as quickly as possible, hopefully this week!  Go to ACT and enter a new Action Item for the new month called Remove Distraction.  Then make a plan to do exactly that.',
                            added: false
                        },
                        {
                            title: 'Update your dashboards.  See how much progress you actually made.  Enter your sales for the past quarter and check off your completed action items.',
                            added: false
                        },
                        {
                            title: 'If you didn’t hit your financial goal last quarter, you need to make up those sales somehow.  Commit to how many of those units you can add to your quarterly goal for the upcoming quarter.  Make your Post It Note for the new quarter.',
                            added: false
                        },
                        {
                            title: 'If removing the source of distraction is out of your control, work around it by regaining a sense of progress.  Commit to completing three specific action items next week, to will move your business forward.  Go to ACT and identify the three best actions you can take toward achieving your quarterly goal.',
                            added: false
                        }
                    ]
                    
                },
                {
                    id: 5,
                    emotion: 'Anxious & Worried About Money',
                    description1: 'We’re so sorry to hear you are feeling anxious and worried about money. Let’s see if we can alleviate some of that. Spend 25 minutes answering these questions. Don’t forget to think all the way back to the start of the quarter, not just the past week or month!',
                    description2: 'Worrying can paralyze us from taking the right actions. And if we don’t reach our financial goals, that can make us even more worried. The cash flow-capacity catch22 can feel even worse than usual when we are worried. On the flip side, reaching our goals is the best medicine for combating worry – success is the best revenge! Can you use your worry to fuel productive action? ',
                    description3: 'Now, spend 30 minutes in action! Let’s reduce your worries about money by working on generating some! Do at least one of these activities RIGHT NOW so that next quarter will be better.',
                    icon: '😫',
                    qas: [  
                        {
                            question: 'What is worrying you and when did it start? What have you tried so far, in terms of improving the situation? What other ideas do you have for reducing your worry? ',
                            answer: ''
                        },
                        {
                            question: 'In thinking about your business and your SLAP, how did you do this quarter?  Did you reach your financial goal?  Did you not work or did this Connecting Strategy not work? ',
                            answer: ''
                        },
                        {
                            question: 'Did you complete a large percentage or only a few of your Action Items?  Did you not have time? Not have the energy? Not know what to do or how to do it? What else got in the way this quarter?',
                            answer: ''
                        }
                    ],
                    actions:[
                        {
                            title: 'Commit to cutting your expenses by 10% by the end of next month. It will feel great to make a start. Create a calendar appointment with yourself for next week, to review your overall expenses and make a plan to reducing them. Consider fixed overhead expenses and also variable expenses. Can you renegotiate with vendors?',
                            added: false
                        },
                        {
                            title: 'Expenses don’t hurt as much when higher revenues are coming in. Can you raise prices or reduce discounts on any of your products/services? Even a small increase multiplied by many clients paying it, can make a big difference to your bank account.',
                            added: false
                        },
                        {
                            title: 'Spend 3 hours brainstorming all the ways you can meet your Ideal Client -- all the places s/he hangs out. Make a list of at least 20 new ideas and prioritize 3 that can most quickly lead to revenues.',
                            added: false
                        }
                    ]
                    
                },
                {
                    id: 6,
                    emotion: 'Tired & Burned Out',
                    description1: 'We’re so sorry to hear you are feeling exhausted and burned out. Let’s see if we can shift that for next quarter. Spend 25 minutes answering these questions. Don’t forget to think all the way back to the start of the quarter, not just the past week or month!',
                    description2: 'Burn out is the feeling that your work isn’t fun anymore, that your efforts aren’t paying off, and that you can’t continue working this hard for too much longer. Something’s got to give! Reconnect to the passion in your business; what impact do you want to have. Why do you care? What are you willing to sacrifice/invest to reach your ultimate goal? \n You may be parenting your business for the wrong phase. When our businesses are “babies”, they need our attention every minute. They cannot do anything on their own and we have to make every single decision. But as our businesses grow, they need to develop some independence from us. If we continue to treat them as babies, as miniature extensions of ourselves, they can’t thrive. Maybe you are involved in too many decisions? Maybe you are micromanaging?  Maybe you are overly focused on elements of the business that should run smoothly by now?  Or maybe your business is in a crisis, a crunch time of some sort, an important growth challenge, and your otherwise “grown up” business requires your significant attention right now but you haven’t noticed?  Sometimes we have to be more hands-on “parents”, just for a short time. What’s happening in your business right now?',
                    description3: 'Spend 30 minutes in action re-igniting your passion and spark for your business. Do at least one of these activities RIGHT NOW!',
                    icon: '😫',
                    qas: [
                        {
                            question: 'When did that start?  Is it a build-up of working too hard or did something specific change about your business that led to this feeling?',
                            answer: ''
                        },
                        {
                            question: 'You’ve been working really hard, is that work producing results?  Can you see any way out, any way to work less, work smarter, delegate more? ',
                            answer: ''
                        },
                        {
                            question: 'Did you reach your financial goal this quarter?  Why or why not?',
                            answer: ''
                        },
                        {
                            question: 'Did your Connection Strategy for this quarter work well for you?  Did you work well this quarter? Did your Ideal Client respond well?  What would you differently if you had it to do over again?',
                            answer: ''
                        }
                    ],
                    actions:[
                        {
                            title: 'Spend a half hour writing about your initial passion for your business. When you first started it, what impact did you want to have? Why do you care? What are you willing to sacrifice/invest to reach your ultimate goal?',
                            added: false
                        },
                        {
                            title: 'Ask 5 friends to meet you for lunch or drinks so you can vent and receive affirmation. ',
                            added: false
                        },
                        {
                            title: 'Connect with your 5 best clients, current and former, and find out what they love about working with you. Print out their responses and hang them where you can see them every day.',
                            added: false
                        }
                    ]
                    
                },
                {
                    id: 7,
                    emotion: 'Too Busy & Overwhelmed',
                    description1: 'We’re so sorry to hear you are feeling too busy and overwhelmed!  Spend 25 minutes answering these questions. Don’t forget to think all the way back to the start of the quarter, not just the past week or month!',
                    description2: 'Not all busy is good. Are you busy with the right things?  Are you busy with growth but it doesn’t feel as exciting and great as you expected growth to feel?  When we feel too busy is usually when we need the structure of SLAP even more than usual. Practice SLAP methodology every day. Whenever someone asks you for a minute of your time or a dollar of your money, ask yourself whether you will have an opportunity to discuss your “what”?  Will you be in front of your Ideal Client?  Is it in alignment with the scale of your business?  And, will it get you closer to your One Year Goal? ',
                    description3: 'Spend 30 minutes in action so next month will be better! Do at least one of these activities RIGHT NOW! ',
                    icon: '😫',
                    qas: [
                        {
                            question: 'When did you start to feel too busy and overwhelmed?  Did something specific change about your business that made you so much busier?',
                            answer: ''
                        },
                        {
                            question: 'Is all your hard work producing results?  Can you see any way out, any way to work less, work smarter, delegate more? ',
                            answer: ''
                        },
                        {
                            question: 'Did your Connection Strategy for this quarter work well for you?  Did you work well this quarter? Did your Ideal Client respond well?  What would you differently if you had it to do over again?',
                            answer: ''
                        },
                        {
                            question: 'Did you reach your financial goal this quarter? Why or why not?',
                            answer: ''
                        }
                    ],
                    actions:[
                        {
                            title: 'Reconnect to the passion in your business; what impact do you want to have; why do you care; what are you willing to sacrifice/invest to reach your ultimate goal? Spend half an hour writing down all your thoughts about this.   ',
                            added: false
                        },
                        {
                            title: 'Ask 5 friends to meet you for lunch or drinks so you can vent and receive affirmation.  ',
                            added: false
                        },
                        {
                            title: 'Connect with your 5 best clients, current and former, and find out what they love about working with you. Print out their responses and hang them where you can see them every day.',
                            added: false
                        }
                    ]
                
                }
            ],
        };
        me.emptyReflextion = function (emotion) {
            var feeling = _.find(me.reflextionData, {emotion: emotion});
            return {
                type: 'reflextion',
                title: '',
                notes: '',
                dueDate: moment().format($rootScope.dateFormat),
                progress: 0,
                feeling: feeling
            }
        };

        // --- methods ---

        me.loadExcuteItemsByUser = function (userId) {
            
            return apiService.rest.all('excuteItemsByUser').one(userId).getList().then(function (excuteItems) {
                return excuteItems.data;
            });
            
            
        };
        
        me.loadExcuteItems = function (refresh) {
            var deferred = $q.defer();
            
            // if (!refresh && me.excuteItems) {
            //     deferred.resolve(me.excuteItems);
            // } else {
                apiService.rest.all('excuteItems').getList().then(function (excuteItems) {
                    $rootScope.$broadcast('excuteItemsEvent');
                    me.excuteItems = excuteItems.data;

                    deferred.resolve(me.excuteItems);
                });
            // }
            
            return deferred.promise;
        };

        me.createItem = function (item) {
            return me.rest().post(item).then(function (excuteItem) {
                $rootScope.$broadcast('excuteItemsEvent');
                return excuteItem;
            });
        }

        me.createBulk = function(items) {
            return $q.all(items.map(function (item){
                return me.rest().post(item);
            }));
        }

        me.rest = function () {
            return apiService.rest.all('excuteItems')
        };

    }
})();
(function () {
    'use strict';

    dashboardService.$inject = ["apiService"];
    angular
        .module('app.services')
        .service('dashboardService', dashboardService);

    /* @ngInject */
    function dashboardService(apiService) {
        var me = this;

        me.count = function (range) {
            return me.all().getList(angular.extend({range: range}));
        };
        me.graph = function (range, currentData) {
            return me.all().one('graph').get(
                angular.extend(
                    {range: range, data: currentData}));
        };

        me.countapp = function (range) {
            return me.all().one('userapps').get(angular.extend({range: range}));
        };

        me.all = function () {
            return apiService.rest.all('dashboard')
        };
    }
})();
(function () {
    'use strict';

    commonDialogService.$inject = ["$mdDialog"];
    angular
        .module('app.services')
        .service('commonDialogService', commonDialogService);

    /* @ngInject */
    function commonDialogService($mdDialog) {
        var service = this;
        service.openDeleteItemDialog = openDeleteItemDialog;

        function openDeleteItemDialog($event, title, success, fail) {
            // Appending dialog to document.body to cover sidenav in docs app
            var confirm = $mdDialog.confirm()
                .title('Confirm Delete')
                .textContent(title)
                .ariaLabel('Delete')
                .targetEvent($event)
                .ok('Delete')
                .cancel('No');

            $mdDialog.show(confirm).then(success, function() {
                
            });
        }

        return service;
    }
})();
(function () {
    'use strict';

    clientsService.$inject = ["apiService"];
    angular
        .module('app.services')
        .service('clientsService', clientsService);

    /* @ngInject */
    function clientsService(apiService) {
        var me = this;

        // --- vars ---

        // --- methods ---

        me.one = function (clientId) {
            // api/users/10
            return me.all().one('', clientId).get();
        };

        me.list = function (params) {
            // api/v1/users/?count=10&page=1
            return me.all().getList(params);
        };

        me.listByCompany = function (companyId, params) {
            return me.all().getList(params);
        };

        me.all = function () {
            return apiService.rest.all('users')
        };

    }
})();
(function () {
    'use strict';

    pageService.$inject = ["$rootScope"];
    angular
        .module('app.services')
        .service('pageService', pageService);

    /* @ngInject */
    function pageService($rootScope) {
        var me = this;

        // --- vars ---
        
        me.showBC = true;
        me.crumbs = [];
        me.h1 = '';

        // --- methods ---

        me.addCrumb = function (item) {
            me.crumbs.push(item);
            return me;
        };

        me.reset = function () {
            me.crumbs = [];
            me.h1 = '';
            me.showBC = true;
            return me;
        };

        me.setShowBC = function(status){
            me.showBC = status;
            return me;
        };

        me.setPageTitle = function (title) {
            me.h1 = title;
            $rootScope.setDocumentTitle(title);
            return me;
        };
    }
})();
(function () {
    'use strict';

    apiService.$inject = ["$rootScope", "$auth", "Restangular", "toaster", "CONFIG"];
    angular
        .module('app.services')
        .service('apiService', apiService);

    function apiService($rootScope, $auth, Restangular, toaster, CONFIG) {
        var me = this;

        // --- vars ---

        me.headers = {
            'Content-Type': 'application/json'
        };

        me.rest = Restangular.withConfig(function (RestangularConfigurer) {
            RestangularConfigurer
                .setBaseUrl(CONFIG.api + '/v1')
                .setDefaultHeaders(me.headers)
                .setFullResponse(true)
                .setErrorInterceptor(function (response) {
                    switch (response.status) {
                        case 401:
                            $rootScope.$broadcast('authUnauthorized');
                            break;

                        case 403:
                            $rootScope.$broadcast('authForbidden');
                            break;

                        default:
                            toaster.pop({type: 'error', body: response.statusText || 'Server error'});
                    }
                })
                .addFullRequestInterceptor(function (element, operation, what, url, headers, params) {
                    var token = $auth.getToken();
                    if (token) {
                        params = params || {};
                        // console.log(element, operation, what, url, headers, params);
                        // params['access-token'] = $auth.getToken();
                        headers.Authorization = 'Bearer ' + token;
                    }
                });
        });

    }
})();
(function() {
    'use strict';

    angular
        .module('app.services')
        .service('actionplanService', actionplanService);

    function actionplanService() {
        var _defaultActionItems = [
            {
                strategyId: 1,
                actions: [
                    [
                        {type: 'action', dueDate: new Date(), progress: 0, feeling: null, notes: '', title:'Connect Prep Month1-1'},
                        {type: 'action', dueDate: new Date(), progress: 0, feeling: null, notes: '', title:'Connect Prep Month1-2'},
                        {type: 'action', dueDate: new Date(), progress: 0, feeling: null, notes: '', title:'Connect Prep Month1-3'}
                    ],
                    [
                        {type: 'action', dueDate: new Date(), progress: 0, feeling: null, notes: '', title:'Connect Prep Month2-1'},
                        {type: 'action', dueDate: new Date(), progress: 0, feeling: null, notes: '', title:'Connect Prep Month2-2'},
                        {type: 'action', dueDate: new Date(), progress: 0, feeling: null, notes: '', title:'Connect Prep Month2-3'}
                    ],
                    [
                        {type: 'action', dueDate: new Date(), progress: 0, feeling: null, notes: '', title:'Connect Prep Month3-1'},
                        {type: 'action', dueDate: new Date(), progress: 0, feeling: null, notes: '', title:'Connect Prep Month3-2'},
                        {type: 'action', dueDate: new Date(), progress: 0, feeling: null, notes: '', title:'Connect Prep Month3-3'}
                    ],

                ] 

            },
            {
                strategyId: 2,
                actions: [
                    [
                        {type: 'action', dueDate: new Date(), progress: 0, feeling: null, notes: '', title:'Referrals Month1-1'},
                        {type: 'action', dueDate: new Date(), progress: 0, feeling: null, notes: '', title:'Referrals Month1-2'},
                        {type: 'action', dueDate: new Date(), progress: 0, feeling: null, notes: '', title:'Referrals Month1-3'}
                    ],
                    [
                        {type: 'action', dueDate: new Date(), progress: 0, feeling: null, notes: '', title:'Referrals Month1-1'},
                        {type: 'action', dueDate: new Date(), progress: 0, feeling: null, notes: '', title:'Referrals Month1-2'},
                        {type: 'action', dueDate: new Date(), progress: 0, feeling: null, notes: '', title:'Referrals Month1-3'}
                    ],
                    [
                        {type: 'action', dueDate: new Date(), progress: 0, feeling: null, notes: '', title:'Referrals Month1-1'},
                        {type: 'action', dueDate: new Date(), progress: 0, feeling: null, notes: '', title:'Referrals Month1-2'},
                        {type: 'action', dueDate: new Date(), progress: 0, feeling: null, notes: '', title:'Referrals Month1-3'}
                    ],

                ] 

            },
            {
                strategyId: 3,
                actions: [
                    [
                        {type: 'action', dueDate: new Date(), progress: 0, feeling: null, notes: '', title:'Partnerships Month1-1'},
                        {type: 'action', dueDate: new Date(), progress: 0, feeling: null, notes: '', title:'Partnerships Month1-2'},
                        {type: 'action', dueDate: new Date(), progress: 0, feeling: null, notes: '', title:'Partnerships Month1-3'}
                    ],
                    [
                        {type: 'action', dueDate: new Date(), progress: 0, feeling: null, notes: '', title:'Partnerships Month2-1'},
                        {type: 'action', dueDate: new Date(), progress: 0, feeling: null, notes: '', title:'Partnerships Month2-2'},
                        {type: 'action', dueDate: new Date(), progress: 0, feeling: null, notes: '', title:'Partnerships Month2-3'}
                    ],
                    [
                        {type: 'action', dueDate: new Date(), progress: 0, feeling: null, notes: '', title:'Partnerships Month3-1'},
                        {type: 'action', dueDate: new Date(), progress: 0, feeling: null, notes: '', title:'Partnerships Month3-2'},
                        {type: 'action', dueDate: new Date(), progress: 0, feeling: null, notes: '', title:'Partnerships Month3-3'}
                    ],

                ] 

            },
            {
                strategyId: 4,
                actions: [
                    [
                        {type: 'action', dueDate: new Date(), progress: 0, feeling: null, notes: '', title:'Hit List Month1-1'},
                        {type: 'action', dueDate: new Date(), progress: 0, feeling: null, notes: '', title:'Hit List Month1-2'},
                        {type: 'action', dueDate: new Date(), progress: 0, feeling: null, notes: '', title:'Hit List Month1-3'}
                    ],
                    [
                        {type: 'action', dueDate: new Date(), progress: 0, feeling: null, notes: '', title:'Hit List Month1-1'},
                        {type: 'action', dueDate: new Date(), progress: 0, feeling: null, notes: '', title:'Hit List Month1-2'},
                        {type: 'action', dueDate: new Date(), progress: 0, feeling: null, notes: '', title:'Hit List Month1-3'}
                    ],
                    [
                        {type: 'action', dueDate: new Date(), progress: 0, feeling: null, notes: '', title:'Hit List Month1-1'},
                        {type: 'action', dueDate: new Date(), progress: 0, feeling: null, notes: '', title:'Hit List Month1-2'},
                        {type: 'action', dueDate: new Date(), progress: 0, feeling: null, notes: '', title:'Hit List Month1-3'}
                    ],

                ] 

            },
            {
                strategyId: 5,
                actions: [
                    [
                        {type: 'action', dueDate: new Date(), progress: 0, feeling: null, notes: '', title:'Events Month1-1'},
                        {type: 'action', dueDate: new Date(), progress: 0, feeling: null, notes: '', title:'Events Month1-2'},
                        {type: 'action', dueDate: new Date(), progress: 0, feeling: null, notes: '', title:'Events Month1-3'}
                    ],
                    [
                        {type: 'action', dueDate: new Date(), progress: 0, feeling: null, notes: '', title:'Events Month1-1'},
                        {type: 'action', dueDate: new Date(), progress: 0, feeling: null, notes: '', title:'Events Month1-2'},
                        {type: 'action', dueDate: new Date(), progress: 0, feeling: null, notes: '', title:'Events Month1-3'}
                    ],
                    [
                        {type: 'action', dueDate: new Date(), progress: 0, feeling: null, notes: '', title:'Events Month1-1'},
                        {type: 'action', dueDate: new Date(), progress: 0, feeling: null, notes: '', title:'Events Month1-2'},
                        {type: 'action', dueDate: new Date(), progress: 0, feeling: null, notes: '', title:'Events Month1-3'}
                    ],

                ] 

            },
            {
                strategyId: 6,
                actions: [
                    [
                        {type: 'action', dueDate: new Date(), progress: 0, feeling: null, notes: '', title:'Media Month1-1'},
                        {type: 'action', dueDate: new Date(), progress: 0, feeling: null, notes: '', title:'Media Month1-2'},
                        {type: 'action', dueDate: new Date(), progress: 0, feeling: null, notes: '', title:'Media Month1-3'}
                    ],
                    [
                        {type: 'action', dueDate: new Date(), progress: 0, feeling: null, notes: '', title:'Media Month1-1'},
                        {type: 'action', dueDate: new Date(), progress: 0, feeling: null, notes: '', title:'Media Month1-2'},
                        {type: 'action', dueDate: new Date(), progress: 0, feeling: null, notes: '', title:'Media Month1-3'}
                    ],
                    [
                        {type: 'action', dueDate: new Date(), progress: 0, feeling: null, notes: '', title:'Media Month1-1'},
                        {type: 'action', dueDate: new Date(), progress: 0, feeling: null, notes: '', title:'Media Month1-2'},
                        {type: 'action', dueDate: new Date(), progress: 0, feeling: null, notes: '', title:'Media Month1-3'}
                    ],

                ] 

            },
            {
                strategyId: 7,
                actions: [
                    [
                        {type: 'action', dueDate: new Date(), progress: 0, feeling: null, notes: '', title:'Sepcial Deals Month1-1'},
                        {type: 'action', dueDate: new Date(), progress: 0, feeling: null, notes: '', title:'Sepcial Deals Month1-2'},
                        {type: 'action', dueDate: new Date(), progress: 0, feeling: null, notes: '', title:'Sepcial Deals Month1-3'}
                    ],
                    [
                        {type: 'action', dueDate: new Date(), progress: 0, feeling: null, notes: '', title:'Sepcial Deals Month1-1'},
                        {type: 'action', dueDate: new Date(), progress: 0, feeling: null, notes: '', title:'Sepcial Deals Month1-2'},
                        {type: 'action', dueDate: new Date(), progress: 0, feeling: null, notes: '', title:'Sepcial Deals Month1-3'}
                    ],
                    [
                        {type: 'action', dueDate: new Date(), progress: 0, feeling: null, notes: '', title:'Sepcial Deals Month1-1'},
                        {type: 'action', dueDate: new Date(), progress: 0, feeling: null, notes: '', title:'Sepcial Deals Month1-2'},
                        {type: 'action', dueDate: new Date(), progress: 0, feeling: null, notes: '', title:'Sepcial Deals Month1-3'}
                    ],

                ] 

            },
            {
                strategyId: 8,
                actions: [
                    [
                        {type: 'action', dueDate: new Date(), progress: 0, feeling: null, notes: '', title:'Online Connecting Month1-1'},
                        {type: 'action', dueDate: new Date(), progress: 0, feeling: null, notes: '', title:'Online Connecting Month1-2'},
                        {type: 'action', dueDate: new Date(), progress: 0, feeling: null, notes: '', title:'Online Connecting Month1-3'}
                    ],
                    [
                        {type: 'action', dueDate: new Date(), progress: 0, feeling: null, notes: '', title:'Online Connecting Month1-1'},
                        {type: 'action', dueDate: new Date(), progress: 0, feeling: null, notes: '', title:'Online Connecting Month1-2'},
                        {type: 'action', dueDate: new Date(), progress: 0, feeling: null, notes: '', title:'Online Connecting Month1-3'}
                    ],
                    [
                        {type: 'action', dueDate: new Date(), progress: 0, feeling: null, notes: '', title:'Online Connecting Month1-1'},
                        {type: 'action', dueDate: new Date(), progress: 0, feeling: null, notes: '', title:'Online Connecting Month1-2'},
                        {type: 'action', dueDate: new Date(), progress: 0, feeling: null, notes: '', title:'Online Connecting Month1-3'}
                    ],

                ] 

            },
            {
                strategyId: 9,
                actions: [
                    [
                        {type: 'action', dueDate: new Date(), progress: 0, feeling: null, notes: '', title:'Loyality Month1-1'},
                        {type: 'action', dueDate: new Date(), progress: 0, feeling: null, notes: '', title:'Loyality Month1-2'},
                        {type: 'action', dueDate: new Date(), progress: 0, feeling: null, notes: '', title:'Loyality Month1-3'}
                    ],
                    [
                        {type: 'action', dueDate: new Date(), progress: 0, feeling: null, notes: '', title:'Loyality Month1-1'},
                        {type: 'action', dueDate: new Date(), progress: 0, feeling: null, notes: '', title:'Loyality Month1-2'},
                        {type: 'action', dueDate: new Date(), progress: 0, feeling: null, notes: '', title:'Loyality Month1-3'}
                    ],
                    [
                        {type: 'action', dueDate: new Date(), progress: 0, feeling: null, notes: '', title:'Loyality Month1-1'},
                        {type: 'action', dueDate: new Date(), progress: 0, feeling: null, notes: '', title:'Loyality Month1-2'},
                        {type: 'action', dueDate: new Date(), progress: 0, feeling: null, notes: '', title:'Loyality Month1-3'}
                    ],

                ] 

            },
            {
                strategyId: 10,
                actions: [
                    [
                        {type: 'action', dueDate: new Date(), progress: 0, feeling: null, notes: '', title:'SLAPnap Month1-1'},
                        {type: 'action', dueDate: new Date(), progress: 0, feeling: null, notes: '', title:'SLAPnap Month1-2'},
                        {type: 'action', dueDate: new Date(), progress: 0, feeling: null, notes: '', title:'SLAPnap Month1-3'}
                    ],
                    [
                        {type: 'action', dueDate: new Date(), progress: 0, feeling: null, notes: '', title:'SLAPnap Month2-1'},
                        {type: 'action', dueDate: new Date(), progress: 0, feeling: null, notes: '', title:'SLAPnap Month2-2'},
                        {type: 'action', dueDate: new Date(), progress: 0, feeling: null, notes: '', title:'SLAPnap Month2-3'}
                    ],
                    [
                        {type: 'action', dueDate: new Date(), progress: 0, feeling: null, notes: '', title:'SLAPnap Month3-1'},
                        {type: 'action', dueDate: new Date(), progress: 0, feeling: null, notes: '', title:'SLAPnap Month3-2'},
                        {type: 'action', dueDate: new Date(), progress: 0, feeling: null, notes: '', title:'SLAPnap Month3-3'}
                    ],

                ] 

            },
        ]
        var _defaultEvents = [
            {
                events: [
                    {name:'New Year\'s Day'},
                    {name:'King Day'},
                ],
                actionItems: [

                ]
            },
            {
                events: [
                    {name:'Valentine\'s Day'},
                    {name:'Family Day in Canada'},
                ],
                actionItems: [
                    
                ]
            },
            {
                events: [
                    {name:'Spring Break'}
                ],
                actionItems: [
                    
                ]
            },
            {
                events: [
                    {name:'US tax deadline'}
                ]
            },
            {
                events: [
                    {name:'May long weekend'},
                ],
                actionItems: [
                    
                ]
            },
            {
                events: [
                    {name:'Father\'s day'},
                    {name:'School Break'},
                ],
                actionItems: [
                    
                ]
            },
            {
                events: [
                    {name:'4th of July in US'}
                ],
                actionItems: [
                    
                ]
            },
            {
                events: [
                    {name:'School Starts'}
                ],
                actionItems: [
                    
                ]
            },
            {
                events: [
                    {name:'Holidays'}
                ],
                actionItems: [
                    
                ]
            },
            {
                events: [
                    {name:'Halloween'}
                ]
            },
            {
                events: [
                    {name:'US thanksgiving'}
                ],
                actionItems: [
                    
                ]
            },
            {
                events: [
                    {name:'Christmas'}
                ],
                actionItems: [
                    
                ]
            }
        ];
        var _defaultConnectingStrategies = [
            {id: 1, name: 'Connect Prep', video:'http://media.w3.org/2016/01/Emmy-Award.mp4', rating: 0, reason:''},
            {id: 2, name: 'Referrals', video:'http://media.w3.org/2016/01/Emmy-Award.mp4', rating: 0, reason:''},
            {id: 3, name: 'Partnerships', video:'http://media.w3.org/2016/01/Emmy-Award.mp4', rating: 0, reason:''},
            {id: 4, name: 'Hit List', video:'http://media.w3.org/2016/01/Emmy-Award.mp4', rating: 0, reason:''},
            {id: 5, name: 'Events', video:'http://media.w3.org/2016/01/Emmy-Award.mp4', rating: 0, reason:''},
            {id: 6, name: 'Media', video:'http://media.w3.org/2016/01/Emmy-Award.mp4', rating: 0, reason:''},
            {id: 7, name: 'Sepcial Deals', video:'http://media.w3.org/2016/01/Emmy-Award.mp4', rating: 0, reason:''},
            {id: 8, name: 'Online Connecting', video:'http://media.w3.org/2016/01/Emmy-Award.mp4', rating: 0, reason:''},
            {id: 9, name: 'Loyality', video:'http://media.w3.org/2016/01/Emmy-Award.mp4', rating: 0, reason:''},
            {id: 10, name: 'SLAPnap', video:'http://media.w3.org/2016/01/Emmy-Award.mp4', rating: 0, reason:''},
        ];

        var _monthLongNames = ["January", "February", "March", "April", "May","June", "July", "August", "September", "October","November", "December"];
        var _monthShortNames = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'June', 'July', 'Aug', 'Sept', 'Oct', 'Nov', 'Dec'];
        this.getDefaultEvents = getDefaultEvents;
        this.getMonthLongNames = getMonthLongNames;
        this.getNthQuaterMonths = getNthQuaterMonths;
        this.getNthQuater = getNthQuater;
        this.getDefaultConnectingStrategies = getDefaultConnectingStrategies;
        this.calculateTopStrategies = calculateTopStrategies;
        this.getDefaultActionsByStrategy = getDefaultActionsByStrategy;

        ////////////////////////////

        function getDefaultEvents() {
            return _defaultEvents;
        }

        function getMonthLongNames() {
            return  _monthLongNames;
        }

        function getNthQuaterMonths(startMonth, indexQut) {
            var months = [];
            months.push((+startMonth + 3 * (indexQut - 1) - 1) % 12);
            months.push((+startMonth + 3 * (indexQut - 1)) % 12);
            months.push((+startMonth + 3 * (indexQut - 1) + 1) % 12);
            return months;
        }

        function getNthQuater(startDate, indexQut) {
            var months = [];
            months.push((+startDate.month + 3 * (indexQut - 1) - 1) % 12);
            months.push((+startDate.month + 3 * (indexQut - 1)) % 12);
            months.push((+startDate.month + 3 * (indexQut - 1) + 1) % 12);

            var startQuater = moment({year: startDate.year + ((+startDate.month + 3 * (indexQut - 1) - 1) / 12), month:months[0], day: 1 });
            var endQuater = moment({year: startDate.year + ((+startDate.month + 3 * (indexQut - 1) + 1) / 12), month:months[2], day: 1 }).endOf('month');
            return {
                months: months,
                start: startQuater,
                end: endQuater,
                nth: indexQut,
                monthsString: _monthShortNames[months[0]] + ', ' + _monthShortNames[months[1]] + ', ' + _monthShortNames[months[2]]
            };
        }

        function getDefaultConnectingStrategies() {
            return _defaultConnectingStrategies;
        }

        function calculateTopStrategies(stratigies){
            var topRated = [];
            for (var i = 5; i >= 0; i --) {
                var rated = _.filter(stratigies, {rating: i});
                if (rated.length != 0)
                    topRated = topRated.concat(rated);

                if ( topRated.length >= 4 )
                    break;
            }
            return topRated;
        }

        function getDefaultActionsByStrategy(id) {
            var itemMonth = _.find(_defaultActionItems, {strategyId: id});
            return itemMonth;
        }
    }
}());
(function () {
    'use strict';

    angular
        .module('app.pages', [
            'app.pages.main',
            'app.pages.settingsUser',
            'app.pages.statement',
            'app.pages.mindset',
            'app.pages.yearGoal',
            'app.pages.idealClient',
            'app.pages.actionPlan',
            'app.pages.execute',
            'app.pages.slapExcute'
            // 'app.pages.cart',
            // 'app.pages.media',
            // 'app.pages.clients'
            // 'app.pages.projects',
            // 'app.pages.apps',
            // 'app.pages.company',
            // 'app.pages.categories',
            // 'app.pages.templates',
            // 'app.pages.settings',
            // 'app.pages.news',
            // 'app.pages.subscriptions'
        ]);
})();
(function () {
    'use strict';

    angular
        .module(
            'app',
            [
                'adminapp',
                'templates',

                'ngRoute',
                'ngAnimate',
                'ngSanitize',
                'ngMaterial',
                'ngAria',
                'ngMessages',

                'ngTable',

                'angular-loading-bar',
                'restangular',
                'satellizer',
                'toaster',
                'ui.router',
                'ui.bootstrap',
                'ui.mask',
                'frapontillo.bootstrap-switch',
                'ui.select',
                'mgcrea.ngStrap',
                'ngCsv',
                'daterangepicker',
                'rzModule',
                'angular-svg-round-progressbar',
                'angular.filter',
                'dataGrid', 
                'pagination',


                'app.services',
                'app.filters',
                'app.components',
                'app.directives',
                'app.pages'
            ]
        )
})();
(function () {
    'use strict';

    angular
        .module('app')
        .config(LayoutConfig);

    /* @ngInject */
    function LayoutConfig() {

    }
})();
(function () {
    'use strict';

    LayoutWithNavbarController.$inject = ["$scope", "CONFIG", "$auth", "$state", "pageService", "userService"];
    angular
        .module('app')
        .controller('LayoutWithNavbarController', LayoutWithNavbarController);

    /* @ngInject */
    function LayoutWithNavbarController($scope, CONFIG, $auth, $state, pageService, userService) {


    }
})();
(function () {
    'use strict';

    LayoutOneController.$inject = ["$scope", "CONFIG", "$auth", "$state", "pageService", "userService"];
    angular
        .module('app')
        .controller('LayoutOneController', LayoutOneController);

    /* @ngInject */
    function LayoutOneController($scope, CONFIG, $auth, $state, pageService, userService) {
        // $scope.static_url = CONFIG.url.static;
        // // $scope.logo = CONFIG.url.static + '/images/logo-white.png';
        // $scope.auth = $auth;
        // $scope.breadcrumbs = pageService;
        // $scope.config = CONFIG;
        // $scope.state = $state;
        // $scope.user = userService;
        // $scope.reach = {};
        // $scope.message = '';
        // $scope.sidebarHide = null;
        //
        // $scope.logout = function() {
        //     $auth.logout();
        //     $state.go('login');
        // };
        //
        // $scope.closeMenu = function () {
        //     $scope.sidebarHide = 'sidebar-hide-lpanel';
        // };
        // $scope.sidebarHideOff = function () {
        //     $scope.sidebarHide = null;
        // };
        //
        // var windowHeight = window.innerHeight;
        // if (windowHeight < 768) {
        //     $scope.slimHeight = windowHeight - 120;
        // } else {
        //     $scope.slimHeight = windowHeight - 50;
        // }
        //
        // $scope.stateGo = function (state) {
        //     $state.go(state);
        // };
        //
        // // Enable Bootstrap's popover function
        // $(document).ready(function () {
        //     $('[data-toggle="popover"]').popover({
        //         placement: 'top',
        //         trigger: 'hover',
        //         html: true
        //     });
        // });

    }
})();
(function () {
    'use strict';

    LayoutDefaultController.$inject = ["$scope", "CONFIG", "$auth", "$state", "pageService", "userService", "stepService"];
    angular
        .module('app')
        .controller('LayoutDefaultController', LayoutDefaultController);

    /* @ngInject */
    function LayoutDefaultController($scope, CONFIG, $auth, $state, pageService, userService, stepService) {
        // $scope.static_url = CONFIG.url.static;
        // // $scope.logo = CONFIG.url.static + '/images/logo-white.png';
        // $scope.auth = $auth;
        // $scope.breadcrumbs = pageService;
        // $scope.config = CONFIG;
        // $scope.state = $state;
        // $scope.user = userService;
        // $scope.reach = {};
        // $scope.message = '';
        // $scope.sidebarHide = null;
        //
        // $scope.logout = function() {
        //     $auth.logout();
        //     $state.go('login');
        // };
        //
        // $scope.closeMenu = function () {
        //     $scope.sidebarHide = 'sidebar-hide-lpanel';
        // };
        // $scope.sidebarHideOff = function () {
        //     $scope.sidebarHide = null;
        // };
        //
        // var windowHeight = window.innerHeight;
        // if (windowHeight < 768) {
        //     $scope.slimHeight = windowHeight - 120;
        // } else {
        //     $scope.slimHeight = windowHeight - 50;
        // }
        //
        // $scope.stateGo = function (state) {
        //     $state.go(state);
        // };
        //
        // // Enable Bootstrap's popover function
        // $(document).ready(function () {
        //     $('[data-toggle="popover"]').popover({
        //         placement: 'top',
        //         trigger: 'hover',
        //         html: true
        //     });
        // });

        
    }
})();
(function () {
    'use strict';

    LayoutBlankController.$inject = ["$scope"];
    angular
        .module('app')
        .controller('LayoutBlankController', LayoutBlankController);

    /* @ngInject */
    function LayoutBlankController($scope) {
    }
})();
(function () {
    'use strict';

    angular
        .module('app.filters', []);
})();
(function () {
    'use strict';

    angular
        .module('app.filters')
        .filter('value', valueFilter);

    function valueFilter() {
        var parseString = function (input) {
            return input
                .replace(/\[(\w+)\]/g, '.$1') // convert indexes to properties
                .replace(/^\./, '') // strip a leading dot
                .split('.');
        };

        function getValue(object, propertyArray, defaultValue) {
            var value = object;

            for (var i = 0, n = propertyArray.length; i < n; ++i) {
                if (angular.isUndefined(value)){
                    return defaultValue;
                }
                var key = propertyArray[i];
                if (key in value) {
                    value = value[key];
                } else {
                    return defaultValue;
                }
            }

            return value;
        }

        // использование из js $filter('value')(obj,'part3[0].name')
        // использование из шаблона {{ obj | value:'part3[0].name' }}

        return function (object, pathString, defaultValue) {
            return getValue(object, parseString(pathString), defaultValue);
        }
    }
})();
(function () {
    'use strict';

    angular
        .module('app.filters')
        .filter('joinBr', joinBr);

    function joinBr() {
        return function (array) {
            return angular.isArray(array) ? array.join('<br>') : '';
        }
    }
})();
(function () {
    'use strict';

    angular
        .module('app.filters')
        .filter('format', formatFilter);

    function formatFilter() {
        // использование из js $filter('format')(obj,'{0} to {1}')
        // использование из шаблона {{ obj | value:'part3[0].name' }}

        return function (input) {
            var args = arguments;
            return input.replace(/\{(\d+)\}/g, function (match, capture) {
                return args[1 * capture + 1];
            });
        };
    }
})();
(function () {
    'use strict';

    runApp.$inject = ["$rootScope", "$timeout", "$window", "$state", "$auth", "BCService", "CONFIG", "userService"];
    angular
        .module('adminapp')
        .run(runApp);

    function runApp($rootScope, $timeout, $window, $state, $auth, BCService, CONFIG, userService) {
        $rootScope.isReady = false;


        $rootScope.setDocumentTitle = function (title) {
            $window.document.title = CONFIG.title + ' | ' + title;
        };

        // $rootScope.$on('$stateChangeSuccess', function (event, toState, toStateParams) {
        //     // set title page
        //     $timeout(function () {
        //         $rootScope.setDocumentTitle(BCService.h1);
        //     });
        // });
    }

})();
(function() {
    'use strict';

    angular
        .module('adminapp')
        .config(config);

    config.$inject = ['$stateProvider', '$urlRouterProvider', '$authProvider', 'CONFIG'];

    function config($stateProvider, $urlRouterProvider,$authProvider,CONFIG) {

        

        $urlRouterProvider.when('', '/');

        $urlRouterProvider.otherwise('/');

        $authProvider.httpInterceptor = function() {
            return true;
        };

        $authProvider.withCredentials = false;
        $authProvider.loginUrl = CONFIG.api + '/admin/auth';
        $authProvider.baseUrl = '/';
        // $authProvider.unlinkUrl = '/auth/unlink/';
        $authProvider.tokenName = 'token';
        $authProvider.tokenRoot = 'data';
        $authProvider.tokenPrefix = 'satellizer';
        $authProvider.tokenHeader = 'Authorization';
        $authProvider.tokenType = 'Bearer';
        $authProvider.storageType = 'localStorage';

    }
}());
(function () {
    'use strict';

    runApp.$inject = ["$rootScope", "$timeout", "$window", "$state", "$auth", "pageService", "CONFIG", "userService", "adminUserService"];
    angular
        .module('app')
        .run(runApp);

    function runApp($rootScope, $timeout, $window, $state, $auth, pageService, CONFIG, userService, adminUserService) {
        $rootScope.isReady = false;
        $rootScope.dateFormat = "MM/DD/YYYY";
        $rootScope.$on('$stateChangeStart', function (event, toState, toStateParams) {
            // запоминаем, куда пытаемся перейти и с какими параметрами
            $rootScope.toState = toState;
            $rootScope.toStateParams = toStateParams;

            if (!$rootScope.isReady) {
                event.preventDefault();
                return false;
            }

            if (toState.data && toState.data.access) {
                /*Cancel going to the authenticated state and go back to landing*/
                if (toState.data.access == '@' && !$auth.isAuthenticated()) {
                    event.preventDefault();
                    return $state.go('login');
                }

                if (toState.data.access == '?' && $auth.isAuthenticated()) {
                    event.preventDefault();
                    return $state.go('home');
                }

                if (toState.data.access == 'admin' && !userService.isAdmin()) {
                    event.preventDefault();
                    return $state.go('home');
                }

                if (userService.isAdmin() && !toState.data.isAdminPage) {
                    event.preventDefault();
                    return $state.go('admin.home');
                }
            }
        });

        $rootScope.setDocumentTitle = function (title) {
            $window.document.title = title;
        };

        $rootScope.$on('$stateChangeSuccess', function (event, toState, toStateParams) {
            // set title page
            $timeout(function () {
                var portion = 'SLAPcenter | ';
                if(toState.data && toState.data.isAdminPage)
                    portion = 'SLAPadmin | ';
                $rootScope.setDocumentTitle(portion + pageService.h1);
            });
        });

        $rootScope.$on('authUnauthorized', function () {
            $rootScope.isReady = true;
            if ($rootScope.toState.name == 'confirm' || $rootScope.toState.name == 'reset_password') {
                $state.go(
                    $rootScope.toState,
                    $rootScope.toStateParams
                );
            } else {
                $state.go('login');
            }
        });

        $rootScope.$on('authForbidden', function () {
            $state.go('home');
        });
        if ($auth.isAuthenticated()) {
            
            userService.loadUser().then(function (data) {
                $rootScope.isReady = true;
                
                $state.go(
                    _.get($rootScope, 'toState.name', 'home'),
                    _.get($rootScope, 'toStateParams')
                );
            });
        } else {

            $rootScope.isReady = true;
        }

    }

})();
(function () {
    'use strict';

    config.$inject = ["$stateProvider", "$urlRouterProvider", "$authProvider", "cfpLoadingBarProvider", "CONFIG", "$compileProvider", "$mdThemingProvider", "RestangularProvider"];
    angular
        .module('app')
        .config(config);

    /* @ngInject */
    function config($stateProvider, $urlRouterProvider, $authProvider, cfpLoadingBarProvider, CONFIG,$compileProvider, $mdThemingProvider, RestangularProvider) {
        RestangularProvider.setRestangularFields({
            id: "_id"
        });

        $stateProvider
        // app blank layout
            .state('blank', {
                abstract: true,
                controller: 'LayoutBlankController',
                templateUrl: 'layouts/layout-blank.html'
            })

            // app default layout
            .state('default', {
                abstract: true,
                parent: 'blank',
                views: {
                    content: {
                        controller: 'LayoutDefaultController',
                        templateUrl: 'layouts/layout-default.html'
                    }
                }

            })
            .state('one', {
                abstract:true,
                parent:'blank',
                views: {
                    content: {
                        controller: 'LayoutOneController',
                        template: '<div ui-view="content"></div>'
                    }
                }
            })
            .state('withNavbar', {
                abstract:true,
                parent:'blank',
                views: {
                    content: {
                        controller: 'LayoutWithNavbarController',
                        template: '<slap-header></slap-header><div class="slap-container" ui-view="content"></div>'
                    }
                }
            })
            .state('admin', {
                data: {
                    access: 'admin'
                },
                abstract:true,
                url : '/admin',
                parent:'blank',
                views : {
                    content : {
                        controller : 'AdminLayoutDefaultController',
                        templateUrl : 'admin/layouts/layout-default.html'
                    }
                }
            });

        // set default routes when no path specified
        $urlRouterProvider.when('', '/');
        //$urlRouterProvider.when('/', '/main/index');

        // always goto 404 if route not found
        //$urlRouterProvider.otherwise('/');
        $urlRouterProvider.otherwise('/404');

        $compileProvider.debugInfoEnabled(true);  // in production false

        // loading bar config
        cfpLoadingBarProvider.includeSpinner = false;

        // auth config
        $authProvider.httpInterceptor = function () {
            return true;
        };
        // $authProvider.tokenPrefix = '_';
        $authProvider.loginUrl = CONFIG.api + '/v1/auth';
        $authProvider.signupUrl = CONFIG.api + '/v1/auth/signup';
        $authProvider.tokenRoot = 'data';//compensates success response macro
        $authProvider.withCredentials = false;
        $authProvider.baseUrl = CONFIG.api + '/';
        $authProvider.unlinkUrl = CONFIG.api + '/auth/unlink/';
        $authProvider.tokenName = 'token';
        $authProvider.tokenPrefix = 'satellizer';
        $authProvider.tokenHeader = 'Authorization';
        $authProvider.tokenType = 'Bearer';
        $authProvider.storageType = 'localStorage';


        // Extend the red theme with a different color and make the contrast color black instead of white.
        // For example: raised button text will be black instead of white.
        var slapTheme = $mdThemingProvider.extendPalette('light-blue', {
        });

        // Register the new color palette map with the name <code>neonRed</code>
        $mdThemingProvider.definePalette('slapTheme', slapTheme);

        // Use that theme for the primary intentions
        $mdThemingProvider.theme('default')
        .primaryPalette('slapTheme');

    }
})();
(function () {
    'use strict';

    angular
        .module('adminapp')
        .constant('CONFIG', {
            "title": "SLAPcenter",
            "tokenParam": "access-token",
            "api": "http://localhost:8000",
            "url": {
                "static": ""
            }
        })
})();